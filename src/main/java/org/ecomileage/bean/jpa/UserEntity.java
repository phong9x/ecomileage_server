/*
 * Created on 13 thg 12 2017 ( Time 12:02:52 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a basic Primary Key (not composite) 

package org.ecomileage.bean.jpa;

import org.hibernate.annotations.DynamicInsert;
import org.hibernate.annotations.DynamicUpdate;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonIgnore;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

import java.util.Date;
import java.util.List;

import javax.persistence.*;

/**
 * Persistent class for entity stored in table "user"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name="user")
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="UserEntity.countAll", query="SELECT COUNT(x) FROM UserEntity x" )
} )
@DynamicInsert
@DynamicUpdate
public class UserEntity implements Serializable {

    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
    @Id
    @GeneratedValue(strategy=GenerationType.AUTO)
    @Column(name="id", nullable=false)
    private Integer    id           ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    @Column(name="username", length=100)
    private String     username     ;

    @Column(name="status")
    private Short      status       ;

    @Column(name="password", length=500)
    private String     password     ;

    @Column(name="password_temp", length=500)
    private String     passwordTemp ;

    @Column(name="fullname", length=255)
    private String     fullname     ;

    @Column(name="gender", nullable=false)
    private Boolean    gender       ;

    @Temporal(TemporalType.DATE)
    @Column(name="day_of_birth")
    private Date       dayOfBirth   ;

    @Column(name="phone", length=200)
    private String     phone        ;

    @Column(name="email", length=255)
    private String     email        ;

    @Column(name="postcode", length=10)
    private String     postcode     ;

    @Column(name="address", length=300)
    private String     address      ;

    @Column(name="city", length=100)
    private String     city         ;

    @Column(name="district", length=100)
    private String     district     ;

    @Column(name="address_detail", length=300)
    private String     addressDetail ;

    @Column(name="avatar_name", length=500)
    private String     avatarName   ;

    @Column(name="avatar_url", length=500)
    private String     avatarUrl    ;

    @Column(name="sns_type", length=50)
    private String     snsType      ;

    @Column(name="social_id", length=50)
    private String     socialId     ;

    @Column(name="previous_point", nullable=false)
    private Integer    previousPoint ;

    @Column(name="bike_point", nullable=false)
    private Integer    bikePoint    ;

    @Column(name="favourite_point", nullable=false)
    private Integer    favouritePoint ;

    @Column(name="transfer_point", nullable=false)
    private Integer    transferPoint ;

    @Column(name="memo", length=500)
    private String     memo         ;

    @Column(name="total_mileage", nullable=false)
    private Float      totalMileage ;

    @Column(name="total_mileage_old", nullable=false)
    private Float      totalMileageOld ;

    @Column(name="total_reduce_CO2", nullable=false)
    private Float      totalReduceCo2 ;

    @Column(name="total_reduce_CO2_old", nullable=false)
    private Float      totalReduceCo2Old ;

    @Column(name="total_active", nullable=false)
    private Integer    totalActive  ;

    @Column(name="total_active_old", nullable=false)
    private Integer    totalActiveOld ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="leaving_date")
    private Date       leavingDate  ;

    @Column(name="total_goal_tree", nullable=false)
    private Integer    totalGoalTree ;

    @Column(name="leaving_reason", length=300)
    private String     leavingReason ;

    @Column(name="is_delete", nullable=false)
    private Boolean    isDelete     ;

    @Column(name="login_first", nullable=false)
    private Boolean    loginFirst   ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="request_date")
    private Date       requestDate  ;

    @Column(name="certificate_bike_type")
    private Short      certificateBikeType ;

    @Column(name="certificate_tranfer_type")
    private Short      certificateTranferType ;

    @Column(name="certificate_tranfer_wifi")
    private Short      certificateTranferWifi ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="create_date")
    private Date       createDate   ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="update_date")
    private Date       updateDate   ;

    @Column(name="sns_token", length=255)
    private String     snsToken     ;

	// "roleId" (column "role_id") is not defined by itself because used as FK in a link 


    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
	@JsonIgnore
    @OneToMany(mappedBy="user", targetEntity=PaymentEntity.class)
    private List<PaymentEntity> listOfPayment;

	@JsonIgnore
    @OneToMany(mappedBy="user2", targetEntity=MileageBackupEntity.class)
    private List<MileageBackupEntity> listOfMileageBackup2;

	@JsonIgnore
    @OneToMany(mappedBy="user", targetEntity=MileageBackupEntity.class)
    private List<MileageBackupEntity> listOfMileageBackup;

	@JsonIgnore
    @OneToMany(mappedBy="user", targetEntity=SponsorEntity.class)
    private List<SponsorEntity> listOfSponsor;

	@JsonIgnore
    @OneToMany(mappedBy="user", targetEntity=VehicleCodeEntity.class)
    private List<VehicleCodeEntity> listOfVehicleCode;

	@JsonIgnore
    @OneToMany(mappedBy="user", targetEntity=MileageApplyEntity.class)
    private List<MileageApplyEntity> listOfMileageApply;

	@JsonIgnore
    @OneToMany(mappedBy="user", targetEntity=TeamMemberEntity.class)
    private List<TeamMemberEntity> listOfTeamMember;

	@JsonIgnore
    @OneToMany(mappedBy="user", targetEntity=SupportBikeCenterEntity.class)
    private List<SupportBikeCenterEntity> listOfSupportBikeCenter;

	@JsonIgnore
    @OneToMany(mappedBy="user", targetEntity=ReportEntity.class)
    private List<ReportEntity> listOfReport;

	@JsonIgnore
    @OneToMany(mappedBy="user", targetEntity=MileageHistoryEntity.class)
    private List<MileageHistoryEntity> listOfMileageHistory;

    @ManyToOne
    @JoinColumn(name="role_id", referencedColumnName="id")
    private UserRoleEntity userRole    ;

    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public UserEntity() {
		super();
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
    public void setId( Integer id ) {
        this.id = id ;
    }
    public Integer getId() {
        return this.id;
    }

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : username ( VARCHAR ) 
    public void setUsername( String username ) {
        this.username = username;
    }
    public String getUsername() {
        return this.username;
    }

    //--- DATABASE MAPPING : status ( SMALLINT UNSIGNED ) 
    public void setStatus( Short status ) {
        this.status = status;
    }
    public Short getStatus() {
        return this.status;
    }

    //--- DATABASE MAPPING : password ( VARCHAR ) 
    public void setPassword( String password ) {
        this.password = password;
    }
    public String getPassword() {
        return this.password;
    }

    //--- DATABASE MAPPING : password_temp ( VARCHAR ) 
    public void setPasswordTemp( String passwordTemp ) {
        this.passwordTemp = passwordTemp;
    }
    public String getPasswordTemp() {
        return this.passwordTemp;
    }

    //--- DATABASE MAPPING : fullname ( VARCHAR ) 
    public void setFullname( String fullname ) {
        this.fullname = fullname;
    }
    public String getFullname() {
        return this.fullname;
    }

    //--- DATABASE MAPPING : gender ( BIT ) 
    public void setGender( Boolean gender ) {
        this.gender = gender;
    }
    public Boolean getGender() {
        return this.gender;
    }

    //--- DATABASE MAPPING : day_of_birth ( DATE ) 
    public void setDayOfBirth( Date dayOfBirth ) {
        this.dayOfBirth = dayOfBirth;
    }
    public Date getDayOfBirth() {
        return this.dayOfBirth;
    }

    //--- DATABASE MAPPING : phone ( VARCHAR ) 
    public void setPhone( String phone ) {
        this.phone = phone;
    }
    public String getPhone() {
        return this.phone;
    }

    //--- DATABASE MAPPING : email ( VARCHAR ) 
    public void setEmail( String email ) {
        this.email = email;
    }
    public String getEmail() {
        return this.email;
    }

    //--- DATABASE MAPPING : postcode ( VARCHAR ) 
    public void setPostcode( String postcode ) {
        this.postcode = postcode;
    }
    public String getPostcode() {
        return this.postcode;
    }

    //--- DATABASE MAPPING : address ( VARCHAR ) 
    public void setAddress( String address ) {
        this.address = address;
    }
    public String getAddress() {
        return this.address;
    }

    //--- DATABASE MAPPING : city ( VARCHAR ) 
    public void setCity( String city ) {
        this.city = city;
    }
    public String getCity() {
        return this.city;
    }

    //--- DATABASE MAPPING : district ( VARCHAR ) 
    public void setDistrict( String district ) {
        this.district = district;
    }
    public String getDistrict() {
        return this.district;
    }

    //--- DATABASE MAPPING : address_detail ( VARCHAR ) 
    public void setAddressDetail( String addressDetail ) {
        this.addressDetail = addressDetail;
    }
    public String getAddressDetail() {
        return this.addressDetail;
    }

    //--- DATABASE MAPPING : avatar_name ( VARCHAR ) 
    public void setAvatarName( String avatarName ) {
        this.avatarName = avatarName;
    }
    public String getAvatarName() {
        return this.avatarName;
    }

    //--- DATABASE MAPPING : avatar_url ( VARCHAR ) 
    public void setAvatarUrl( String avatarUrl ) {
        this.avatarUrl = avatarUrl;
    }
    public String getAvatarUrl() {
        return this.avatarUrl;
    }

    //--- DATABASE MAPPING : sns_type ( VARCHAR ) 
    public void setSnsType( String snsType ) {
        this.snsType = snsType;
    }
    public String getSnsType() {
        return this.snsType;
    }

    //--- DATABASE MAPPING : social_id ( VARCHAR ) 
    public void setSocialId( String socialId ) {
        this.socialId = socialId;
    }
    public String getSocialId() {
        return this.socialId;
    }

    //--- DATABASE MAPPING : previous_point ( INT ) 
    public void setPreviousPoint( Integer previousPoint ) {
        this.previousPoint = previousPoint;
    }
    public Integer getPreviousPoint() {
        return this.previousPoint;
    }

    //--- DATABASE MAPPING : bike_point ( INT ) 
    public void setBikePoint( Integer bikePoint ) {
        this.bikePoint = bikePoint;
    }
    public Integer getBikePoint() {
        return this.bikePoint;
    }

    //--- DATABASE MAPPING : favourite_point ( INT ) 
    public void setFavouritePoint( Integer favouritePoint ) {
        this.favouritePoint = favouritePoint;
    }
    public Integer getFavouritePoint() {
        return this.favouritePoint;
    }

    //--- DATABASE MAPPING : transfer_point ( INT ) 
    public void setTransferPoint( Integer transferPoint ) {
        this.transferPoint = transferPoint;
    }
    public Integer getTransferPoint() {
        return this.transferPoint;
    }

    //--- DATABASE MAPPING : memo ( VARCHAR ) 
    public void setMemo( String memo ) {
        this.memo = memo;
    }
    public String getMemo() {
        return this.memo;
    }

    //--- DATABASE MAPPING : total_mileage ( FLOAT ) 
    public void setTotalMileage( Float totalMileage ) {
        this.totalMileage = totalMileage;
    }
    public Float getTotalMileage() {
        return this.totalMileage;
    }

    //--- DATABASE MAPPING : total_mileage_old ( FLOAT ) 
    public void setTotalMileageOld( Float totalMileageOld ) {
        this.totalMileageOld = totalMileageOld;
    }
    public Float getTotalMileageOld() {
        return this.totalMileageOld;
    }

    //--- DATABASE MAPPING : total_reduce_CO2 ( FLOAT ) 
    public void setTotalReduceCo2( Float totalReduceCo2 ) {
        this.totalReduceCo2 = totalReduceCo2;
    }
    public Float getTotalReduceCo2() {
        return this.totalReduceCo2;
    }

    //--- DATABASE MAPPING : total_reduce_CO2_old ( FLOAT ) 
    public void setTotalReduceCo2Old( Float totalReduceCo2Old ) {
        this.totalReduceCo2Old = totalReduceCo2Old;
    }
    public Float getTotalReduceCo2Old() {
        return this.totalReduceCo2Old;
    }

    //--- DATABASE MAPPING : total_active ( INT ) 
    public void setTotalActive( Integer totalActive ) {
        this.totalActive = totalActive;
    }
    public Integer getTotalActive() {
        return this.totalActive;
    }

    //--- DATABASE MAPPING : total_active_old ( INT ) 
    public void setTotalActiveOld( Integer totalActiveOld ) {
        this.totalActiveOld = totalActiveOld;
    }
    public Integer getTotalActiveOld() {
        return this.totalActiveOld;
    }

    //--- DATABASE MAPPING : leaving_date ( DATETIME ) 
    public void setLeavingDate( Date leavingDate ) {
        this.leavingDate = leavingDate;
    }
    public Date getLeavingDate() {
        return this.leavingDate;
    }

    //--- DATABASE MAPPING : total_goal_tree ( INT ) 
    public void setTotalGoalTree( Integer totalGoalTree ) {
        this.totalGoalTree = totalGoalTree;
    }
    public Integer getTotalGoalTree() {
        return this.totalGoalTree;
    }

    //--- DATABASE MAPPING : leaving_reason ( VARCHAR ) 
    public void setLeavingReason( String leavingReason ) {
        this.leavingReason = leavingReason;
    }
    public String getLeavingReason() {
        return this.leavingReason;
    }

    //--- DATABASE MAPPING : is_delete ( BIT ) 
    public void setIsDelete( Boolean isDelete ) {
        this.isDelete = isDelete;
    }
    public Boolean getIsDelete() {
        return this.isDelete;
    }

    //--- DATABASE MAPPING : login_first ( BIT ) 
    public void setLoginFirst( Boolean loginFirst ) {
        this.loginFirst = loginFirst;
    }
    public Boolean getLoginFirst() {
        return this.loginFirst;
    }

    //--- DATABASE MAPPING : request_date ( DATETIME ) 
    public void setRequestDate( Date requestDate ) {
        this.requestDate = requestDate;
    }
    public Date getRequestDate() {
        return this.requestDate;
    }

    //--- DATABASE MAPPING : certificate_bike_type ( SMALLINT ) 
    public void setCertificateBikeType( Short certificateBikeType ) {
        this.certificateBikeType = certificateBikeType;
    }
    public Short getCertificateBikeType() {
        return this.certificateBikeType;
    }

    //--- DATABASE MAPPING : certificate_tranfer_type ( SMALLINT ) 
    public void setCertificateTranferType( Short certificateTranferType ) {
        this.certificateTranferType = certificateTranferType;
    }
    public Short getCertificateTranferType() {
        return this.certificateTranferType;
    }

    //--- DATABASE MAPPING : certificate_tranfer_wifi ( SMALLINT ) 
    public void setCertificateTranferWifi( Short certificateTranferWifi ) {
        this.certificateTranferWifi = certificateTranferWifi;
    }
    public Short getCertificateTranferWifi() {
        return this.certificateTranferWifi;
    }

    //--- DATABASE MAPPING : create_date ( DATETIME ) 
    public void setCreateDate( Date createDate ) {
        this.createDate = createDate;
    }
    public Date getCreateDate() {
        return this.createDate;
    }

    //--- DATABASE MAPPING : update_date ( DATETIME ) 
    public void setUpdateDate( Date updateDate ) {
        this.updateDate = updateDate;
    }
    public Date getUpdateDate() {
        return this.updateDate;
    }

    //--- DATABASE MAPPING : sns_token ( VARCHAR ) 
    public void setSnsToken( String snsToken ) {
        this.snsToken = snsToken;
    }
    public String getSnsToken() {
        return this.snsToken;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
    public void setListOfPayment( List<PaymentEntity> listOfPayment ) {
        this.listOfPayment = listOfPayment;
    }
    public List<PaymentEntity> getListOfPayment() {
        return this.listOfPayment;
    }

    public void setListOfMileageBackup2( List<MileageBackupEntity> listOfMileageBackup2 ) {
        this.listOfMileageBackup2 = listOfMileageBackup2;
    }
    public List<MileageBackupEntity> getListOfMileageBackup2() {
        return this.listOfMileageBackup2;
    }

    public void setListOfMileageBackup( List<MileageBackupEntity> listOfMileageBackup ) {
        this.listOfMileageBackup = listOfMileageBackup;
    }
    public List<MileageBackupEntity> getListOfMileageBackup() {
        return this.listOfMileageBackup;
    }

    public void setListOfSponsor( List<SponsorEntity> listOfSponsor ) {
        this.listOfSponsor = listOfSponsor;
    }
    public List<SponsorEntity> getListOfSponsor() {
        return this.listOfSponsor;
    }

    public void setListOfVehicleCode( List<VehicleCodeEntity> listOfVehicleCode ) {
        this.listOfVehicleCode = listOfVehicleCode;
    }
    public List<VehicleCodeEntity> getListOfVehicleCode() {
        return this.listOfVehicleCode;
    }

    public void setListOfMileageApply( List<MileageApplyEntity> listOfMileageApply ) {
        this.listOfMileageApply = listOfMileageApply;
    }
    public List<MileageApplyEntity> getListOfMileageApply() {
        return this.listOfMileageApply;
    }

    public void setListOfTeamMember( List<TeamMemberEntity> listOfTeamMember ) {
        this.listOfTeamMember = listOfTeamMember;
    }
    public List<TeamMemberEntity> getListOfTeamMember() {
        return this.listOfTeamMember;
    }

    public void setListOfSupportBikeCenter( List<SupportBikeCenterEntity> listOfSupportBikeCenter ) {
        this.listOfSupportBikeCenter = listOfSupportBikeCenter;
    }
    public List<SupportBikeCenterEntity> getListOfSupportBikeCenter() {
        return this.listOfSupportBikeCenter;
    }

    public void setListOfReport( List<ReportEntity> listOfReport ) {
        this.listOfReport = listOfReport;
    }
    public List<ReportEntity> getListOfReport() {
        return this.listOfReport;
    }

    public void setListOfMileageHistory( List<MileageHistoryEntity> listOfMileageHistory ) {
        this.listOfMileageHistory = listOfMileageHistory;
    }
    public List<MileageHistoryEntity> getListOfMileageHistory() {
        return this.listOfMileageHistory;
    }

    public void setUserRole( UserRoleEntity userRole ) {
        this.userRole = userRole;
    }
    public UserRoleEntity getUserRole() {
        return this.userRole;
    }


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        sb.append(id);
        sb.append("]:"); 
        sb.append(username);
        sb.append("|");
        sb.append(status);
        sb.append("|");
        sb.append(password);
        sb.append("|");
        sb.append(passwordTemp);
        sb.append("|");
        sb.append(fullname);
        sb.append("|");
        sb.append(gender);
        sb.append("|");
        sb.append(dayOfBirth);
        sb.append("|");
        sb.append(phone);
        sb.append("|");
        sb.append(email);
        sb.append("|");
        sb.append(postcode);
        sb.append("|");
        sb.append(address);
        sb.append("|");
        sb.append(city);
        sb.append("|");
        sb.append(district);
        sb.append("|");
        sb.append(addressDetail);
        sb.append("|");
        sb.append(avatarName);
        sb.append("|");
        sb.append(avatarUrl);
        sb.append("|");
        sb.append(snsType);
        sb.append("|");
        sb.append(socialId);
        sb.append("|");
        sb.append(previousPoint);
        sb.append("|");
        sb.append(bikePoint);
        sb.append("|");
        sb.append(favouritePoint);
        sb.append("|");
        sb.append(transferPoint);
        sb.append("|");
        sb.append(memo);
        sb.append("|");
        sb.append(totalMileage);
        sb.append("|");
        sb.append(totalMileageOld);
        sb.append("|");
        sb.append(totalReduceCo2);
        sb.append("|");
        sb.append(totalReduceCo2Old);
        sb.append("|");
        sb.append(totalActive);
        sb.append("|");
        sb.append(totalActiveOld);
        sb.append("|");
        sb.append(leavingDate);
        sb.append("|");
        sb.append(totalGoalTree);
        sb.append("|");
        sb.append(leavingReason);
        sb.append("|");
        sb.append(isDelete);
        sb.append("|");
        sb.append(loginFirst);
        sb.append("|");
        sb.append(requestDate);
        sb.append("|");
        sb.append(certificateBikeType);
        sb.append("|");
        sb.append(certificateTranferType);
        sb.append("|");
        sb.append(certificateTranferWifi);
        sb.append("|");
        sb.append(createDate);
        sb.append("|");
        sb.append(updateDate);
        sb.append("|");
        sb.append(snsToken);
        return sb.toString(); 
    } 

}
