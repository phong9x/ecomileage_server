/*
 * Created on 1 thg 12 2017 ( Time 12:15:05 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a basic Primary Key (not composite) 

package org.ecomileage.bean.jpa;

import org.hibernate.annotations.DynamicInsert;
import org.hibernate.annotations.DynamicUpdate;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonIgnore;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

import java.util.Date;

import javax.persistence.*;

/**
 * Persistent class for entity stored in table "mileage_history"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name="mileage_history")
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="MileageHistoryEntity.countAll", query="SELECT COUNT(x) FROM MileageHistoryEntity x" )
} )
@DynamicInsert
@DynamicUpdate
public class MileageHistoryEntity implements Serializable {

    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
    @Id
    @GeneratedValue(strategy=GenerationType.AUTO)
    @Column(name="id", nullable=false)
    private Integer    id           ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    @Column(name="journey")
    private String     journey      ;

    @Column(name="mileage_favourite_id")
    private Integer    mileageFavouriteId ;

    @Column(name="total_mileage", nullable=false)
    private Float      totalMileage ;

    @Column(name="mileage_tranfer_id")
    private Integer    mileageTranferId ;

    @Column(name="total_reduce_CO2", nullable=false)
    private Float      totalReduceCo2 ;

    @Column(name="average_speed", nullable=false)
    private Float      averageSpeed ;

    @Column(name="max_speed", nullable=false)
    private Float      maxSpeed     ;

    @Column(name="lat_start", nullable=false)
    private Double     latStart     ;

    @Column(name="long_start", nullable=false)
    private Double     longStart    ;

    @Column(name="lat_end")
    private Double     latEnd       ;

    @Column(name="long_end", nullable=false)
    private Double     longEnd      ;

    @Column(name="calo", nullable=false)
    private Integer    calo         ;

    @Column(name="area", nullable=false, length=300)
    private String     area         ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="start_time")
    private Date       startTime    ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="end_time")
    private Date       endTime      ;

    @Column(name="point", nullable=false)
    private Float      point        ;

    @Column(name="favourite_point", nullable=false)
    private Integer    favouritePoint ;

    @Column(name="time", length=50)
    private String     time         ;

    @Column(name="subway_station_start", length=100)
    private String     subwayStationStart ;

    @Column(name="subway_station_finish", length=100)
    private String     subwayStationFinish ;

    @Column(name="subway_time_start", length=100)
    private String     subwayTimeStart ;

    @Column(name="subway_time_finish", length=100)
    private String     subwayTimeFinish ;

    @Column(name="status", nullable=false)
    private Short      status       ;

    @Column(name="type", nullable=false)
    private Short      type         ;

    @Column(name="type_certificate")
    private Short      typeCertificate ;

    @Column(name="is_favourite", nullable=false)
    private Boolean    isFavourite  ;

    @Column(name="is_delete", nullable=false)
    private Boolean    isDelete     ;

    @Column(name="reason", length=300)
    private String     reason       ;

    @Column(name="is_admin_approval")
    private Boolean    isAdminApproval ;

    @Column(name="register_again_reason", length=300)
    private String     registerAgainReason ;

    @Column(name="memo", nullable=false, length=500)
    private String     memo         ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="create_date")
    private Date       createDate   ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="update_date")
    private Date       updateDate   ;

    @Temporal(TemporalType.DATE)
    @Column(name="admin_approval_date")
    private Date       adminApprovalDate ;

    @Column(name="file_name", length=500)
    private String     fileName     ;

    @Column(name="file_url", length=500)
    private String     fileUrl      ;

	// "userId" (column "user_id") is not defined by itself because used as FK in a link 
	// "vehicleCodeId" (column "vehicle_code_id") is not defined by itself because used as FK in a link 


    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
    @ManyToOne
    @JoinColumn(name="user_id", referencedColumnName="id")
    private UserEntity user        ;

    @ManyToOne
    @JoinColumn(name="vehicle_code_id", referencedColumnName="id")
    private VehicleCodeEntity vehicleCode ;

    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public MileageHistoryEntity() {
		super();
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
    public void setId( Integer id ) {
        this.id = id ;
    }
    public Integer getId() {
        return this.id;
    }

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : journey ( TEXT ) 
    public void setJourney( String journey ) {
        this.journey = journey;
    }
    public String getJourney() {
        return this.journey;
    }

    //--- DATABASE MAPPING : mileage_favourite_id ( INT ) 
    public void setMileageFavouriteId( Integer mileageFavouriteId ) {
        this.mileageFavouriteId = mileageFavouriteId;
    }
    public Integer getMileageFavouriteId() {
        return this.mileageFavouriteId;
    }

    //--- DATABASE MAPPING : total_mileage ( FLOAT ) 
    public void setTotalMileage( Float totalMileage ) {
        this.totalMileage = totalMileage;
    }
    public Float getTotalMileage() {
        return this.totalMileage;
    }

    //--- DATABASE MAPPING : mileage_tranfer_id ( INT ) 
    public void setMileageTranferId( Integer mileageTranferId ) {
        this.mileageTranferId = mileageTranferId;
    }
    public Integer getMileageTranferId() {
        return this.mileageTranferId;
    }

    //--- DATABASE MAPPING : total_reduce_CO2 ( FLOAT ) 
    public void setTotalReduceCo2( Float totalReduceCo2 ) {
        this.totalReduceCo2 = totalReduceCo2;
    }
    public Float getTotalReduceCo2() {
        return this.totalReduceCo2;
    }

    //--- DATABASE MAPPING : average_speed ( FLOAT ) 
    public void setAverageSpeed( Float averageSpeed ) {
        this.averageSpeed = averageSpeed;
    }
    public Float getAverageSpeed() {
        return this.averageSpeed;
    }

    //--- DATABASE MAPPING : max_speed ( FLOAT ) 
    public void setMaxSpeed( Float maxSpeed ) {
        this.maxSpeed = maxSpeed;
    }
    public Float getMaxSpeed() {
        return this.maxSpeed;
    }

    //--- DATABASE MAPPING : lat_start ( DOUBLE ) 
    public void setLatStart( Double latStart ) {
        this.latStart = latStart;
    }
    public Double getLatStart() {
        return this.latStart;
    }

    //--- DATABASE MAPPING : long_start ( DOUBLE ) 
    public void setLongStart( Double longStart ) {
        this.longStart = longStart;
    }
    public Double getLongStart() {
        return this.longStart;
    }

    //--- DATABASE MAPPING : lat_end ( DOUBLE ) 
    public void setLatEnd( Double latEnd ) {
        this.latEnd = latEnd;
    }
    public Double getLatEnd() {
        return this.latEnd;
    }

    //--- DATABASE MAPPING : long_end ( DOUBLE ) 
    public void setLongEnd( Double longEnd ) {
        this.longEnd = longEnd;
    }
    public Double getLongEnd() {
        return this.longEnd;
    }

    //--- DATABASE MAPPING : calo ( INT ) 
    public void setCalo( Integer calo ) {
        this.calo = calo;
    }
    public Integer getCalo() {
        return this.calo;
    }

    //--- DATABASE MAPPING : area ( VARCHAR ) 
    public void setArea( String area ) {
        this.area = area;
    }
    public String getArea() {
        return this.area;
    }

    //--- DATABASE MAPPING : start_time ( DATETIME ) 
    public void setStartTime( Date startTime ) {
        this.startTime = startTime;
    }
    public Date getStartTime() {
        return this.startTime;
    }

    //--- DATABASE MAPPING : end_time ( DATETIME ) 
    public void setEndTime( Date endTime ) {
        this.endTime = endTime;
    }
    public Date getEndTime() {
        return this.endTime;
    }

    //--- DATABASE MAPPING : point ( FLOAT ) 
    public void setPoint( Float point ) {
        this.point = point;
    }
    public Float getPoint() {
        return this.point;
    }

    //--- DATABASE MAPPING : favourite_point ( INT ) 
    public void setFavouritePoint( Integer favouritePoint ) {
        this.favouritePoint = favouritePoint;
    }
    public Integer getFavouritePoint() {
        return this.favouritePoint;
    }

    //--- DATABASE MAPPING : time ( VARCHAR ) 
    public void setTime( String time ) {
        this.time = time;
    }
    public String getTime() {
        return this.time;
    }

    //--- DATABASE MAPPING : subway_station_start ( VARCHAR ) 
    public void setSubwayStationStart( String subwayStationStart ) {
        this.subwayStationStart = subwayStationStart;
    }
    public String getSubwayStationStart() {
        return this.subwayStationStart;
    }

    //--- DATABASE MAPPING : subway_station_finish ( VARCHAR ) 
    public void setSubwayStationFinish( String subwayStationFinish ) {
        this.subwayStationFinish = subwayStationFinish;
    }
    public String getSubwayStationFinish() {
        return this.subwayStationFinish;
    }

    //--- DATABASE MAPPING : subway_time_start ( VARCHAR ) 
    public void setSubwayTimeStart( String subwayTimeStart ) {
        this.subwayTimeStart = subwayTimeStart;
    }
    public String getSubwayTimeStart() {
        return this.subwayTimeStart;
    }

    //--- DATABASE MAPPING : subway_time_finish ( VARCHAR ) 
    public void setSubwayTimeFinish( String subwayTimeFinish ) {
        this.subwayTimeFinish = subwayTimeFinish;
    }
    public String getSubwayTimeFinish() {
        return this.subwayTimeFinish;
    }

    //--- DATABASE MAPPING : status ( SMALLINT ) 
    public void setStatus( Short status ) {
        this.status = status;
    }
    public Short getStatus() {
        return this.status;
    }

    //--- DATABASE MAPPING : type ( SMALLINT ) 
    public void setType( Short type ) {
        this.type = type;
    }
    public Short getType() {
        return this.type;
    }

    //--- DATABASE MAPPING : type_certificate ( SMALLINT ) 
    public void setTypeCertificate( Short typeCertificate ) {
        this.typeCertificate = typeCertificate;
    }
    public Short getTypeCertificate() {
        return this.typeCertificate;
    }

    //--- DATABASE MAPPING : is_favourite ( BIT ) 
    public void setIsFavourite( Boolean isFavourite ) {
        this.isFavourite = isFavourite;
    }
    public Boolean getIsFavourite() {
        return this.isFavourite;
    }

    //--- DATABASE MAPPING : is_delete ( BIT ) 
    public void setIsDelete( Boolean isDelete ) {
        this.isDelete = isDelete;
    }
    public Boolean getIsDelete() {
        return this.isDelete;
    }

    //--- DATABASE MAPPING : reason ( VARCHAR ) 
    public void setReason( String reason ) {
        this.reason = reason;
    }
    public String getReason() {
        return this.reason;
    }

    //--- DATABASE MAPPING : is_admin_approval ( BIT ) 
    public void setIsAdminApproval( Boolean isAdminApproval ) {
        this.isAdminApproval = isAdminApproval;
    }
    public Boolean getIsAdminApproval() {
        return this.isAdminApproval;
    }

    //--- DATABASE MAPPING : register_again_reason ( VARCHAR ) 
    public void setRegisterAgainReason( String registerAgainReason ) {
        this.registerAgainReason = registerAgainReason;
    }
    public String getRegisterAgainReason() {
        return this.registerAgainReason;
    }

    //--- DATABASE MAPPING : memo ( VARCHAR ) 
    public void setMemo( String memo ) {
        this.memo = memo;
    }
    public String getMemo() {
        return this.memo;
    }

    //--- DATABASE MAPPING : create_date ( DATETIME ) 
    public void setCreateDate( Date createDate ) {
        this.createDate = createDate;
    }
    public Date getCreateDate() {
        return this.createDate;
    }

    //--- DATABASE MAPPING : update_date ( DATETIME ) 
    public void setUpdateDate( Date updateDate ) {
        this.updateDate = updateDate;
    }
    public Date getUpdateDate() {
        return this.updateDate;
    }

    //--- DATABASE MAPPING : admin_approval_date ( DATE ) 
    public void setAdminApprovalDate( Date adminApprovalDate ) {
        this.adminApprovalDate = adminApprovalDate;
    }
    public Date getAdminApprovalDate() {
        return this.adminApprovalDate;
    }

    //--- DATABASE MAPPING : file_name ( VARCHAR ) 
    public void setFileName( String fileName ) {
        this.fileName = fileName;
    }
    public String getFileName() {
        return this.fileName;
    }

    //--- DATABASE MAPPING : file_url ( VARCHAR ) 
    public void setFileUrl( String fileUrl ) {
        this.fileUrl = fileUrl;
    }
    public String getFileUrl() {
        return this.fileUrl;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
    public void setUser( UserEntity user ) {
        this.user = user;
    }
    public UserEntity getUser() {
        return this.user;
    }

    public void setVehicleCode( VehicleCodeEntity vehicleCode ) {
        this.vehicleCode = vehicleCode;
    }
    public VehicleCodeEntity getVehicleCode() {
        return this.vehicleCode;
    }


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        sb.append(id);
        sb.append("]:"); 
        // attribute 'journey' not usable (type = String Long Text)
        sb.append(mileageFavouriteId);
        sb.append("|");
        sb.append(totalMileage);
        sb.append("|");
        sb.append(mileageTranferId);
        sb.append("|");
        sb.append(totalReduceCo2);
        sb.append("|");
        sb.append(averageSpeed);
        sb.append("|");
        sb.append(maxSpeed);
        sb.append("|");
        sb.append(latStart);
        sb.append("|");
        sb.append(longStart);
        sb.append("|");
        sb.append(latEnd);
        sb.append("|");
        sb.append(longEnd);
        sb.append("|");
        sb.append(calo);
        sb.append("|");
        sb.append(area);
        sb.append("|");
        sb.append(startTime);
        sb.append("|");
        sb.append(endTime);
        sb.append("|");
        sb.append(point);
        sb.append("|");
        sb.append(favouritePoint);
        sb.append("|");
        sb.append(time);
        sb.append("|");
        sb.append(subwayStationStart);
        sb.append("|");
        sb.append(subwayStationFinish);
        sb.append("|");
        sb.append(subwayTimeStart);
        sb.append("|");
        sb.append(subwayTimeFinish);
        sb.append("|");
        sb.append(status);
        sb.append("|");
        sb.append(type);
        sb.append("|");
        sb.append(typeCertificate);
        sb.append("|");
        sb.append(isFavourite);
        sb.append("|");
        sb.append(isDelete);
        sb.append("|");
        sb.append(reason);
        sb.append("|");
        sb.append(isAdminApproval);
        sb.append("|");
        sb.append(registerAgainReason);
        sb.append("|");
        sb.append(memo);
        sb.append("|");
        sb.append(createDate);
        sb.append("|");
        sb.append(updateDate);
        sb.append("|");
        sb.append(adminApprovalDate);
        sb.append("|");
        sb.append(fileName);
        sb.append("|");
        sb.append(fileUrl);
        return sb.toString(); 
    } 

}
