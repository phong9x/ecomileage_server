/*
 * Created on 7 thg 12 2017 ( Time 17:30:58 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.ecomileage.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.ecomileage.bean.Payment;
import org.ecomileage.bean.jpa.PaymentEntity;
import org.ecomileage.bean.jpa.UserEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class PaymentServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public PaymentServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'PaymentEntity' to 'Payment'
	 * @param paymentEntity
	 */
	public Payment mapPaymentEntityToPayment(PaymentEntity paymentEntity) {
		if(paymentEntity == null) {
			return null;
		}

		//--- Generic mapping 
		Payment payment = map(paymentEntity, Payment.class);

		//--- Link mapping ( link to User )
		if(paymentEntity.getUser() != null) {
			payment.setUserId(paymentEntity.getUser().getId());
		}
		return payment;
	}
	
	/**
	 * Mapping from 'Payment' to 'PaymentEntity'
	 * @param payment
	 * @param paymentEntity
	 */
	public void mapPaymentToPaymentEntity(Payment payment, PaymentEntity paymentEntity) {
		if(payment == null) {
			return;
		}

		//--- Generic mapping 
		map(payment, paymentEntity);

		//--- Link mapping ( link : payment )
		if( hasLinkToUser(payment) ) {
			UserEntity user1 = new UserEntity();
			user1.setId( payment.getUserId() );
			paymentEntity.setUser( user1 );
		} else {
			paymentEntity.setUser( null );
		}

	}
	
	/**
	 * Verify that User id is valid.
	 * @param User User
	 * @return boolean
	 */
	private boolean hasLinkToUser(Payment payment) {
		if(payment.getUserId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}