/*
 * Created on 9 thg 11 2017 ( Time 10:26:48 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.ecomileage.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.ecomileage.bean.Sponsor;
import org.ecomileage.bean.jpa.SponsorEntity;
import org.ecomileage.bean.jpa.CategoryEntity;
import org.ecomileage.bean.jpa.CategoryEntity;
import org.ecomileage.bean.jpa.CategoryEntity;
import org.ecomileage.bean.jpa.UserEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class SponsorServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public SponsorServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'SponsorEntity' to 'Sponsor'
	 * @param sponsorEntity
	 */
	public Sponsor mapSponsorEntityToSponsor(SponsorEntity sponsorEntity) {
		if(sponsorEntity == null) {
			return null;
		}

		//--- Generic mapping 
		Sponsor sponsor = map(sponsorEntity, Sponsor.class);

		//--- Link mapping ( link to Category )
		if(sponsorEntity.getCategory2() != null) {
			sponsor.setMembershipFeeId(sponsorEntity.getCategory2().getId());
		}
		//--- Link mapping ( link to Category )
		if(sponsorEntity.getCategory() != null) {
			sponsor.setMembershipFeeTypeId(sponsorEntity.getCategory().getId());
		}
		//--- Link mapping ( link to Category )
		if(sponsorEntity.getCategory3() != null) {
			sponsor.setBankId(sponsorEntity.getCategory3().getId());
		}
		//--- Link mapping ( link to User )
		if(sponsorEntity.getUser() != null) {
			sponsor.setUserId(sponsorEntity.getUser().getId());
		}
		return sponsor;
	}
	
	/**
	 * Mapping from 'Sponsor' to 'SponsorEntity'
	 * @param sponsor
	 * @param sponsorEntity
	 */
	public void mapSponsorToSponsorEntity(Sponsor sponsor, SponsorEntity sponsorEntity) {
		if(sponsor == null) {
			return;
		}

		//--- Generic mapping 
		map(sponsor, sponsorEntity);

		//--- Link mapping ( link : sponsor )
		if( hasLinkToCategory(sponsor) ) {
			CategoryEntity category1 = new CategoryEntity();
			category1.setId( sponsor.getMembershipFeeId() );
			sponsorEntity.setCategory2( category1 );
		} else {
			sponsorEntity.setCategory2( null );
		}

		//--- Link mapping ( link : sponsor )
		if( hasLinkToCategory2(sponsor) ) {
			CategoryEntity category2 = new CategoryEntity();
			category2.setId( sponsor.getMembershipFeeTypeId() );
			sponsorEntity.setCategory( category2 );
		} else {
			sponsorEntity.setCategory( null );
		}

		//--- Link mapping ( link : sponsor )
		if( hasLinkToCategory3(sponsor) ) {
			CategoryEntity category3 = new CategoryEntity();
			category3.setId( sponsor.getBankId() );
			sponsorEntity.setCategory3( category3 );
		} else {
			sponsorEntity.setCategory3( null );
		}

		//--- Link mapping ( link : sponsor )
		if( hasLinkToUser(sponsor) ) {
			UserEntity user4 = new UserEntity();
			user4.setId( sponsor.getUserId() );
			sponsorEntity.setUser( user4 );
		} else {
			sponsorEntity.setUser( null );
		}

	}
	
	/**
	 * Verify that Category id is valid.
	 * @param Category Category
	 * @return boolean
	 */
	private boolean hasLinkToCategory(Sponsor sponsor) {
		if(sponsor.getMembershipFeeId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that Category id is valid.
	 * @param Category Category
	 * @return boolean
	 */
	private boolean hasLinkToCategory2(Sponsor sponsor) {
		if(sponsor.getMembershipFeeTypeId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that Category id is valid.
	 * @param Category Category
	 * @return boolean
	 */
	private boolean hasLinkToCategory3(Sponsor sponsor) {
		if(sponsor.getBankId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that User id is valid.
	 * @param User User
	 * @return boolean
	 */
	private boolean hasLinkToUser(Sponsor sponsor) {
		if(sponsor.getUserId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}