/*
 * Created on 15 thg 11 2017 ( Time 09:07:33 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.ecomileage.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.ecomileage.bean.MileageBackup;
import org.ecomileage.bean.jpa.MileageBackupEntity;
import org.ecomileage.bean.jpa.UserEntity;
import org.ecomileage.bean.jpa.UserEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class MileageBackupServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public MileageBackupServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'MileageBackupEntity' to 'MileageBackup'
	 * @param mileageBackupEntity
	 */
	public MileageBackup mapMileageBackupEntityToMileageBackup(MileageBackupEntity mileageBackupEntity) {
		if(mileageBackupEntity == null) {
			return null;
		}

		//--- Generic mapping 
		MileageBackup mileageBackup = map(mileageBackupEntity, MileageBackup.class);

		//--- Link mapping ( link to User )
		if(mileageBackupEntity.getUser2() != null) {
			mileageBackup.setSenderId(mileageBackupEntity.getUser2().getId());
		}
		//--- Link mapping ( link to User )
		if(mileageBackupEntity.getUser() != null) {
			mileageBackup.setReceiverId(mileageBackupEntity.getUser().getId());
		}
		return mileageBackup;
	}
	
	/**
	 * Mapping from 'MileageBackup' to 'MileageBackupEntity'
	 * @param mileageBackup
	 * @param mileageBackupEntity
	 */
	public void mapMileageBackupToMileageBackupEntity(MileageBackup mileageBackup, MileageBackupEntity mileageBackupEntity) {
		if(mileageBackup == null) {
			return;
		}

		//--- Generic mapping 
		map(mileageBackup, mileageBackupEntity);

		//--- Link mapping ( link : mileageBackup )
		if( hasLinkToUser1(mileageBackup) ) {
			UserEntity user1 = new UserEntity();
			user1.setId( mileageBackup.getSenderId() );
			mileageBackupEntity.setUser2( user1 );
		} else {
			mileageBackupEntity.setUser2( null );
		}

		//--- Link mapping ( link : mileageBackup )
		if( hasLinkToUser2(mileageBackup) ) {
			UserEntity user2 = new UserEntity();
			user2.setId( mileageBackup.getReceiverId() );
			mileageBackupEntity.setUser( user2 );
		} else {
			mileageBackupEntity.setUser( null );
		}

	}
	
	/**
	 * Verify that User id is valid.
	 * @param User User
	 * @return boolean
	 */
	private boolean hasLinkToUser1(MileageBackup mileageBackup) {
		if(mileageBackup.getSenderId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that User id is valid.
	 * @param User User
	 * @return boolean
	 */
	private boolean hasLinkToUser2(MileageBackup mileageBackup) {
		if(mileageBackup.getReceiverId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}