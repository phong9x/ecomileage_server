/*
 * Created on 8 thg 12 2017 ( Time 14:25:17 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.ecomileage.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.ecomileage.bean.Report;
import org.ecomileage.bean.jpa.ReportEntity;
import org.ecomileage.bean.jpa.UserEntity;
import org.ecomileage.bean.jpa.CategoryEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class ReportServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public ReportServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'ReportEntity' to 'Report'
	 * @param reportEntity
	 */
	public Report mapReportEntityToReport(ReportEntity reportEntity) {
		if(reportEntity == null) {
			return null;
		}

		//--- Generic mapping 
		Report report = map(reportEntity, Report.class);

		//--- Link mapping ( link to User )
		if(reportEntity.getUser() != null) {
			report.setUserId(reportEntity.getUser().getId());
		}
		//--- Link mapping ( link to Category )
		if(reportEntity.getCategory() != null) {
			report.setCategoryId(reportEntity.getCategory().getId());
		}
		return report;
	}
	
	/**
	 * Mapping from 'Report' to 'ReportEntity'
	 * @param report
	 * @param reportEntity
	 */
	public void mapReportToReportEntity(Report report, ReportEntity reportEntity) {
		if(report == null) {
			return;
		}

		//--- Generic mapping 
		map(report, reportEntity);

		//--- Link mapping ( link : report )
		if( hasLinkToUser(report) ) {
			UserEntity user1 = new UserEntity();
			user1.setId( report.getUserId() );
			reportEntity.setUser( user1 );
		} else {
			reportEntity.setUser( null );
		}

		//--- Link mapping ( link : report )
		if( hasLinkToCategory(report) ) {
			CategoryEntity category2 = new CategoryEntity();
			category2.setId( report.getCategoryId() );
			reportEntity.setCategory( category2 );
		} else {
			reportEntity.setCategory( null );
		}

	}
	
	/**
	 * Verify that User id is valid.
	 * @param User User
	 * @return boolean
	 */
	private boolean hasLinkToUser(Report report) {
		if(report.getUserId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that Category id is valid.
	 * @param Category Category
	 * @return boolean
	 */
	private boolean hasLinkToCategory(Report report) {
		if(report.getCategoryId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}