/*
 * Created on 2 thg 10 2017 ( Time 15:10:01 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.ecomileage.business.service.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.annotation.Resource;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import org.springframework.data.jpa.domain.Specification;

import org.ecomileage.bean.SupportBikeCenter;
import org.ecomileage.bean.jpa.SupportBikeCenterEntity;
import java.util.Date;
import org.ecomileage.business.service.SupportBikeCenterService;
import org.ecomileage.business.service.mapping.SupportBikeCenterServiceMapper;
import org.ecomileage.data.repository.jpa.SupportBikeCenterJpaRepository;
import org.ecomileage.web.common.utils.DataUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
/**
 * Implementation of SupportBikeCenterService
 */
@Component
@Transactional
public class SupportBikeCenterServiceImpl implements SupportBikeCenterService {

	@Resource
	private SupportBikeCenterJpaRepository supportBikeCenterJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private SupportBikeCenterServiceMapper supportBikeCenterServiceMapper;
	
	@Override
	public SupportBikeCenter findById(Integer id) {
		SupportBikeCenterEntity supportBikeCenterEntity = supportBikeCenterJpaRepository.findOne(id);
		return supportBikeCenterServiceMapper.mapSupportBikeCenterEntityToSupportBikeCenter(supportBikeCenterEntity);
	}

	@Override
	public SupportBikeCenterEntity findOne(Integer id) {
		SupportBikeCenterEntity supportBikeCenterEntity = supportBikeCenterJpaRepository.findOne(id);
		return supportBikeCenterEntity;
	}

	@Override
	public Page<SupportBikeCenterEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return supportBikeCenterJpaRepository.findAll(request);
	}

	@Override
	public List<SupportBikeCenter> findAll() {
		Iterable<SupportBikeCenterEntity> entities = supportBikeCenterJpaRepository.findAll();
		List<SupportBikeCenter> beans = new ArrayList<SupportBikeCenter>();
		for(SupportBikeCenterEntity supportBikeCenterEntity : entities) {
			beans.add(supportBikeCenterServiceMapper.mapSupportBikeCenterEntityToSupportBikeCenter(supportBikeCenterEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = supportBikeCenterJpaRepository.count();
		return count;
	}

	@Override
	public SupportBikeCenter save(SupportBikeCenter supportBikeCenter) {
		return update(supportBikeCenter) ;
	}

	@Override
	public SupportBikeCenter create(SupportBikeCenter supportBikeCenter) {
/*
		SupportBikeCenterEntity supportBikeCenterEntity = supportBikeCenterJpaRepository.findOne(supportBikeCenter.getId());
		if( supportBikeCenterEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		supportBikeCenterEntity = new SupportBikeCenterEntity();
		supportBikeCenterServiceMapper.mapSupportBikeCenterToSupportBikeCenterEntity(supportBikeCenter, supportBikeCenterEntity);
		SupportBikeCenterEntity supportBikeCenterEntitySaved = supportBikeCenterJpaRepository.save(supportBikeCenterEntity);
		return supportBikeCenterServiceMapper.mapSupportBikeCenterEntityToSupportBikeCenter(supportBikeCenterEntitySaved);
*/
		SupportBikeCenterEntity supportBikeCenterEntity = new SupportBikeCenterEntity();
		supportBikeCenterServiceMapper.mapSupportBikeCenterToSupportBikeCenterEntity(supportBikeCenter, supportBikeCenterEntity);
		SupportBikeCenterEntity supportBikeCenterEntitySaved = supportBikeCenterJpaRepository.save(supportBikeCenterEntity);
		return supportBikeCenterServiceMapper.mapSupportBikeCenterEntityToSupportBikeCenter(supportBikeCenterEntitySaved);
	}

	@Override
	public SupportBikeCenter update(SupportBikeCenter supportBikeCenter) {
		SupportBikeCenterEntity supportBikeCenterEntity = supportBikeCenterJpaRepository.findOne(supportBikeCenter.getId());
		supportBikeCenterServiceMapper.mapSupportBikeCenterToSupportBikeCenterEntity(supportBikeCenter, supportBikeCenterEntity);
		SupportBikeCenterEntity supportBikeCenterEntitySaved = supportBikeCenterJpaRepository.save(supportBikeCenterEntity);
		return supportBikeCenterServiceMapper.mapSupportBikeCenterEntityToSupportBikeCenter(supportBikeCenterEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		supportBikeCenterJpaRepository.delete(id);
	}

	public SupportBikeCenterJpaRepository getSupportBikeCenterJpaRepository() {
		return supportBikeCenterJpaRepository;
	}

	public void setSupportBikeCenterJpaRepository(SupportBikeCenterJpaRepository supportBikeCenterJpaRepository) {
		this.supportBikeCenterJpaRepository = supportBikeCenterJpaRepository;
	}

	public SupportBikeCenterServiceMapper getSupportBikeCenterServiceMapper() {
		return supportBikeCenterServiceMapper;
	}

	public void setSupportBikeCenterServiceMapper(SupportBikeCenterServiceMapper supportBikeCenterServiceMapper) {
		this.supportBikeCenterServiceMapper = supportBikeCenterServiceMapper;
	}

	@Override
	public Page<SupportBikeCenterEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return supportBikeCenterJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	



	@Override
	public Page<SupportBikeCenterEntity> filterAdmin( Map<String, Object> params, Integer page, Integer size) {

		Specification<SupportBikeCenterEntity> spec = new Specification<SupportBikeCenterEntity>() {
			@Override
			public Predicate toPredicate(Root<SupportBikeCenterEntity> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
				List<Predicate> predicates = new ArrayList<>();

				if(params.get("startTime") != null && params.get("startTime") != ""){
					String startTime = String.valueOf(params.get("startTime"));
					Predicate predicate = cb.equal(root.<Date>get("createDate"),DataUtils.parseDate(startTime, DataUtils.FormatDate.YYYYMMDD.getPattern()));
					predicates.add(predicate);
				}
				
				if(params.get("endTime") != null && params.get("endTime") != ""){
					String endTime = String.valueOf(params.get("endTime"));
					Predicate predicate = cb.equal(root.<Date>get("createDate"),DataUtils.parseDate(endTime, DataUtils.FormatDate.YYYYMMDD.getPattern()));
					predicates.add(predicate);
				}
				
				if(params.get("type") != null && params.get("type") != ""){
					Short type = Short.valueOf(String.valueOf(params.get("type")));
					Predicate predicate = cb.equal(root.get("type"),type);
					predicates.add(predicate);
				}
				
				if(params.get("fullnameOrUsername") != null && params.get("fullnameOrUsername")!=""){
					String fullnameOrUsername = String.valueOf(params.get("fullnameOrUsername"));
					Predicate predicate = cb.or(cb.like(root.get("user").get("fullname"), "%"+fullnameOrUsername +"%"), cb.like(root.get("user").get("username"), "%"+fullnameOrUsername+"%"));
					predicates.add(predicate);
				}
				
				if(params.get("city") != null && params.get("city") != ""){
					String city = String.valueOf(params.get("city"));
					Predicate predicate = cb.like(root.get("city"),"%"+city+"%");
					predicates.add(predicate);
				}
				
				if(params.get("district") != null && params.get("district") != ""){
					String district = String.valueOf(params.get("district"));
					Predicate predicate = cb.like(root.get("district"),"%"+district+"%");
					predicates.add(predicate);
				}
				return cb.and(predicates.toArray(new Predicate[] {}));
			}

		};

		Order orderCreateDate = new Order(Direction.DESC, "createDate");
		Order orderId = new Order(Direction.DESC, "id");
		if (params.get("orderBy") != null) {
			String orderBy = String.valueOf(params.get("orderBy"));
			orderCreateDate = new Order(Direction.DESC, orderBy);
		}

		PageRequest pageable = new PageRequest(page - 1, size, new Sort(orderCreateDate,orderId));
		return supportBikeCenterJpaRepository.findAll(spec, pageable);
	}

}
