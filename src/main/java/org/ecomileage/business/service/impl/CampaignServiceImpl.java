/*
 * Created on 14 thg 10 2017 ( Time 19:02:43 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.ecomileage.business.service.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.annotation.Resource;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import org.springframework.data.jpa.domain.Specification;

import org.ecomileage.bean.Campaign;
import org.ecomileage.bean.jpa.CampaignEntity;
import org.ecomileage.business.service.CampaignService;
import org.ecomileage.business.service.mapping.CampaignServiceMapper;
import org.ecomileage.data.repository.jpa.CampaignJpaRepository;
import org.ecomileage.web.common.utils.DataUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
/**
 * Implementation of CampaignService
 */
@Component
@Transactional
public class CampaignServiceImpl implements CampaignService {

	@Resource
	private CampaignJpaRepository campaignJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private CampaignServiceMapper campaignServiceMapper;
	
	@Override
	public Campaign findById(Integer id) {
		CampaignEntity campaignEntity = campaignJpaRepository.findOne(id);
		return campaignServiceMapper.mapCampaignEntityToCampaign(campaignEntity);
	}

	@Override
	public CampaignEntity findOne(Integer id) {
		CampaignEntity campaignEntity = campaignJpaRepository.findOne(id);
		return campaignEntity;
	}

	@Override
	public Page<CampaignEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return campaignJpaRepository.findAll(request);
	}

	@Override
	public List<Campaign> findAll() {
		Iterable<CampaignEntity> entities = campaignJpaRepository.findAll();
		List<Campaign> beans = new ArrayList<Campaign>();
		for(CampaignEntity campaignEntity : entities) {
			beans.add(campaignServiceMapper.mapCampaignEntityToCampaign(campaignEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = campaignJpaRepository.count();
		return count;
	}

	@Override
	public Campaign save(Campaign campaign) {
		return update(campaign) ;
	}

	@Override
	public Campaign create(Campaign campaign) {
/*
		CampaignEntity campaignEntity = campaignJpaRepository.findOne(campaign.getId());
		if( campaignEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		campaignEntity = new CampaignEntity();
		campaignServiceMapper.mapCampaignToCampaignEntity(campaign, campaignEntity);
		CampaignEntity campaignEntitySaved = campaignJpaRepository.save(campaignEntity);
		return campaignServiceMapper.mapCampaignEntityToCampaign(campaignEntitySaved);
*/
		CampaignEntity campaignEntity = new CampaignEntity();
		campaignServiceMapper.mapCampaignToCampaignEntity(campaign, campaignEntity);
		CampaignEntity campaignEntitySaved = campaignJpaRepository.save(campaignEntity);
		return campaignServiceMapper.mapCampaignEntityToCampaign(campaignEntitySaved);
	}

	@Override
	public Campaign update(Campaign campaign) {
		CampaignEntity campaignEntity = campaignJpaRepository.findOne(campaign.getId());
		campaignServiceMapper.mapCampaignToCampaignEntity(campaign, campaignEntity);
		CampaignEntity campaignEntitySaved = campaignJpaRepository.save(campaignEntity);
		return campaignServiceMapper.mapCampaignEntityToCampaign(campaignEntitySaved);
	}
	
	@Override
	public Campaign update(CampaignEntity campaign) {
		CampaignEntity campaignEntitySaved = campaignJpaRepository.save(campaign);
		return campaignServiceMapper.mapCampaignEntityToCampaign(campaignEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		campaignJpaRepository.delete(id);
	}

	public CampaignJpaRepository getCampaignJpaRepository() {
		return campaignJpaRepository;
	}

	public void setCampaignJpaRepository(CampaignJpaRepository campaignJpaRepository) {
		this.campaignJpaRepository = campaignJpaRepository;
	}

	public CampaignServiceMapper getCampaignServiceMapper() {
		return campaignServiceMapper;
	}

	public void setCampaignServiceMapper(CampaignServiceMapper campaignServiceMapper) {
		this.campaignServiceMapper = campaignServiceMapper;
	}

	@Override
	public Page<CampaignEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return campaignJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Page<CampaignEntity> filterAdmin( Map<String, Object> params, Integer page, Integer size) {

		Specification<CampaignEntity> spec = new Specification<CampaignEntity>() {
			@Override
			public Predicate toPredicate(Root<CampaignEntity> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
				List<Predicate> predicates = new ArrayList<>();


				return cb.and(predicates.toArray(new Predicate[] {}));
			}

		};

		Order order = new Order(Direction.DESC, "createDate");
		if (params.get("orderBy") != null) {
			String orderBy = String.valueOf(params.get("orderBy"));
			order = new Order(Direction.DESC, orderBy);
		}

		PageRequest pageable = new PageRequest(page - 1, size, new Sort(order));
		return campaignJpaRepository.findAll(spec, pageable);
	}

	@Override
	public CampaignEntity findByYear(Integer year) {
		try {
			return campaignJpaRepository.findByYear(year);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

}
