/*
 * Created on 2 thg 10 2017 ( Time 15:10:02 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.ecomileage.business.service.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.annotation.Resource;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import org.springframework.data.jpa.domain.Specification;

import org.ecomileage.bean.UserRole;
import org.ecomileage.bean.jpa.UserRoleEntity;
import java.util.List;
import org.ecomileage.business.service.UserRoleService;
import org.ecomileage.business.service.mapping.UserRoleServiceMapper;
import org.ecomileage.data.repository.jpa.UserRoleJpaRepository;
import org.ecomileage.web.common.utils.DataUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
/**
 * Implementation of UserRoleService
 */
@Component
@Transactional
public class UserRoleServiceImpl implements UserRoleService {

	@Resource
	private UserRoleJpaRepository userRoleJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private UserRoleServiceMapper userRoleServiceMapper;
	
	@Override
	public UserRole findById(Integer id) {
		UserRoleEntity userRoleEntity = userRoleJpaRepository.findOne(id);
		return userRoleServiceMapper.mapUserRoleEntityToUserRole(userRoleEntity);
	}

	@Override
	public UserRoleEntity findOne(Integer id) {
		UserRoleEntity userRoleEntity = userRoleJpaRepository.findOne(id);
		return userRoleEntity;
	}

	@Override
	public Page<UserRoleEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return userRoleJpaRepository.findAll(request);
	}

	@Override
	public List<UserRole> findAll() {
		Iterable<UserRoleEntity> entities = userRoleJpaRepository.findAll();
		List<UserRole> beans = new ArrayList<UserRole>();
		for(UserRoleEntity userRoleEntity : entities) {
			beans.add(userRoleServiceMapper.mapUserRoleEntityToUserRole(userRoleEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = userRoleJpaRepository.count();
		return count;
	}

	@Override
	public UserRole save(UserRole userRole) {
		return update(userRole) ;
	}

	@Override
	public UserRole create(UserRole userRole) {
/*
		UserRoleEntity userRoleEntity = userRoleJpaRepository.findOne(userRole.getId());
		if( userRoleEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		userRoleEntity = new UserRoleEntity();
		userRoleServiceMapper.mapUserRoleToUserRoleEntity(userRole, userRoleEntity);
		UserRoleEntity userRoleEntitySaved = userRoleJpaRepository.save(userRoleEntity);
		return userRoleServiceMapper.mapUserRoleEntityToUserRole(userRoleEntitySaved);
*/
		UserRoleEntity userRoleEntity = new UserRoleEntity();
		userRoleServiceMapper.mapUserRoleToUserRoleEntity(userRole, userRoleEntity);
		UserRoleEntity userRoleEntitySaved = userRoleJpaRepository.save(userRoleEntity);
		return userRoleServiceMapper.mapUserRoleEntityToUserRole(userRoleEntitySaved);
	}

	@Override
	public UserRole update(UserRole userRole) {
		UserRoleEntity userRoleEntity = userRoleJpaRepository.findOne(userRole.getId());
		userRoleServiceMapper.mapUserRoleToUserRoleEntity(userRole, userRoleEntity);
		UserRoleEntity userRoleEntitySaved = userRoleJpaRepository.save(userRoleEntity);
		return userRoleServiceMapper.mapUserRoleEntityToUserRole(userRoleEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		userRoleJpaRepository.delete(id);
	}

	public UserRoleJpaRepository getUserRoleJpaRepository() {
		return userRoleJpaRepository;
	}

	public void setUserRoleJpaRepository(UserRoleJpaRepository userRoleJpaRepository) {
		this.userRoleJpaRepository = userRoleJpaRepository;
	}

	public UserRoleServiceMapper getUserRoleServiceMapper() {
		return userRoleServiceMapper;
	}

	public void setUserRoleServiceMapper(UserRoleServiceMapper userRoleServiceMapper) {
		this.userRoleServiceMapper = userRoleServiceMapper;
	}

	@Override
	public Page<UserRoleEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return userRoleJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	



	@Override
	public Page<UserRoleEntity> filterAdmin( Map<String, Object> params, Integer page, Integer size) {

		Specification<UserRoleEntity> spec = new Specification<UserRoleEntity>() {
			@Override
			public Predicate toPredicate(Root<UserRoleEntity> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
				List<Predicate> predicates = new ArrayList<>();

				if (params.get("key") != null) {
				String key = String.valueOf(params.get("key"));
					if (params.get("type") != null) {
						String type = String.valueOf(params.get("type"));
						Predicate predicate = cb.equal(root.get(type), "%"+key+"%");
						predicates.add(predicate);
					}
				}

				return cb.and(predicates.toArray(new Predicate[] {}));
			}

		};

		Order order = new Order(Direction.DESC, "createDate");
		if (params.get("orderBy") != null) {
			String orderBy = String.valueOf(params.get("orderBy"));
			order = new Order(Direction.DESC, orderBy);
		}

		PageRequest pageable = new PageRequest(page - 1, size, new Sort(order));
		return userRoleJpaRepository.findAll(spec, pageable);
	}

}
