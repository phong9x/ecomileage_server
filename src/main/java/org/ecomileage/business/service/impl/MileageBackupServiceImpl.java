/*
 * Created on 2 thg 10 2017 ( Time 15:10:01 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.ecomileage.business.service.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.annotation.Resource;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import org.springframework.data.jpa.domain.Specification;

import org.ecomileage.bean.MileageBackup;
import org.ecomileage.bean.jpa.MileageBackupEntity;
import java.util.Date;
import org.ecomileage.business.service.MileageBackupService;
import org.ecomileage.business.service.mapping.MileageBackupServiceMapper;
import org.ecomileage.data.repository.jpa.MileageBackupJpaRepository;
import org.ecomileage.web.common.utils.ConstantCommon;
import org.ecomileage.web.common.utils.DataUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
/**
 * Implementation of MileageBackupService
 */
@Component
@Transactional
public class MileageBackupServiceImpl implements MileageBackupService {

	@Resource
	private MileageBackupJpaRepository mileageBackupJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private MileageBackupServiceMapper mileageBackupServiceMapper;
	
	@Override
	public MileageBackup findById(Integer id) {
		MileageBackupEntity mileageBackupEntity = mileageBackupJpaRepository.findOne(id);
		return mileageBackupServiceMapper.mapMileageBackupEntityToMileageBackup(mileageBackupEntity);
	}

	@Override
	public MileageBackupEntity findOne(Integer id) {
		MileageBackupEntity mileageBackupEntity = mileageBackupJpaRepository.findOne(id);
		return mileageBackupEntity;
	}

	@Override
	public Page<MileageBackupEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return mileageBackupJpaRepository.findAll(request);
	}

	@Override
	public List<MileageBackup> findAll() {
		Iterable<MileageBackupEntity> entities = mileageBackupJpaRepository.findAll();
		List<MileageBackup> beans = new ArrayList<MileageBackup>();
		for(MileageBackupEntity mileageBackupEntity : entities) {
			beans.add(mileageBackupServiceMapper.mapMileageBackupEntityToMileageBackup(mileageBackupEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = mileageBackupJpaRepository.count();
		return count;
	}

	@Override
	public MileageBackup save(MileageBackup mileageBackup) {
		return update(mileageBackup) ;
	}

	@Override
	public MileageBackup create(MileageBackup mileageBackup) {
/*
		MileageBackupEntity mileageBackupEntity = mileageBackupJpaRepository.findOne(mileageBackup.getId());
		if( mileageBackupEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		mileageBackupEntity = new MileageBackupEntity();
		mileageBackupServiceMapper.mapMileageBackupToMileageBackupEntity(mileageBackup, mileageBackupEntity);
		MileageBackupEntity mileageBackupEntitySaved = mileageBackupJpaRepository.save(mileageBackupEntity);
		return mileageBackupServiceMapper.mapMileageBackupEntityToMileageBackup(mileageBackupEntitySaved);
*/
		MileageBackupEntity mileageBackupEntity = new MileageBackupEntity();
		mileageBackupServiceMapper.mapMileageBackupToMileageBackupEntity(mileageBackup, mileageBackupEntity);
		MileageBackupEntity mileageBackupEntitySaved = mileageBackupJpaRepository.save(mileageBackupEntity);
		return mileageBackupServiceMapper.mapMileageBackupEntityToMileageBackup(mileageBackupEntitySaved);
	}

	@Override
	public MileageBackup update(MileageBackup mileageBackup) {
		MileageBackupEntity mileageBackupEntity = mileageBackupJpaRepository.findOne(mileageBackup.getId());
		mileageBackupServiceMapper.mapMileageBackupToMileageBackupEntity(mileageBackup, mileageBackupEntity);
		MileageBackupEntity mileageBackupEntitySaved = mileageBackupJpaRepository.save(mileageBackupEntity);
		return mileageBackupServiceMapper.mapMileageBackupEntityToMileageBackup(mileageBackupEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		mileageBackupJpaRepository.delete(id);
	}

	public MileageBackupJpaRepository getMileageBackupJpaRepository() {
		return mileageBackupJpaRepository;
	}

	public void setMileageBackupJpaRepository(MileageBackupJpaRepository mileageBackupJpaRepository) {
		this.mileageBackupJpaRepository = mileageBackupJpaRepository;
	}

	public MileageBackupServiceMapper getMileageBackupServiceMapper() {
		return mileageBackupServiceMapper;
	}

	public void setMileageBackupServiceMapper(MileageBackupServiceMapper mileageBackupServiceMapper) {
		this.mileageBackupServiceMapper = mileageBackupServiceMapper;
	}

	@Override
	public Page<MileageBackupEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return mileageBackupJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	



	@Override
	public Page<MileageBackupEntity> filterAdmin( Map<String, Object> params, Integer page, Integer size) {

		Specification<MileageBackupEntity> spec = new Specification<MileageBackupEntity>() {
			@Override
			public Predicate toPredicate(Root<MileageBackupEntity> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
				List<Predicate> predicates = new ArrayList<>();


				if(params.get("startTime") != null){
					String startTime = String.valueOf(params.get("startTime"));
					Predicate predicate = cb.equal(root.<Date>get("createDate"),DataUtils.parseDate(startTime, DataUtils.FormatDate.YYYYMMDD.getPattern()));
					predicates.add(predicate);
				}
				
				if(params.get("endTime") != null){
					String endTime = String.valueOf(params.get("endTime"));
					Predicate predicate = cb.equal(root.<Date>get("createDate"),DataUtils.parseDate(endTime, DataUtils.FormatDate.YYYYMMDD.getPattern()));
					predicates.add(predicate);
				}

				if (params.get("fullnameOrUsername") != null) {
					String key = String.valueOf(params.get("fullnameOrUsername"));
					Predicate predicate =cb.or(cb.like(root.get("user").get("fullname"), "%"+key+"%"), cb.like(root.get("user").get("username"), "%"+key+"%")) ;
					predicates.add(predicate);
				}
				
				if (params.get("staus") != null && params.get("staus") != "") {
					String staus = String.valueOf(params.get("staus"));
					Predicate predicate = cb.equal(root.<Integer>get("staus"), staus);
					predicates.add(predicate);
				}
				
				return cb.and(predicates.toArray(new Predicate[] {}));
			}

		};

		Order order = new Order(Direction.DESC, "createDate");
		if (params.get("orderBy") != null) {
			String orderBy = String.valueOf(params.get("orderBy"));
			order = new Order(Direction.DESC, orderBy);
		}

		PageRequest pageable = new PageRequest(page - 1, size, new Sort(order));
		return mileageBackupJpaRepository.findAll(spec, pageable);
	}

	@Override
	public MileageBackup findBySenderId(Integer senderId) {
		try {
			return mileageBackupServiceMapper.mapMileageBackupEntityToMileageBackup(mileageBackupJpaRepository.findBySenderId(senderId));
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
		
	}

}
