/*
 * Created on 2 thg 10 2017 ( Time 15:10:01 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.ecomileage.business.service.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.annotation.Resource;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import org.springframework.data.jpa.domain.Specification;

import org.ecomileage.bean.Sponsor;
import org.ecomileage.bean.jpa.SponsorEntity;
import java.util.Date;
import org.ecomileage.business.service.SponsorService;
import org.ecomileage.business.service.mapping.SponsorServiceMapper;
import org.ecomileage.data.repository.jpa.SponsorJpaRepository;
import org.ecomileage.web.common.utils.DataUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.mysql.fabric.xmlrpc.base.Data;
/**
 * Implementation of SponsorService
 */
@Component
@Transactional
public class SponsorServiceImpl implements SponsorService {

	@Resource
	private SponsorJpaRepository sponsorJpaRepository;
	
	@Resource
	EntityManager em;
	
	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private SponsorServiceMapper sponsorServiceMapper;
	
	@Override
	public Sponsor findById(Integer id) {
		SponsorEntity sponsorEntity = sponsorJpaRepository.findOne(id);
		return sponsorServiceMapper.mapSponsorEntityToSponsor(sponsorEntity);
	}

	@Override
	public SponsorEntity findOne(Integer id) {
		SponsorEntity sponsorEntity = sponsorJpaRepository.findOne(id);
		return sponsorEntity;
	}

	@Override
	public Page<SponsorEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return sponsorJpaRepository.findAll(request);
	}

	@Override
	public List<Sponsor> findAll() {
		Iterable<SponsorEntity> entities = sponsorJpaRepository.findAll();
		List<Sponsor> beans = new ArrayList<Sponsor>();
		for(SponsorEntity sponsorEntity : entities) {
			beans.add(sponsorServiceMapper.mapSponsorEntityToSponsor(sponsorEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = sponsorJpaRepository.count();
		return count;
	}

	@Override
	public Sponsor save(Sponsor sponsor) {
		return update(sponsor) ;
	}

	@Override
	public Sponsor create(Sponsor sponsor) {
/*
		SponsorEntity sponsorEntity = sponsorJpaRepository.findOne(sponsor.getId());
		if( sponsorEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		sponsorEntity = new SponsorEntity();
		sponsorServiceMapper.mapSponsorToSponsorEntity(sponsor, sponsorEntity);
		SponsorEntity sponsorEntitySaved = sponsorJpaRepository.save(sponsorEntity);
		return sponsorServiceMapper.mapSponsorEntityToSponsor(sponsorEntitySaved);
*/
		SponsorEntity sponsorEntity = new SponsorEntity();
		sponsorServiceMapper.mapSponsorToSponsorEntity(sponsor, sponsorEntity);
		SponsorEntity sponsorEntitySaved = sponsorJpaRepository.save(sponsorEntity);
		return sponsorServiceMapper.mapSponsorEntityToSponsor(sponsorEntitySaved);
	}

	@Override
	public Sponsor update(Sponsor sponsor) {
		SponsorEntity sponsorEntity = sponsorJpaRepository.findOne(sponsor.getId());
		sponsorServiceMapper.mapSponsorToSponsorEntity(sponsor, sponsorEntity);
		SponsorEntity sponsorEntitySaved = sponsorJpaRepository.save(sponsorEntity);
		return sponsorServiceMapper.mapSponsorEntityToSponsor(sponsorEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		sponsorJpaRepository.delete(id);
	}

	public SponsorJpaRepository getSponsorJpaRepository() {
		return sponsorJpaRepository;
	}

	public void setSponsorJpaRepository(SponsorJpaRepository sponsorJpaRepository) {
		this.sponsorJpaRepository = sponsorJpaRepository;
	}

	public SponsorServiceMapper getSponsorServiceMapper() {
		return sponsorServiceMapper;
	}

	public void setSponsorServiceMapper(SponsorServiceMapper sponsorServiceMapper) {
		this.sponsorServiceMapper = sponsorServiceMapper;
	}

	@Override
	public Page<SponsorEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return sponsorJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	



	@Override
	public Page<SponsorEntity> filterAdmin( Map<String, Object> params, Integer page, Integer size) {

		Specification<SponsorEntity> spec = new Specification<SponsorEntity>() {
			@Override
			public Predicate toPredicate(Root<SponsorEntity> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
				List<Predicate> predicates = new ArrayList<>();

				if (params.get("key") != null) {
				String key = String.valueOf(params.get("key"));
					if (params.get("type") != null) {
						String type = String.valueOf(params.get("type"));
						Predicate predicate = cb.equal(root.get(type), "%"+key+"%");
						predicates.add(predicate);
					}
				}

				if(params.get("startTime") != null && params.get("startTime") != ""){
					String startTime = String.valueOf(params.get("startTime"));
					Predicate predicate = cb.greaterThanOrEqualTo(root.<Date>get("sponsorDate"),DataUtils.parseDate(startTime, DataUtils.FormatDate.YYYYMMDD.getPattern()));
					predicates.add(predicate);
				}
				
				if(params.get("endTime") != null && params.get("endTime") != ""){
					String endTime = String.valueOf(params.get("endTime"));
					Predicate predicate = cb.lessThanOrEqualTo(root.<Date>get("sponsorDate"),DataUtils.parseDate(endTime, DataUtils.FormatDate.YYYYMMDD.getPattern()));
					predicates.add(predicate);
				}
				
				if (params.get("fullnameOrUsername") != null && params.get("fullnameOrUsername") != "") {
					String key = String.valueOf(params.get("fullnameOrUsername"));
					Predicate predicate =cb.or(cb.like(root.get("user").get("fullname"), "%"+key+"%"), cb.like(root.get("user").get("username"), "%"+key+"%")) ;
					predicates.add(predicate);
				}
				
				if (params.get("membershipFeeTypeId") != null && params.get("membershipFeeTypeId") != "") {
					Integer membershipFeeTypeId = DataUtils.parseInt(params.get("membershipFeeTypeId"));
					Predicate predicate = cb.equal(root.get("category").get("id"), membershipFeeTypeId);
					predicates.add(predicate);
				}
				
				if (params.get("isDelete") != null && params.get("isDelete") != "") {
					boolean isDelete = Boolean.parseBoolean(String.valueOf(params.get("isDelete"))) ;
					Predicate predicate = cb.equal(root.get("isDelete"), isDelete);
					predicates.add(predicate);
				}

				return cb.and(predicates.toArray(new Predicate[] {}));
			}

		};

		Order order = new Order(Direction.DESC, "createDate");
		if (params.get("orderBy") != null) {
			String orderBy = String.valueOf(params.get("orderBy"));
			order = new Order(Direction.DESC, orderBy);
		}

		PageRequest pageable = new PageRequest(page - 1, size, new Sort(order));
		return sponsorJpaRepository.findAll(spec, pageable);
	}
	
	

}
