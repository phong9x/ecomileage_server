/*
 * Created on 2 thg 10 2017 ( Time 15:10:01 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.ecomileage.business.service.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.annotation.Resource;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import org.springframework.data.jpa.domain.Specification;

import org.ecomileage.bean.Setting;
import org.ecomileage.bean.jpa.SettingEntity;
import java.util.Date;
import org.ecomileage.business.service.SettingService;
import org.ecomileage.business.service.mapping.SettingServiceMapper;
import org.ecomileage.data.repository.jpa.SettingJpaRepository;
import org.ecomileage.web.common.utils.DataUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
/**
 * Implementation of SettingService
 */
@Component
@Transactional
public class SettingServiceImpl implements SettingService {

	@Resource
	private SettingJpaRepository settingJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private SettingServiceMapper settingServiceMapper;
	
	@Override
	public Setting findById(Integer id) {
		SettingEntity settingEntity = settingJpaRepository.findOne(id);
		return settingServiceMapper.mapSettingEntityToSetting(settingEntity);
	}

	@Override
	public SettingEntity findOne(Integer id) {
		SettingEntity settingEntity = settingJpaRepository.findOne(id);
		return settingEntity;
	}

	@Override
	public Page<SettingEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return settingJpaRepository.findAll(request);
	}

	@Override
	public List<Setting> findAll() {
		Iterable<SettingEntity> entities = settingJpaRepository.findAll();
		List<Setting> beans = new ArrayList<Setting>();
		for(SettingEntity settingEntity : entities) {
			beans.add(settingServiceMapper.mapSettingEntityToSetting(settingEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = settingJpaRepository.count();
		return count;
	}

	@Override
	public Setting save(Setting setting) {
		return update(setting) ;
	}

	@Override
	public Setting create(Setting setting) {
/*
		SettingEntity settingEntity = settingJpaRepository.findOne(setting.getId());
		if( settingEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		settingEntity = new SettingEntity();
		settingServiceMapper.mapSettingToSettingEntity(setting, settingEntity);
		SettingEntity settingEntitySaved = settingJpaRepository.save(settingEntity);
		return settingServiceMapper.mapSettingEntityToSetting(settingEntitySaved);
*/
		SettingEntity settingEntity = new SettingEntity();
		settingServiceMapper.mapSettingToSettingEntity(setting, settingEntity);
		SettingEntity settingEntitySaved = settingJpaRepository.save(settingEntity);
		return settingServiceMapper.mapSettingEntityToSetting(settingEntitySaved);
	}

	@Override
	public Setting update(Setting setting) {
		SettingEntity settingEntity = settingJpaRepository.findOne(setting.getId());
		settingServiceMapper.mapSettingToSettingEntity(setting, settingEntity);
		SettingEntity settingEntitySaved = settingJpaRepository.save(settingEntity);
		return settingServiceMapper.mapSettingEntityToSetting(settingEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		settingJpaRepository.delete(id);
	}

	public SettingJpaRepository getSettingJpaRepository() {
		return settingJpaRepository;
	}

	public void setSettingJpaRepository(SettingJpaRepository settingJpaRepository) {
		this.settingJpaRepository = settingJpaRepository;
	}

	public SettingServiceMapper getSettingServiceMapper() {
		return settingServiceMapper;
	}

	public void setSettingServiceMapper(SettingServiceMapper settingServiceMapper) {
		this.settingServiceMapper = settingServiceMapper;
	}

	@Override
	public Page<SettingEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return settingJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	@Override
	public Page<SettingEntity> filterAdmin( Map<String, Object> params, Integer page, Integer size) {

		Specification<SettingEntity> spec = new Specification<SettingEntity>() {
			@Override
			public Predicate toPredicate(Root<SettingEntity> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
				List<Predicate> predicates = new ArrayList<>();

				if (params.get("key") != null) {
				String key = String.valueOf(params.get("key"));
					if (params.get("type") != null) {
						String type = String.valueOf(params.get("type"));
						Predicate predicate = cb.equal(root.get(type), "%"+key+"%");
						predicates.add(predicate);
					}
				}
				
				if (params.get("title") != null) {
					String title = String.valueOf(params.get("title"));
					System.out.println("title:" + title);
					Predicate predicate = cb.equal(root.get("title"), "%"+title+"%");
					predicates.add(predicate);
				}
				
				if(params.get("startTime") != null){
					String startTime = String.valueOf(params.get("startTime"));
					Predicate predicate = cb.equal(root.<Date>get("createDate"),DataUtils.parseDate(startTime, DataUtils.FormatDate.YYYYMMDD.getPattern()));
					predicates.add(predicate);
				}
				
				if(params.get("endTime") != null){
					String endTime = String.valueOf(params.get("endTime"));
					Predicate predicate = cb.equal(root.<Date>get("createDate"),DataUtils.parseDate(endTime, DataUtils.FormatDate.YYYYMMDD.getPattern()));
					predicates.add(predicate);
				}

				return cb.and(predicates.toArray(new Predicate[] {}));
			}

		};

		Order order = new Order(Direction.DESC, "createDate");
		if (params.get("orderBy") != null) {
			String orderBy = String.valueOf(params.get("orderBy"));
			order = new Order(Direction.DESC, orderBy);
		}

		PageRequest pageable = new PageRequest(page - 1, size, new Sort(order));
		return settingJpaRepository.findAll(spec, pageable);
	}

	@Override
	public List<SettingEntity> findByDate(Date now) {
		try {
			return settingJpaRepository.findByDate(now);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	public boolean checkDuplicateStartDateAndEndDate(Date startDate, Date endDate, Integer id) {
		return settingJpaRepository.checkDuplicateStartDateAndEndDate(startDate, endDate, id);
	}

	@Override
	public boolean checkDuplicateStartDateAndEndDate(Date startDate, Date endDate) {
		return settingJpaRepository.checkDuplicateStartDateAndEndDate(startDate, endDate);
	}

}
