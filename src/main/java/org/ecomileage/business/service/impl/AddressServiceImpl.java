/*
 * Created on 17 thg 11 2017 ( Time 15:47:28 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.ecomileage.business.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.Resource;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import org.springframework.data.jpa.domain.Specification;

import org.ecomileage.bean.Address;
import org.ecomileage.bean.jpa.AddressEntity;
import org.ecomileage.business.service.AddressService;
import org.ecomileage.business.service.mapping.AddressServiceMapper;
import org.ecomileage.data.repository.jpa.AddressJpaRepository;
import org.ecomileage.web.common.utils.DataUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
/**
 * Implementation of AddressService
 */
@Component
@Transactional
public class AddressServiceImpl implements AddressService {

	@Resource
	private AddressJpaRepository addressJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private AddressServiceMapper addressServiceMapper;
	
	@Resource
	EntityManager em;	

	@Override
	public Address findById(Integer id) {
		AddressEntity addressEntity = addressJpaRepository.findOne(id);
		return addressServiceMapper.mapAddressEntityToAddress(addressEntity);
	}

	@Override
	public AddressEntity findOne(Integer id) {
		AddressEntity addressEntity = addressJpaRepository.findOne(id);
		return addressEntity;
	}

	@Override
	public Page<AddressEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return addressJpaRepository.findAll(request);
	}

	@Override
	public List<Address> findAll() {
		Iterable<AddressEntity> entities = addressJpaRepository.findAll();
		List<Address> beans = new ArrayList<Address>();
		for(AddressEntity addressEntity : entities) {
			beans.add(addressServiceMapper.mapAddressEntityToAddress(addressEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = addressJpaRepository.count();
		return count;
	}

	@Override
	public Address save(Address address) {
		return update(address) ;
	}

	@Override
	public Address create(Address address) {
/*
		AddressEntity addressEntity = addressJpaRepository.findOne(address.getId());
		if( addressEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		addressEntity = new AddressEntity();
		addressServiceMapper.mapAddressToAddressEntity(address, addressEntity);
		AddressEntity addressEntitySaved = addressJpaRepository.save(addressEntity);
		return addressServiceMapper.mapAddressEntityToAddress(addressEntitySaved);
*/
		AddressEntity addressEntity = new AddressEntity();
		addressServiceMapper.mapAddressToAddressEntity(address, addressEntity);
		AddressEntity addressEntitySaved = addressJpaRepository.save(addressEntity);
		return addressServiceMapper.mapAddressEntityToAddress(addressEntitySaved);
	}

	@Override
	public Address update(Address address) {
		AddressEntity addressEntity = addressJpaRepository.findOne(address.getId());
		addressServiceMapper.mapAddressToAddressEntity(address, addressEntity);
		AddressEntity addressEntitySaved = addressJpaRepository.save(addressEntity);
		return addressServiceMapper.mapAddressEntityToAddress(addressEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		addressJpaRepository.delete(id);
	}

	public AddressJpaRepository getAddressJpaRepository() {
		return addressJpaRepository;
	}

	public void setAddressJpaRepository(AddressJpaRepository addressJpaRepository) {
		this.addressJpaRepository = addressJpaRepository;
	}

	public AddressServiceMapper getAddressServiceMapper() {
		return addressServiceMapper;
	}

	public void setAddressServiceMapper(AddressServiceMapper addressServiceMapper) {
		this.addressServiceMapper = addressServiceMapper;
	}

	@Override
	public Page<AddressEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return addressJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	@Override
	public Page<AddressEntity> filterAdmin( Map<String, Object> params, Integer page, Integer size) {

		Specification<AddressEntity> spec = new Specification<AddressEntity>() {
			@Override
			public Predicate toPredicate(Root<AddressEntity> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
				List<Predicate> predicates = new ArrayList<>();

				if (params.get("key") != null) {
				String key = String.valueOf(params.get("key"));
					if (params.get("type") != null) {
						String type = String.valueOf(params.get("type"));
						Predicate predicate = cb.equal(root.get(type), "%"+key+"%");
						predicates.add(predicate);
					}
				}
				return cb.and(predicates.toArray(new Predicate[] {}));
			}

		};

		Order order = new Order(Direction.DESC, "createDate");
		if (params.get("orderBy") != null) {
			String orderBy = String.valueOf(params.get("orderBy"));
			order = new Order(Direction.DESC, orderBy);
		}

		PageRequest pageable = new PageRequest(page - 1, size, new Sort(order));
		return addressJpaRepository.findAll(spec, pageable);
	}

	@Override
	public List<AddressEntity> findByParentId(Integer parentId) {
		try {
			return addressJpaRepository.findByParentId(parentId);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	@Override
	public List<AddressEntity> findByParentName(String parentName) {
		try {
			return addressJpaRepository.findByParentName(parentName);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	@Override
	public AddressEntity findOneByParentName(String parentName) {
		try {
			return addressJpaRepository.findOneByParentName(parentName);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<Map<String, Object>> listCity() {
		try {
			List<Map<String, Object>> result = new ArrayList<>();
			String SELECT ="SELECT new Map("
					+ "a.id as id, "
					+ "a.name as name, "
					+ "(SELECT new Map(district.id as id,district.name as name ) FROM AddressEntity district WHERE district.parentId = a.id) as listDistrict"
					+ ")";
			String FROM ="FROM AddressEntity a ";
			
			Query query = em.createQuery(SELECT + FROM);
			query.setMaxResults(50);
			result = query.getResultList();
			return result;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public List<AddressEntity> getDistricts() {
		try {
			return addressJpaRepository.getDistricts();
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

}
