/*
 * Created on 31 thg 10 2017 ( Time 13:31:30 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.ecomileage.business.service.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.annotation.Resource;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import org.springframework.data.jpa.domain.Specification;

import org.ecomileage.bean.MileageTransfer;
import org.ecomileage.bean.jpa.MileageTransferEntity;
import java.util.Date;
import org.ecomileage.business.service.MileageTransferService;
import org.ecomileage.business.service.mapping.MileageTransferServiceMapper;
import org.ecomileage.data.repository.jpa.MileageTransferJpaRepository;
import org.ecomileage.web.common.utils.DataUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
/**
 * Implementation of MileageTransferService
 */
@Component
@Transactional
public class MileageTransferServiceImpl implements MileageTransferService {

	@Resource
	private MileageTransferJpaRepository mileageTransferJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private MileageTransferServiceMapper mileageTransferServiceMapper;
	
	@Override
	public MileageTransfer findById(Integer id) {
		MileageTransferEntity mileageTransferEntity = mileageTransferJpaRepository.findOne(id);
		return mileageTransferServiceMapper.mapMileageTransferEntityToMileageTransfer(mileageTransferEntity);
	}

	@Override
	public MileageTransferEntity findOne(Integer id) {
		MileageTransferEntity mileageTransferEntity = mileageTransferJpaRepository.findOne(id);
		return mileageTransferEntity;
	}

	@Override
	public Page<MileageTransferEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return mileageTransferJpaRepository.findAll(request);
	}

	@Override
	public List<MileageTransfer> findAll() {
		Iterable<MileageTransferEntity> entities = mileageTransferJpaRepository.findAll();
		List<MileageTransfer> beans = new ArrayList<MileageTransfer>();
		for(MileageTransferEntity mileageTransferEntity : entities) {
			beans.add(mileageTransferServiceMapper.mapMileageTransferEntityToMileageTransfer(mileageTransferEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = mileageTransferJpaRepository.count();
		return count;
	}

	@Override
	public MileageTransfer save(MileageTransfer mileageTransfer) {
		return update(mileageTransfer) ;
	}

	@Override
	public MileageTransfer create(MileageTransfer mileageTransfer) {
/*
		MileageTransferEntity mileageTransferEntity = mileageTransferJpaRepository.findOne(mileageTransfer.getId());
		if( mileageTransferEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		mileageTransferEntity = new MileageTransferEntity();
		mileageTransferServiceMapper.mapMileageTransferToMileageTransferEntity(mileageTransfer, mileageTransferEntity);
		MileageTransferEntity mileageTransferEntitySaved = mileageTransferJpaRepository.save(mileageTransferEntity);
		return mileageTransferServiceMapper.mapMileageTransferEntityToMileageTransfer(mileageTransferEntitySaved);
*/
		MileageTransferEntity mileageTransferEntity = new MileageTransferEntity();
		mileageTransferServiceMapper.mapMileageTransferToMileageTransferEntity(mileageTransfer, mileageTransferEntity);
		MileageTransferEntity mileageTransferEntitySaved = mileageTransferJpaRepository.save(mileageTransferEntity);
		return mileageTransferServiceMapper.mapMileageTransferEntityToMileageTransfer(mileageTransferEntitySaved);
	}

	@Override
	public MileageTransfer update(MileageTransfer mileageTransfer) {
		MileageTransferEntity mileageTransferEntity = mileageTransferJpaRepository.findOne(mileageTransfer.getId());
		mileageTransferServiceMapper.mapMileageTransferToMileageTransferEntity(mileageTransfer, mileageTransferEntity);
		MileageTransferEntity mileageTransferEntitySaved = mileageTransferJpaRepository.save(mileageTransferEntity);
		return mileageTransferServiceMapper.mapMileageTransferEntityToMileageTransfer(mileageTransferEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		mileageTransferJpaRepository.delete(id);
	}

	public MileageTransferJpaRepository getMileageTransferJpaRepository() {
		return mileageTransferJpaRepository;
	}

	public void setMileageTransferJpaRepository(MileageTransferJpaRepository mileageTransferJpaRepository) {
		this.mileageTransferJpaRepository = mileageTransferJpaRepository;
	}

	public MileageTransferServiceMapper getMileageTransferServiceMapper() {
		return mileageTransferServiceMapper;
	}

	public void setMileageTransferServiceMapper(MileageTransferServiceMapper mileageTransferServiceMapper) {
		this.mileageTransferServiceMapper = mileageTransferServiceMapper;
	}

	@Override
	public Page<MileageTransferEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return mileageTransferJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	

	@Override
	public Page<MileageTransferEntity> listPagingByUserId(Integer page, Integer size, Integer userId) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return mileageTransferJpaRepository.listPagingByUserId(userId, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}


	@Override
	public Page<MileageTransferEntity> filterAdmin( Map<String, Object> params, Integer page, Integer size) {

		Specification<MileageTransferEntity> spec = new Specification<MileageTransferEntity>() {
			@Override
			public Predicate toPredicate(Root<MileageTransferEntity> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
				List<Predicate> predicates = new ArrayList<>();


				if(params.get("startTime") != null){
					String startTime = String.valueOf(params.get("startTime"));
					Predicate predicate = cb.equal(root.<Date>get("createDate"),DataUtils.parseDate(startTime, DataUtils.FormatDate.YYYYMMDD.getPattern()));
					predicates.add(predicate);
				}
				
				if(params.get("endTime") != null){
					String endTime = String.valueOf(params.get("endTime"));
					Predicate predicate = cb.equal(root.<Date>get("createDate"),DataUtils.parseDate(endTime, DataUtils.FormatDate.YYYYMMDD.getPattern()));
					predicates.add(predicate);
				}

				return cb.and(predicates.toArray(new Predicate[] {}));
			}

		};

		Order order = new Order(Direction.DESC, "createDate");
		if (params.get("orderBy") != null) {
			String orderBy = String.valueOf(params.get("orderBy"));
			order = new Order(Direction.DESC, orderBy);
		}

		PageRequest pageable = new PageRequest(page - 1, size, new Sort(order));
		return mileageTransferJpaRepository.findAll(spec, pageable);
	}

}
