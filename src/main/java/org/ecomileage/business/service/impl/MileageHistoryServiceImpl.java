/*
 * Created on 2 thg 10 2017 ( Time 15:10:01 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.ecomileage.business.service.impl;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Map;
import javax.annotation.Resource;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import org.springframework.data.jpa.domain.Specification;
import org.apache.commons.collections.map.HashedMap;
import org.apache.commons.lang.ArrayUtils;
import org.ecomileage.bean.MileageHistory;
import org.ecomileage.bean.User;
import org.ecomileage.bean.jpa.MileageHistoryEntity;
import java.util.Date;
import java.util.HashMap;

import org.ecomileage.business.service.MileageHistoryService;
import org.ecomileage.business.service.UserService;
import org.ecomileage.business.service.mapping.MileageHistoryServiceMapper;
import org.ecomileage.data.repository.jpa.MileageHistoryJpaRepository;
import org.ecomileage.data.repository.jpa.PaymentJpaRepository;
import org.ecomileage.web.common.ApplicationDefine;
import org.ecomileage.web.common.utils.ConstantCommon;
import org.ecomileage.web.common.utils.DataUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of MileageHistoryService
 */
@Component
@Transactional
public class MileageHistoryServiceImpl implements MileageHistoryService {

	@Resource
	private MileageHistoryJpaRepository mileageHistoryJpaRepository;
	
	@Resource
	private PaymentJpaRepository paymentJpaRepository;
	
	@Resource
	private UserService userService;

	private static final Integer PAGE_SIZE = 15;

	@Resource
	private MileageHistoryServiceMapper mileageHistoryServiceMapper;

	@Resource
	EntityManager em;

	@Override
	public MileageHistory findById(Integer id) {
		MileageHistoryEntity mileageHistoryEntity = mileageHistoryJpaRepository.findOne(id);
		return mileageHistoryServiceMapper.mapMileageHistoryEntityToMileageHistory(mileageHistoryEntity);
	}

	@Override
	public MileageHistoryEntity findOne(Integer id) {
		MileageHistoryEntity mileageHistoryEntity = mileageHistoryJpaRepository.findOne(id);
		return mileageHistoryEntity;
	}

	@Override
	public Page<MileageHistoryEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE, new Sort(new Order(Direction.DESC, "id")));
		return mileageHistoryJpaRepository.findAll(request);
	}

	@Override
	public List<MileageHistory> findAll() {
		Iterable<MileageHistoryEntity> entities = mileageHistoryJpaRepository.findAll();
		List<MileageHistory> beans = new ArrayList<MileageHistory>();
		for (MileageHistoryEntity mileageHistoryEntity : entities) {
			beans.add(mileageHistoryServiceMapper.mapMileageHistoryEntityToMileageHistory(mileageHistoryEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * 
	 * @return Long
	 */
	public Long countTotal() {
		Long count = mileageHistoryJpaRepository.count();
		return count;
	}

	@Override
	public MileageHistory save(MileageHistory mileageHistory) {
		return update(mileageHistory);
	}

	@Override
	public MileageHistory create(MileageHistory mileageHistory) {
		/*
		 * MileageHistoryEntity mileageHistoryEntity =
		 * mileageHistoryJpaRepository.findOne(mileageHistory.getId()); if(
		 * mileageHistoryEntity != null ) { throw new
		 * IllegalStateException("already.exists"); }
		 * 
		 * mileageHistoryEntity = new MileageHistoryEntity();
		 * mileageHistoryServiceMapper.mapMileageHistoryToMileageHistoryEntity(
		 * mileageHistory, mileageHistoryEntity); MileageHistoryEntity
		 * mileageHistoryEntitySaved =
		 * mileageHistoryJpaRepository.save(mileageHistoryEntity); return
		 * mileageHistoryServiceMapper.mapMileageHistoryEntityToMileageHistory(
		 * mileageHistoryEntitySaved);
		 */
		MileageHistoryEntity mileageHistoryEntity = new MileageHistoryEntity();
		mileageHistoryServiceMapper.mapMileageHistoryToMileageHistoryEntity(mileageHistory, mileageHistoryEntity);
		MileageHistoryEntity mileageHistoryEntitySaved = mileageHistoryJpaRepository.save(mileageHistoryEntity);
		return mileageHistoryServiceMapper.mapMileageHistoryEntityToMileageHistory(mileageHistoryEntitySaved);
	}

	@Override
	public MileageHistory update(MileageHistory mileageHistory) {
		MileageHistoryEntity mileageHistoryEntity = mileageHistoryJpaRepository.findOne(mileageHistory.getId());
		mileageHistoryServiceMapper.mapMileageHistoryToMileageHistoryEntity(mileageHistory, mileageHistoryEntity);
		MileageHistoryEntity mileageHistoryEntitySaved = mileageHistoryJpaRepository.save(mileageHistoryEntity);
		return mileageHistoryServiceMapper.mapMileageHistoryEntityToMileageHistory(mileageHistoryEntitySaved);
	}
	
	@Override
	public MileageHistoryEntity update(MileageHistoryEntity mileageHistory) {
		MileageHistoryEntity mileageHistoryEntitySaved = mileageHistoryJpaRepository.save(mileageHistory);
		return mileageHistoryEntitySaved;
	}

	@Override
	public void delete(Integer id) {
		mileageHistoryJpaRepository.delete(id);
	}

	public MileageHistoryJpaRepository getMileageHistoryJpaRepository() {
		return mileageHistoryJpaRepository;
	}

	public void setMileageHistoryJpaRepository(MileageHistoryJpaRepository mileageHistoryJpaRepository) {
		this.mileageHistoryJpaRepository = mileageHistoryJpaRepository;
	}

	public MileageHistoryServiceMapper getMileageHistoryServiceMapper() {
		return mileageHistoryServiceMapper;
	}

	public void setMileageHistoryServiceMapper(MileageHistoryServiceMapper mileageHistoryServiceMapper) {
		this.mileageHistoryServiceMapper = mileageHistoryServiceMapper;
	}

	@Override
	public Page<MileageHistoryEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page - 1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return mileageHistoryJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Page<MileageHistoryEntity> filterAdmin(Map<String, Object> params, Integer page, Integer size) {

		Specification<MileageHistoryEntity> spec = new Specification<MileageHistoryEntity>() {
			@Override
			public Predicate toPredicate(Root<MileageHistoryEntity> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
				List<Predicate> predicates = new ArrayList<>();

				if (params.get("key") != null) {
					String key = String.valueOf(params.get("key"));
					if (params.get("type") != null) {
						String type = String.valueOf(params.get("type"));
						Predicate predicate = cb.equal(root.get(type), "%" + key + "%");
						predicates.add(predicate);
					}
				}

				if (params.get("startTime") != null) {
					String startTime = String.valueOf(params.get("startTime"));
					Predicate predicate = cb.equal(root.<Date>get("createDate"),
							DataUtils.parseDate(startTime, DataUtils.FormatDate.YYYYMMDD.getPattern()));
					predicates.add(predicate);
				}
				
				if(params.get("registerTimeStart") != "" && params.get("registerTimeStart") != null){
					String startTime = String.valueOf(params.get("registerTimeStart"));
					Predicate predicate = cb.greaterThanOrEqualTo(root.<Date>get("createDate"),DataUtils.parseDate(startTime, DataUtils.FormatDate.YYYYMMDD.getPattern()));
					predicates.add(predicate);
				}
				
				if(params.get("registerTimeEnd") != "" && params.get("registerTimeEnd") != null){
					String startTime = String.valueOf(params.get("registerTimeEnd"));
					Predicate predicate = cb.lessThanOrEqualTo(root.<Date>get("createDate"),DataUtils.parseDate(startTime, DataUtils.FormatDate.YYYYMMDD.getPattern()));
					predicates.add(predicate);
				}
				
				if(params.get("endTime") != "" && params.get("startTime") != null){
					String endTime = String.valueOf(params.get("endTime"));
					Predicate predicate = cb.lessThanOrEqualTo(root.<Date>get("createDate"),DataUtils.parseDate(endTime, DataUtils.FormatDate.YYYYMMDD.getPattern()));
					predicates.add(predicate);
				}
				
				if (params.get("endTime") != null) {
					String endTime = String.valueOf(params.get("endTime"));
					Predicate predicate = cb.equal(root.<Date>get("createDate"),
							DataUtils.parseDate(endTime, DataUtils.FormatDate.YYYYMMDD.getPattern()));
					predicates.add(predicate);
				}
				
				if (params.get("fullnameOrUsername") != null && params.get("fullnameOrUsername") != "") {
					String key = String.valueOf(params.get("fullnameOrUsername"));
					Predicate predicate =cb.or(cb.like(root.get("user").get("fullname"), "%"+key+"%"), cb.like(root.get("user").get("username"), "%"+key+"%")) ;
					predicates.add(predicate);
				}
				
				
				
				if (params.get("city-m") != null && params.get("city-m") != "") {
					String key = String.valueOf(params.get("city-m"));
					Predicate predicate;
					if (params.get("district-m") != null && params.get("district-m") != "") {
						String district = String.valueOf(params.get("district-m"));
						predicate = cb.or(cb.like(root.get("area"), "%"+key+"%"), cb.like(root.get("area"), "%"+district+"%")) ;
					} else {
						predicate =cb.like(root.get("area"), "%"+key+"%") ;
					}
					
					predicates.add(predicate);
				}
				
				if (params.get("status") != null && params.get("status") != "") {
					String status = String.valueOf(params.get("status"));
					Predicate predicate = cb.equal(root.get("status"), status);
					predicates.add(predicate);
				}
				
				if (params.get("type_m") != null && params.get("type_m") != "") {
					Integer typeM = Integer.valueOf(params.get("type_m").toString());
					Integer[] types = null;
					if (typeM == ConstantCommon.FLAG_MILEAGEHISTORY_TYPE_BUS_AND_SUBWAY) {
						types = new Integer[2];
						types[0] = (int) ApplicationDefine.MileageHistory_Type.Bus.getCode();
						types[1] = (int) ApplicationDefine.MileageHistory_Type.Subway.getCode();
					} else {
						types = new Integer[1];
						types[0] = (int) ApplicationDefine.MileageHistory_Type.Bike.getCode();
					}
					
					Predicate predicate = cb.isTrue(root.get("type").in(types));
					predicates.add(predicate);
				}
				
				if (params.get("status-m") != null && params.get("status-m") != "") {
					Integer[] statuss = new Integer[2];
					statuss[0] = (int) ApplicationDefine.MileageHistory_Status.SendRequestAndNotConfirmed.getCode();
					statuss[1] = (int) ApplicationDefine.MileageHistory_Status.RegisterAgain.getCode();
					
					Predicate predicate = cb.isTrue(root.get("status").in(statuss));
					predicates.add(predicate);
				}

				return cb.and(predicates.toArray(new Predicate[] {}));
			}

		};

		Order order = new Order(Direction.DESC, "createDate");
		if (params.get("orderBy") != null) {
			String orderBy = String.valueOf(params.get("orderBy"));
			order = new Order(Direction.DESC, orderBy);
		}

		PageRequest pageable = new PageRequest(page - 1, size, new Sort(order));
		return mileageHistoryJpaRepository.findAll(spec, pageable);
	}

	@Override
	public Page<MileageHistoryEntity> listPagingHistory(Integer userId, Short[] type, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page - 1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return mileageHistoryJpaRepository.listPagingHistory(userId, type, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<Map<String, Object>> listMileageChart(HashMap<String, Object> params) {
		try {
			List<Map<String, Object>> list = new ArrayList<>();
			List<Map<String, Object>> result = new ArrayList<>();
			
			Calendar cal = Calendar.getInstance();
			
			String typeTime  = String.valueOf(params.get("typeTime "));
			Integer userId = DataUtils.parseInt(params.get("userId"));
			String typeVehicle = String.valueOf(params.get("typeVehicle"));
			String FROM ="FROM MileageHistoryEntity mh ";
			String comment ="";
			String title ="";
			if (typeTime.equals("date")) {
				cal.add(Calendar.DATE, -7);
				for (int i = 0; i < 7; i++) {
					cal.add(Calendar.DATE, 1);
					title =DataUtils.parseStringFromDate(cal.getTime(), "MM.dd");
					if(i==0 || cal.get(Calendar.DAY_OF_MONTH)== 1) {
						comment =String.valueOf(cal.get(Calendar.MONTH)+1)+"월";
					}else {
						comment ="";
					}
					String SELECT ="SELECT new Map('"+title+"' as title, '"+comment+"' as comment, "
							+ "COALESCE(ROUND(SUM(mh.totalMileage),0),0) as allData, "
							+ "COALESCE(ROUND(SUM(CASE WHEN mh.user.id ="+userId+"  THEN mh.totalMileage END),0),0) as userData) ";
					String WHERE ="WHERE DATE(mh.createDate) = '"+DataUtils.parseStringFromDate(cal.getTime(), "yyyy-MM-dd")+"' ";
					WHERE +=" AND mh.type in "+ typeVehicle;
					Query query = em.createQuery(SELECT + FROM + WHERE);
					list = query.getResultList();
					result.addAll(list);
				}
			}else if(typeTime.equals("week")) {
				cal.add(Calendar.WEEK_OF_YEAR, -7);
				Integer month = cal.get(Calendar.MONTH)+1;
				Integer startWeekDay = 0;
				Integer endWeekDay = 0;
				for (int i = 0; i < 7; i++) {
					cal.add(Calendar.WEEK_OF_YEAR, 1);
					
					Integer week = cal.get(Calendar.WEEK_OF_YEAR);
					cal.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);
					title=DataUtils.parseStringFromDate(cal.getTime(), "dd") +"-";
					startWeekDay = cal.get(Calendar.DAY_OF_MONTH);
					
					cal.add(Calendar.DATE, 6);
					title+=DataUtils.parseStringFromDate(cal.getTime(), "dd");
					endWeekDay = cal.get(Calendar.DAY_OF_MONTH);
					
					cal.add(Calendar.WEEK_OF_YEAR, -1);
					
					if(i==0 || endWeekDay < startWeekDay) {
						System.out.println("startWeekDay:"+startWeekDay);
						System.out.println("endWeekDay:"+endWeekDay);
						System.out.println("month:"+(cal.get(Calendar.MONTH)+1));
						System.out.println("date: "+DataUtils.parseStringFromDate(cal.getTime(), "yyyy-MM-dd"));
						if(endWeekDay < startWeekDay) {
							month +=1;
							if(month > 12) {
								month =1;
							}
						}
						comment =month+"월";
					}else {
						comment ="";
					}
					
					String SELECT ="SELECT new Map('"+title+"' as title, '"+comment+"' as comment,"
							+ "COALESCE(ROUND(SUM(mh.totalMileage),0),0) as allData, "
							+ "COALESCE(ROUND(SUM(CASE WHEN mh.user.id ="+userId+"  THEN mh.totalMileage END),0),0) as userData) ";
					String WHERE ="WHERE WEEK(mh.createDate) = "+week+" ";
					WHERE +=" AND mh.type in "+ typeVehicle;
					Query query = em.createQuery(SELECT + FROM + WHERE);
					list = query.getResultList();
					result.addAll(list);
				}
			}else if(typeTime.equals("month")) {
				cal.add(Calendar.MONTH, -7);
				for (int i = 0; i < 7; i++) {
					cal.add(Calendar.MONTH, 1);
					
					if(i==0 || cal.get(Calendar.MONTH)== 0) {
						comment =String.valueOf(cal.get(Calendar.YEAR));
					}else {
						comment ="";
					}
					
					Integer month = cal.get(Calendar.MONTH)+1;
					cal.add(Calendar.DATE, 1);
					String SELECT ="SELECT new Map('"+month+"' as title, '"+comment+"' as comment,"
							+ "COALESCE(ROUND(SUM(mh.totalMileage),0),0) as allData, "
							+ "COALESCE(ROUND(SUM(CASE WHEN mh.user.id ="+userId+"  THEN mh.totalMileage END),0),0) as userData) ";
					String WHERE ="WHERE MONTH(mh.createDate) = "+month+" ";
					WHERE +=" AND mh.type in "+ typeVehicle;
					Query query = em.createQuery(SELECT + FROM + WHERE);
					list = query.getResultList();
					result.addAll(list);
				}
			}else {
				cal.add(Calendar.YEAR, -7);
				for (int i = 0; i < 7; i++) {
					cal.add(Calendar.YEAR, 1);
					Integer year = cal.get(Calendar.YEAR);
					cal.add(Calendar.DATE, 1);
					String SELECT ="SELECT new Map('"+year+"' as title, '' as comment,"
							+ "COALESCE(ROUND(SUM(mh.totalMileage),0),0) as allData, "
							+ "COALESCE(ROUND(SUM(CASE WHEN mh.user.id ="+userId+"  THEN mh.totalMileage END),0),0) as userData) ";
					String WHERE ="WHERE YEAR(mh.createDate) = "+year+" ";
					WHERE +=" AND mh.type in "+ typeVehicle;
					Query query = em.createQuery(SELECT + FROM + WHERE);
					list = query.getResultList();
					result.addAll(list);
				}
			}

			return result;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<Map<String, Object>> listPointChart(HashMap<String, Object> params) {
		try {
			List<Map<String, Object>> list = new ArrayList<>();
			List<Map<String, Object>> result = new ArrayList<>();
			
			Calendar cal = Calendar.getInstance();
			
			String typeTime  = String.valueOf(params.get("typeTime "));
			Integer userId = DataUtils.parseInt(params.get("userId"));
			String typeVehicle = String.valueOf(params.get("typeVehicle"));
			String FROM ="FROM MileageHistoryEntity mh ";
			
			String comment ="";
			String title ="";
			
			if (typeTime.equals("date")) {
				cal.add(Calendar.DATE, -7);
				for (int i = 0; i < 7; i++) {
					cal.add(Calendar.DATE, 1);
					title =DataUtils.parseStringFromDate(cal.getTime(), "MM.dd");
					if(i==0 || cal.get(Calendar.DAY_OF_MONTH)== 1) {
						comment =String.valueOf(cal.get(Calendar.MONTH)+1)+"월";
					}else {
						comment ="";
					}
					String SELECT ="SELECT new Map('"+title+"' as title, '"+comment+"' as comment, "
							+ "ROUND(COALESCE(SUM(CASE WHEN mh.user.id ="+userId+"  THEN mh.point END),0),0) as allData,"
							+ "ROUND(COALESCE(SUM(mh.point)/COUNT(DISTINCT mh.user.id),0),0) as userData ) ";
					String WHERE ="WHERE DATE(mh.createDate) = '"+DataUtils.parseStringFromDate(cal.getTime(), "yyyy-MM-dd")+"' ";
					WHERE +=" AND mh.type in "+ typeVehicle;
					Query query = em.createQuery(SELECT + FROM + WHERE);
					list = query.getResultList();
					result.addAll(list);
				}
			}else if(typeTime.equals("week")) {
				cal.add(Calendar.WEEK_OF_YEAR, -7);
				Integer month = cal.get(Calendar.MONTH)+1;
				Integer startWeekDay = 0;
				Integer endWeekDay = 0;
				for (int i = 0; i < 7; i++) {
					cal.add(Calendar.WEEK_OF_YEAR, 1);
					
					Integer week = cal.get(Calendar.WEEK_OF_YEAR);
					cal.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);
					title=DataUtils.parseStringFromDate(cal.getTime(), "dd") +"-";
					startWeekDay = cal.get(Calendar.DAY_OF_MONTH);
					
					cal.add(Calendar.DATE, 6);
					title+=DataUtils.parseStringFromDate(cal.getTime(), "dd");
					endWeekDay = cal.get(Calendar.DAY_OF_MONTH);
					
					cal.add(Calendar.WEEK_OF_YEAR, -1);
					
					if(i==0 || endWeekDay < startWeekDay) {
						System.out.println("startWeekDay:"+startWeekDay);
						System.out.println("endWeekDay:"+endWeekDay);
						System.out.println("month:"+(cal.get(Calendar.MONTH)+1));
						System.out.println("date: "+DataUtils.parseStringFromDate(cal.getTime(), "yyyy-MM-dd"));
						if(endWeekDay < startWeekDay) {
							month +=1;
							if(month > 12) {
								month =1;
							}
						}
						comment =month+"월";
					}else {
						comment ="";
					}
					
					String SELECT ="SELECT new Map('"+title+"' as title, '"+comment+"' as comment,"
							+ "ROUND(COALESCE(SUM(CASE WHEN mh.user.id ="+userId+"  THEN mh.point END),0),0) as allData,"
							+ "ROUND(COALESCE(SUM(mh.point)/COUNT(DISTINCT mh.user.id),0),0) as userData ) ";
					String WHERE ="WHERE WEEK(mh.createDate) = "+week+" ";
					WHERE +=" AND mh.type in "+ typeVehicle;
					Query query = em.createQuery(SELECT + FROM + WHERE);
					list = query.getResultList();
					result.addAll(list);
				}
			}else if(typeTime.equals("month")) {
				cal.add(Calendar.MONTH, -7);
				for (int i = 0; i < 7; i++) {
					cal.add(Calendar.MONTH, 1);
					
					if(i==0 || cal.get(Calendar.MONTH)== 0) {
						comment =String.valueOf(cal.get(Calendar.YEAR));
					}else {
						comment ="";
					}
					
					Integer month = cal.get(Calendar.MONTH)+1;
					cal.add(Calendar.DATE, 1);
					String SELECT ="SELECT new Map('"+month+"' as title, '"+comment+"' as comment,"
							+ "ROUND(COALESCE(SUM(CASE WHEN mh.user.id ="+userId+"  THEN mh.point END),0),0) as allData,"
							+ "ROUND(COALESCE(SUM(mh.point)/COUNT(DISTINCT mh.user.id),0),0) as userData ) ";
					String WHERE ="WHERE MONTH(mh.createDate) = "+month+" ";
					WHERE +=" AND mh.type in "+ typeVehicle;
					Query query = em.createQuery(SELECT + FROM + WHERE);
					list = query.getResultList();
					result.addAll(list);
				}
			}else {
				cal.add(Calendar.YEAR, -7);
				for (int i = 0; i < 7; i++) {
					cal.add(Calendar.YEAR, 1);
					Integer year = cal.get(Calendar.YEAR);
					cal.add(Calendar.DATE, 1);
					String SELECT ="SELECT new Map('"+year+"' as title, '' as comment,"
							+ "ROUND(COALESCE(SUM(CASE WHEN mh.user.id ="+userId+"  THEN mh.point END),0),0) as allData,"
							+ "ROUND(COALESCE(SUM(mh.point)/COUNT(DISTINCT mh.user.id),0),0) as userData ) ";
					String WHERE ="WHERE YEAR(mh.createDate) = "+year+" ";
					WHERE +=" AND mh.type in "+ typeVehicle;
					Query query = em.createQuery(SELECT + FROM + WHERE);
					list = query.getResultList();
					result.addAll(list);
				}
			}

			return result;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<Map<String, Object>> listActiveNumberChart(HashMap<String, Object> params) {
		try {
			List<Map<String, Object>> list = new ArrayList<>();
			List<Map<String, Object>> result = new ArrayList<>();
			
			Calendar cal = Calendar.getInstance();
			
			String typeTime  = String.valueOf(params.get("typeTime "));
			Integer userId = DataUtils.parseInt(params.get("userId"));
			String typeVehicle = String.valueOf(params.get("typeVehicle"));
			String FROM ="FROM MileageHistoryEntity mh ";
			String comment ="";
			String title ="";
			if (typeTime.equals("date")) {
				cal.add(Calendar.DATE, -7);
				for (int i = 0; i < 7; i++) {
					cal.add(Calendar.DATE, 1);
					title =DataUtils.parseStringFromDate(cal.getTime(), "MM.dd");
					if(i==0 || cal.get(Calendar.DAY_OF_MONTH)== 1) {
						comment =String.valueOf(cal.get(Calendar.MONTH)+1)+"월";
					}else {
						comment ="";
					}
					String SELECT ="SELECT new Map('"+title+"' as title, '"+comment+"' as comment, "
							+ "COUNT(mh) as allData, "
							+ "COUNT(CASE WHEN mh.user.id ="+userId+"  THEN mh END) as userData) ";
					String WHERE ="WHERE DATE(mh.createDate) = '"+DataUtils.parseStringFromDate(cal.getTime(), "yyyy-MM-dd")+"' ";
					WHERE +=" AND mh.type in "+ typeVehicle;
					Query query = em.createQuery(SELECT + FROM + WHERE);
					list = query.getResultList();
					result.addAll(list);
				}
			}else if(typeTime.equals("week")) {
				cal.add(Calendar.WEEK_OF_YEAR, -7);
				Integer month = cal.get(Calendar.MONTH)+1;
				Integer startWeekDay = 0;
				Integer endWeekDay = 0;
				for (int i = 0; i < 7; i++) {
					cal.add(Calendar.WEEK_OF_YEAR, 1);
					
					Integer week = cal.get(Calendar.WEEK_OF_YEAR);
					cal.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);
					title=DataUtils.parseStringFromDate(cal.getTime(), "dd") +"-";
					startWeekDay = cal.get(Calendar.DAY_OF_MONTH);
					
					cal.add(Calendar.DATE, 6);
					title+=DataUtils.parseStringFromDate(cal.getTime(), "dd");
					endWeekDay = cal.get(Calendar.DAY_OF_MONTH);
					
					cal.add(Calendar.WEEK_OF_YEAR, -1);
					
					if(i==0 || endWeekDay < startWeekDay) {
						System.out.println("startWeekDay:"+startWeekDay);
						System.out.println("endWeekDay:"+endWeekDay);
						System.out.println("month:"+(cal.get(Calendar.MONTH)+1));
						System.out.println("date: "+DataUtils.parseStringFromDate(cal.getTime(), "yyyy-MM-dd"));
						if(endWeekDay < startWeekDay) {
							month +=1;
							if(month > 12) {
								month =1;
							}
						}
						comment =month+"월";
					}else {
						comment ="";
					}
					
					String SELECT ="SELECT new Map('"+title+"' as title, '"+comment+"' as comment,"
							+ "COUNT(mh) as allData, "
							+ "COUNT(CASE WHEN mh.user.id ="+userId+"  THEN mh END) as userData) ";
					String WHERE ="WHERE WEEK(mh.createDate) = "+week+" ";
					WHERE +=" AND mh.type in "+ typeVehicle;
					Query query = em.createQuery(SELECT + FROM + WHERE);
					list = query.getResultList();
					result.addAll(list);
				}
			}else if(typeTime.equals("month")) {
				cal.add(Calendar.MONTH, -7);
				for (int i = 0; i < 7; i++) {
					cal.add(Calendar.MONTH, 1);
					
					if(i==0 || cal.get(Calendar.MONTH)== 0) {
						comment =String.valueOf(cal.get(Calendar.YEAR));
					}else {
						comment ="";
					}
					
					Integer month = cal.get(Calendar.MONTH)+1;
					cal.add(Calendar.DATE, 1);
					String SELECT ="SELECT new Map('"+month+"' as title, '"+comment+"' as comment,"
							+ "COUNT(mh) as allData, "
							+ "COUNT(CASE WHEN mh.user.id ="+userId+"  THEN mh END) as userData) ";
					String WHERE ="WHERE MONTH(mh.createDate) = "+month+" ";
					WHERE +=" AND mh.type in "+ typeVehicle;
					Query query = em.createQuery(SELECT + FROM + WHERE);
					list = query.getResultList();
					result.addAll(list);
				}
			}else {
				cal.add(Calendar.YEAR, -7);
				for (int i = 0; i < 7; i++) {
					cal.add(Calendar.YEAR, 1);
					Integer year = cal.get(Calendar.YEAR);
					cal.add(Calendar.DATE, 1);
					String SELECT ="SELECT new Map('"+year+"' as title, '' as comment,"
							+ "COUNT(mh) as allData, "
							+ "COUNT(CASE WHEN mh.user.id ="+userId+"  THEN mh END) as userData) ";
					String WHERE ="WHERE YEAR(mh.createDate) = "+year+" ";
					WHERE +=" AND mh.type in "+ typeVehicle;
					Query query = em.createQuery(SELECT + FROM + WHERE);
					list = query.getResultList();
					result.addAll(list);
				}
			}

			return result;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<Map<String, Object>> listRanking(HashMap<String, Object> params) {
		try {
			List<Map<String, Object>> result = new ArrayList<>();
			String typeChart =String.valueOf(params.get("typeChart"));
			String typeArea =String.valueOf(params.get("typeArea"));
			String SELECT ="SELECT new Map("
					+ "mh.user.id AS userId, "
					+ "mh.user.avatarUrl AS avatarUrl, "
					+ "mh.user.fullname AS fullname, "
					+ "CASE WHEN mh.user.userRole.id = 1 THEN 1 ELSE 2 END AS roleId, ";
			
			String FROM ="FROM MileageHistoryEntity mh ";
			
			String WHERE ="WHERE  mh.type = 1 ";
			
			String GROUP_BY ="GROUP BY mh.user.id ";
			
			String ORDER_BY ="ORDER BY data DESC";
			// by area
			if( typeArea.equals("hometown")) {
				String city =String.valueOf(params.get("city"));
				String district =String.valueOf(params.get("district"));
				WHERE +="AND mh.user.city = '"+city+"' AND mh.user.district = '"+district+"' ";
			}else if(typeArea.equals("city")) {
				
				if(params.get("city")!= null && params.get("city")!= "") {
					String city =String.valueOf(params.get("city"));
					WHERE +="AND mh.user.city = '"+city+"' ";
				}
				if(params.get("district")!= null && params.get("district")!= "") {
					String district =String.valueOf(params.get("district"));
					WHERE +="AND mh.user.district = '"+district+"' ";
				}
			}
			
			//by type
			if(typeChart.equals("mileage")) {
				SELECT += "COALESCE(ROUND(SUM(mh.totalMileage),3),0) as data) ";
				
			} else if(typeChart.equals("point")){
				SELECT += "mh.point as data) ";
			}else {
				SELECT += "COUNT(mh.user.id) as data) ";
			}
			Query query = em.createQuery(SELECT + FROM + WHERE + GROUP_BY + ORDER_BY);
			query.setMaxResults(50);
			result = query.getResultList();
			return result;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	@Override
	public Long countUserJoin_ByYear(Integer year) {
		try {
			return mileageHistoryJpaRepository.countUserJoin_ByYear(year);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Long countUserJoin() {
		try {
			return mileageHistoryJpaRepository.countUserJoin();
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Long countReduceCo2_ByYear(Integer year, Short[] status) {
		try {
			Long sum = mileageHistoryJpaRepository.countReduceCo2_ByYear(year, status);
			if (sum == null) {
				sum = 0l;
			}
			return sum;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Float countReduceCo2(Short[] status) {
		try {
			Float sum = mileageHistoryJpaRepository.countReduceCo2(status);
			if (sum == null) {
				sum = 0f;
			}
			return sum;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Long countApprovalByUserId(Integer userId, Date date) {
		try {
			Long  count = mileageHistoryJpaRepository.countApprovalByUserId(userId, date);
			if (count == null) {
				count = 0l;
			}
			return count;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Long countPointByUserIdAndMonth(Integer userId, Date date) {
		try {
			Long sum = mileageHistoryJpaRepository.countPointByUserIdAndMonth(userId, date);
			if (sum == null) {
				sum = 0l;
			}
			return sum;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Float countReduceCo2_ByYearAndUserId(Integer year, Short[] status, Integer userId) {
		try {
			Float sum = mileageHistoryJpaRepository.countReduceCo2_ByYearAndUserId(year, status, userId);
			if (sum == null) {
				sum = 0f;
			}
			return sum;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Float countReduceCo2_ByUserId(Short[] status, Integer userId) {
		try {
			Float sum = mileageHistoryJpaRepository.countReduceCo2_ByUserId(status, userId);
			if (sum == null) {
				sum = 0f;
			}
			return sum;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Long countPointByUserId(Integer userId, Short[] type) {
		try {
			Long sum = mileageHistoryJpaRepository.countPointByUserId(userId, type);
			if (sum == null) {
				sum = 0l;
			}
			return sum;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Long countFavouritePointByUserId(Integer userId) {
		try {
			Long sum = mileageHistoryJpaRepository.countFavouritePointByUserId(userId);
			if (sum == null) {
				sum = 0l;
			}
			return sum;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Long countActiveByUserId(Integer userId, Short[] type) {
		try {
			Long sum = mileageHistoryJpaRepository.countActiveByUserId(userId, type);
			if (sum == null) {
				sum = 0l;
			}
			return sum;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Float countTotalMileageByUserId(Integer userId, Short[] type) {
		try {
			Float sum = mileageHistoryJpaRepository.countTotalMileageByUserId(userId, type);
			if (sum == null) {
				sum = 0f;
			}
			return sum;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Float countTotalMileage(Short[] type) {
		try {
			Float sum = mileageHistoryJpaRepository.countTotalMileage(type);
			if (sum == null) {
				sum = 0f;
			}
			return sum;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Float countTotalMileage_ByYearAndUserId(Integer year, Integer userId, Short[] type) {
		try {
			Float sum = mileageHistoryJpaRepository.countTotalMileage_ByYearAndUserId(year, userId, type);
			if (sum == null) {
				sum = 0f;
			}
			return sum;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Long countReduceCo2() {
		try {
			Long sum = mileageHistoryJpaRepository.countReduceCo2();
			if (sum == null) {
				sum = 0l;
			}
			return sum;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Long getBikePointByUserId(Integer userId) {
		try {
			
			Long bikePoint = mileageHistoryJpaRepository.countPointByUserId(userId, new Short[] {ApplicationDefine.MileageHistory_Type.Bike.getCode()});
			Long minusPoint = paymentJpaRepository.getBikePointBy_UserId(userId);
			
			return bikePoint - minusPoint;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Long getTranferPointByUserId(Integer userId) {
		try {
			Long tranferPoint = mileageHistoryJpaRepository.countPointByUserId(userId, 
					new Short[] {
							ApplicationDefine.MileageHistory_Type.Subway.getCode(),
							ApplicationDefine.MileageHistory_Type.Bus.getCode()});
			
			Long minusPoint = paymentJpaRepository.getTransferPointBy_UserId(userId);
			
			return tranferPoint - minusPoint;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Long getTotalPointByUserId(Integer userId) {
		try {
			Long totalPoint = mileageHistoryJpaRepository.countTotalPointByUserId(userId);
			Long minusPoint = paymentJpaRepository.getTotalPoint(userId);
			
			return totalPoint - minusPoint;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Long getPreviousPoint(Integer userId) {
		
		try {
			
			User u = userService.findById(userId);
			long totalPoint = u.getPreviousPoint();
			Long minusPoint = paymentJpaRepository.getPreviousPointBy_UserId(userId);
			
			return totalPoint - minusPoint;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	

}
