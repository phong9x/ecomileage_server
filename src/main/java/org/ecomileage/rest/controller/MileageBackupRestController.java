/*
 * Created on 6 thg 12 2017 ( Time 13:19:16 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.ecomileage.rest.controller;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Date;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.json.simple.JSONObject;
import org.json.simple.parser.*;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.ecomileage.web.common.utils.EncryptionUtils;

import org.ecomileage.bean.UserItem;
import org.ecomileage.bean.MileageBackup;
import org.ecomileage.bean.User;
import org.ecomileage.bean.jpa.MileageBackupEntity;
import org.ecomileage.bean.jpa.UserEntity;
import org.ecomileage.business.service.MileageBackupService;
import org.ecomileage.business.service.UserService;
import org.ecomileage.rest.common.AbstractRestController;
import org.ecomileage.rest.common.AuthorizationToken;
import org.ecomileage.web.common.utils.DataUtils;
import org.ecomileage.web.common.ApplicationDefine;
import org.ecomileage.web.common.Login;
/**
 * Spring MVC controller for 'MileageBackup' management.
 */
@RequestMapping("/mileageBackup")
@Controller
public class MileageBackupRestController extends AbstractRestController{

	@Resource
	private MileageBackupService mileageBackupService;
	@Resource
	private UserService userService;
	
	//dataBackup screen
	@RequestMapping( value="/dataBackup",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> dataBackup(
			HttpSession session,
			@RequestHeader(value="token",required=false) String token,
			@RequestParam (value="username") String username){
		UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		try {
			User user= userService.findById(userItem.getId());
			
			UserEntity recivedUser = userService.findByUsername(username);
			if (recivedUser == null) {
				return FAIL("아이디가 없습니다. 아이디 확인 후 재신청 해주세요");
			}
			
			MileageBackup mBackup = new MileageBackup();
			mBackup.setSenderId(user.getId());
			mBackup.setReceiverId(recivedUser.getId());
			mBackup.setStatus(ApplicationDefine.MileageBackup_Status.waitting.getCode());
			mBackup.setCreateDate(new Date());
			mBackup.setUpdateDate(new Date());
			
			return SUCCESS("신청이 완료되었습니다.");
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
	}
	//dataBackup screen
	@RequestMapping( value="/dataBackup",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> dataBackup_G(
			HttpSession session,
			@RequestHeader(value="token",required=false) String token){
		UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		try {
			User user= userService.findById(userItem.getId());
			MileageBackup mBackup = mileageBackupService.findBySenderId(user.getId());
			if (mBackup == null) {
				return FAIL();
			}
			
			if (mBackup.getStatus() == ApplicationDefine.MileageBackup_Status.approval.getCode()) {
				return RESULT_CODE(51, "데이터가 이전되었습니다.");
			} else if (mBackup.getStatus() == ApplicationDefine.MileageBackup_Status.NotApproval.getCode()) {
				return RESULT_CODE(52, "데이터 이전이 불인되었습니다. 아이디 확인 후 재신청해주세요.");
			} else {
				return RESULT_CODE(50, "");
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
	}
	
	@RequestMapping( value="/all",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findAll(
	@RequestHeader(value="token",required=false) String token
	) {
		//UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		try {
			List<MileageBackup> list = mileageBackupService.findAll();
			return SUCCESS(list);
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
	} 
	
	@RequestMapping( value="/paging",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findAllPaging(
	@RequestParam(value="" , defaultValue ="1") Integer page,
	@RequestHeader(value="token",required=false) String token,
	HttpSession session
	) throws ParseException {
		//UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		HashMap<String, Object> ret =new HashMap<String, Object>();
		try {
			Page<MileageBackupEntity> list = mileageBackupService.findAll(page);
			if(list.getContent()!=null){
				ret.put("list", list.getContent());
				ret.put("page", page);
				ret.put("totalPage", list.getTotalPages());
				return SUCCESS(ret);
			}else{
				return FAIL();
			}
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	} 


	@RequestMapping( value="/item/{id}",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findOne(
	@PathVariable("id") Integer id,
	HttpSession session,
	@RequestHeader(value="token",required=false) String token
		) {
		//UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		try {
			MileageBackup item= mileageBackupService.findById(id);
			if(item!=null){
				return SUCCESS(item);
			}else{
				return FAIL();
			}
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	}
	
	@RequestMapping( value="/create",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> create(
	HttpSession session,
	@ModelAttribute MileageBackup item
	) {
	try{
			item.setCreateDate(new Date());
			item.setUpdateDate(new Date());
			MileageBackup create= mileageBackupService.create(item);
			return SUCCESS(create);
		}catch(Exception e){
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
	}

	@RequestMapping( value="/edit",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> edit(
	HttpSession session,
	@ModelAttribute MileageBackup item
	) {
	try{
			item.setUpdateDate(new Date());
			MileageBackup edit=mileageBackupService.update(item);
			return SUCCESS(edit);
		}catch(Exception e){
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
	}

	@RequestMapping( value="/delete/{id}",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> delete(
	@RequestHeader(value="token",required=false) String token,
	@PathVariable("id") Integer id) {
		try{
				mileageBackupService.delete(id);
				return SUCCESS();
		}catch(Exception e){
				e.printStackTrace();
				return ERROR("HAVE ERROR: "+e);
		}
	}
	
}



