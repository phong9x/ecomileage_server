/*
 * Created on 17 thg 10 2017 ( Time 16:40:08 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.ecomileage.rest.controller;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import java.util.zip.ZipInputStream;
import java.io.File;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.json.simple.JSONObject;
import org.json.simple.parser.*;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.ecomileage.web.common.utils.EncryptionUtils;
import org.ecomileage.web.common.utils.FileUtils;
import org.ecomileage.web.common.utils.ServletUtils;
import org.ecomileage.bean.MileageFavourite;
import org.ecomileage.bean.MileageHistory;
import org.ecomileage.bean.MileageTransfer;
import org.ecomileage.bean.Setting;
import org.ecomileage.bean.User;
import org.ecomileage.bean.UserItem;
import org.ecomileage.bean.VehicleCode;
import org.ecomileage.bean.jpa.MileageFavouriteEntity;
import org.ecomileage.bean.jpa.MileageHistoryEntity;
import org.ecomileage.bean.jpa.SettingEntity;
import org.ecomileage.bean.jpa.UserEntity;
import org.ecomileage.bean.jpa.VehicleCodeEntity;
import org.ecomileage.business.service.MileageFavouriteService;
import org.ecomileage.business.service.MileageHistoryService;
import org.ecomileage.business.service.MileageTransferService;
import org.ecomileage.business.service.SettingService;
import org.ecomileage.business.service.UserService;
import org.ecomileage.business.service.VehicleCodeService;
import org.ecomileage.rest.common.AbstractRestController;
import org.ecomileage.rest.common.AuthorizationToken;
import org.ecomileage.web.common.utils.DataUtils;
import org.ecomileage.web.common.ApplicationDefine;
import org.ecomileage.web.common.Login;
/**
 * Spring MVC controller for 'VehicleCode' management.
 */
@RequestMapping("/vehicleCode")
@Controller
public class VehicleCodeRestController extends AbstractRestController{

	@Resource
	private VehicleCodeService vehicleCodeService;
	@Resource
	private UserService userService;
	@Resource
	private MileageHistoryService mileageHistoryService;
	@Resource
	private SettingService settingService;
	@Resource
	private MileageFavouriteService mileageFavouriteService;
	@Resource
	private MileageTransferService mileageTransferService;
	//bike_start,sub_scan_wifi_2 screen
	@RequestMapping( value="/checkBikeCertificate",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findOne(
	HttpSession session,
	@RequestHeader(value="token",required=false) String token
		) {
		UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		try {
			HashMap<String, Object> ret = new HashMap<>();
			User user= userService.findById(userItem.getId());
			if(user.getCertificateBikeType() != null ){
				ret.put("certificateFirst", false);
				ret.put("certificateBikeType", user.getCertificateBikeType());
			}else {
				ret.put("certificateFirst", true);
			}
			return SUCCESS(ret);
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
	}
	
	//transfer_start,pub_start screen
	@RequestMapping( value="/checkTranferCertificate",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> checkTranferCertificate(
	HttpSession session,
	@RequestHeader(value="token",required=false) String token
		) {
		UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		try {
			HashMap<String, Object> ret = new HashMap<>();
			User user= userService.findById(userItem.getId());
			Short typeCertificate = null;
			if(user.getCertificateBikeType() != null) {
				typeCertificate = user.getCertificateBikeType();
			}
			if(user.getCertificateTranferType() != null) {
				typeCertificate = user.getCertificateTranferType();
			}
			if(typeCertificate != null ){
				ret.put("certificateFirst", false);
				ret.put("certificateTransferType", typeCertificate);
			}else {
				ret.put("certificateFirst", true);
				ret.put("certificateTransferType", user.getCertificateBikeType());
			}
			return SUCCESS(ret);
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
	}
	//bike_start_nfc,bike_start_qr screen
	@RequestMapping( value="/bike-start",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> bike_start(
	HttpSession session,
	@RequestHeader(value="token",required = false) String token,
	@RequestParam (value="serialNumber",required = true) String serialNumber
		) {
		UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		try {
			VehicleCode v= vehicleCodeService.findBySerialNumberAndUserId(serialNumber,userItem.getId());
			HashMap<String, Object> data = new HashMap<>();
			if(v != null){
				data.put("vehicleCodeId", v.getId());
				return SUCCESS(data);
			}else {
				return FAIL("Bike is not exists");
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	}
	//bike_register screen
	@RequestMapping( value="/registerBike",
			method = {RequestMethod.POST, RequestMethod.GET},
			
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> registerBike(
	HttpSession session,
	@RequestHeader(value="token",required = false) String token
		) {
		UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		User u = userService.findById(userItem.getId());
		VehicleCodeEntity vehicle = vehicleCodeService.findByUserId(u.getId());
		try {
			if(vehicle != null) {
				return FAIL("This user registered bike");
			}else {
				VehicleCode v = new VehicleCode();
				v.setLocation(u.getAddress());
				v.setPhone(u.getPhone());
				v.setPostCode(u.getPostcode());
				v.setCreateDate(new Date());
				v.setUpdateDate(new Date());
				v.setTypeSend(ApplicationDefine.VehicleCode_BikeTyeSend.Watting.getCode());
				v.setStatus(ApplicationDefine.VehicleCode_BikeStatus.Watting.getCode());
				v.setTypeVehicle(ApplicationDefine.VehicleCode_TypeVehicle.Bike.getCode());
				v.setTypeRegister(ApplicationDefine.VehicleCode_BikeTyeRegister.NotRegister.getCode());
				v.setRegisterDate(new Date());
				v.setUserId(u.getId());
				vehicleCodeService.create(v);
				return SUCCESS();
				
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	}
	
//	@RequestMapping( value="/updateBike",
//			method = {RequestMethod.POST, RequestMethod.GET},
//			
//			produces = MediaType.APPLICATION_JSON_VALUE)
//    @ResponseStatus(HttpStatus.OK)
//	@ResponseBody
//	public HashMap<String, Object> updateBike(
//	HttpSession session,
//	@RequestHeader(value="token",required = false) String token
//		) {
//		
//		try {
//
//			List<User> listUser = userService.findAll();
//			for (User u : listUser) {
//				List<VehicleCodeEntity> list = vehicleCodeService.findByUserId(u.getId());
//				if(list == null || list.size() ==0) {
//					VehicleCode v = new VehicleCode();
//					v.setLocation(u.getAddress());
//					v.setPhone(u.getPhone());
//					v.setPostCode(u.getPostcode());
//					v.setCreateDate(new Date());
//					v.setUpdateDate(new Date());
//					v.setTypeSend(ApplicationDefine.VehicleCode_BikeTyeSend.Watting.getCode());
//					v.setStatus(ApplicationDefine.VehicleCode_BikeStatus.Watting.getCode());
//					v.setTypeVehicle(ApplicationDefine.VehicleCode_TypeVehicle.Bike.getCode());
//					v.setTypeRegister(ApplicationDefine.VehicleCode_BikeTyeRegister.NotRegister.getCode());
//					v.setRegisterDate(new Date());
//					v.setUserId(u.getId());
//					vehicleCodeService.create(v);
//				}
//			}
//			
//				return SUCCESS();
//			
//			
//		} catch (Exception e) {
//			e.printStackTrace();
//			return ERROR("HAVE ERROR: "+e);
//		}
//		
//	}
	//bike_certification_2/bike_certification_3 screen
	@RequestMapping( value="/certificateBike",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> certificate(
	HttpSession session,
	@RequestHeader(value="token",required = false) String token,
	@RequestParam (value="serialNumber",required = true) String serialNumber,
	@RequestParam (value="typeCertificate",required = true) Short typeCertificate ,
	@RequestParam (value="image",required = false) MultipartFile image
		) {
		UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		try {
			User user= userService.findById(userItem.getId());
			VehicleCode v= vehicleCodeService.findBySerialNumberAndUserId(serialNumber,user.getId());
			if(v != null){
				v.setStatus(ApplicationDefine.VehicleCode_BikeStatus.Approval.getCode());
				v.setTypeSend(typeCertificate);
				if(image!=null && image.getSize() >0) {
					try {
						v.setImageName(image.getOriginalFilename());
						v.setImageUrl(FileUtils.saveFile(image));
						v.setTypeCertificate(ApplicationDefine.VehicleCode_BikeTyeRegister.Register.getCode());
					} catch (Exception e) {
						e.getCause();
					}
				}
				v.setTypeCertificate(typeCertificate);
				vehicleCodeService.update(v);
				user.setCertificateBikeType(typeCertificate);
				user.setCertificateTranferType(typeCertificate);
				userService.update(user);
				return SUCCESS();
			}else {
				return FAIL("Bike is not exists");
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	}
	//bike_end_history screen
	@RequestMapping( value="/bike-end",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> bike(
	HttpSession session,
	@RequestHeader(value="token",required = false) String token,
	@RequestParam (value="file",required = false) MultipartFile file,
	@RequestParam (value="fromTime",required = false) Long fromTime,
	@RequestParam (value="toTime",required = false) Long toTime,
	@RequestParam (value="time",required = false) String time,
	@ModelAttribute MileageHistory m

		) {
		HashMap<String, Object> ret = new HashMap<>();
		UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		try {
			Short status = m.getStatus();
			User user= userService.findById(userItem.getId());
			m.setUserId(user.getId());
			m.setUpdateDate(new Date());
			m.setCreateDate(new Date());
			ZipInputStream  zipStream = new ZipInputStream(file.getInputStream());
			zipStream.getNextEntry();
			Scanner sc = new Scanner(zipStream);
			StringBuilder str = new StringBuilder();
			while (sc.hasNextLine()) {
				str.append(sc.nextLine());
				str.append("\n");
			}
			Date startDate = new Date(fromTime);
			m.setStartTime(startDate);
			m.setEndTime(new Date(toTime));
			m.setJourney(str.toString());
			m.setType(ApplicationDefine.MileageHistory_Type.Bike.getCode());
			if(m.getStatus() == ApplicationDefine.MileageHistory_Status.NotSendRequest.getCode()) {
				m.setStatus(ApplicationDefine.MileageHistory_Status.NotSendRequest.getCode());
			}else {
				m.setStatus(ApplicationDefine.MileageHistory_Status.SendRequestAndNotConfirmed.getCode());
				m.setIsAdminApproval(true);
			}
			
			m = mileageHistoryService.create(m);
			boolean fileUpload = false;
			if(status == ApplicationDefine.MileageHistory_Status.RecivePoint.getCode()) {
				m.setStatus(ApplicationDefine.MileageHistory_Status.SendRequestAndNotConfirmed.getCode());
				fileUpload=ServletUtils.sendTrackingFileToClientServer(user.getId(), m.getId(), startDate, file);
				ret.put("uploadFileSuccess", fileUpload);
			}
			
			return SUCCESS(ret);
			
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	}
	
	//bike_ing screen
	@RequestMapping( value="/bike-transfer",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> tranfer(
	HttpSession session,
	@RequestHeader(value="token",required = false) String token,
	@RequestParam (value="file",required = false) MultipartFile file,
	@RequestParam (value="fromTime",required = false) Long fromTime,
	@RequestParam (value="toTime",required = false) Long toTime,
	@RequestParam (value="time",required = false) String time,
	@ModelAttribute MileageHistory m

		) {
		UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		try {
			HashMap<String, Object> data = new HashMap<>();
			if(m.getMileageTranferId() == null) {
				MileageTransfer mf = new MileageTransfer();
				mf.setUserId(userItem.getId());
				mf.setCreateDate(new Date());
				mf.setUpdateDate(new Date());
				mf =mileageTransferService.create(mf);
				m.setMileageTranferId(mf.getId());
				data.put("mileageTranferId", mf.getId());
			}else {
				data.put("mileageTranferId", m.getMileageTranferId());
			}
			User user= userService.findById(userItem.getId());
			m.setUserId(user.getId());
			m.setUpdateDate(new Date());
			m.setCreateDate(new Date());
			ZipInputStream  zipStream = new ZipInputStream(file.getInputStream());
			zipStream.getNextEntry();
			Scanner sc = new Scanner(zipStream);
			StringBuilder str = new StringBuilder();
			while (sc.hasNextLine()) {
				str.append(sc.nextLine());
				str.append("\n");
			}
			
			m.setStartTime(new Date(fromTime));
			m.setEndTime(new Date(toTime));
			m.setJourney(str.toString());
			m.setType(ApplicationDefine.MileageHistory_Type.Bike.getCode());
			mileageHistoryService.create(m);
			data.put("typeCertificate", user.getCertificateBikeType());		
			return SUCCESS(data);
			
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	}
	
	//pub_end, transfer_bus_end screen
	@RequestMapping( value="/pub-transfer",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> tranfer_bike(
	HttpSession session,
	@RequestHeader(value="token",required = false) String token,
	@RequestParam (value="fromTime",required = false) Long fromTime,
	@RequestParam (value="toTime",required = false) Long toTime,
	@ModelAttribute MileageHistory m

		) {
		UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		try {
			HashMap<String, Object> data = new HashMap<>();
			if(m.getMileageTranferId() == null) {
				MileageTransfer mf = new MileageTransfer();
				mf.setUserId(userItem.getId());
				mf.setCreateDate(new Date());
				mf.setUpdateDate(new Date());
				mf =mileageTransferService.create(mf);
				m.setMileageTranferId(mf.getId());
				data.put("mileageTranferId", mf.getId());
			}else {
				data.put("mileageTranferId", m.getMileageTranferId());
			}
			VehicleCode v = vehicleCodeService.findById(m.getVehicleCodeId());
			User user= userService.findById(userItem.getId());
			m.setUserId(user.getId());
			m.setUpdateDate(new Date());
			m.setCreateDate(new Date());
			m.setStartTime(new Date(fromTime));
			m.setEndTime(new Date(toTime));
			m.setType(v.getTypeVehicle());
			m.setTotalReduceCo2(0f);
			m.setStatus(ApplicationDefine.MileageHistory_Status.NotSendRequest.getCode());
			List<SettingEntity> listSetting =  settingService.findByDate(new Date());
			if(listSetting != null && listSetting.size() > 0) {
				SettingEntity s = listSetting.get(0);
				m.setPoint(Float.valueOf(s.getTranferPointPerKm()));
			}else {
				m.setPoint(0f);
			}
			mileageHistoryService.create(m);
			data.put("typeCertificate", user.getCertificateBikeType());		
			
			return SUCCESS(data);
			
			
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	}
	
	//pub_end, transfer_end screen
	@RequestMapping( value="/transfer-end",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> tranfer_end(
	HttpSession session,
	@RequestHeader(value="token",required = false) String token,
	@RequestParam (value="fromTime",required = false) Long fromTime,
	@RequestParam (value="toTime",required = false) Long toTime,
	@RequestParam (value="typeCertificate",required = true) Short typeCertificate ,
	@ModelAttribute MileageHistory m

		) {
		UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		try {
			VehicleCode v = vehicleCodeService.findById(m.getVehicleCodeId());
			User user= userService.findById(userItem.getId());
			m.setUserId(user.getId());
			m.setUpdateDate(new Date());
			m.setCreateDate(new Date());
			m.setStartTime(new Date(fromTime));
			m.setEndTime(new Date(toTime));
			m.setType(v.getTypeVehicle());
			m.setTypeCertificate(typeCertificate);
			m.setTotalReduceCo2(0f);
			if(m.getMileageTranferId() == null) {
				m.setStatus(ApplicationDefine.MileageHistory_Status.TranferButNotBike.getCode());
			}else {
				m.setStatus(ApplicationDefine.MileageHistory_Status.NotSendRequest.getCode());
			}
			List<SettingEntity> listSetting =  settingService.findByDate(new Date());
			if(listSetting != null && listSetting.size() > 0) {
				SettingEntity s = listSetting.get(0);
				m.setPoint(Float.valueOf(s.getTranferPointPerKm()));
			}else {
				m.setPoint(0f);
			}
			mileageHistoryService.create(m);
			return SUCCESS();
			
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	}
	
	//history_bike screen
	@RequestMapping( value="/bike-history",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> bike_history(
	HttpSession session,
	@RequestHeader(value="token",required = false) String token,
	@RequestParam(value="page",defaultValue="1") Integer page
		) {
		UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		User user = userService.findById(userItem.getId());
		try {
			HashMap<String, Object> data = new HashMap<>();
			Short[] type = new Short[1];
			type[0] = ApplicationDefine.MileageHistory_Type.Bike.getCode();
			data.put("total_mileage_old", user.getTotalMileageOld());
			data.put("total_active_old", user.getTotalActiveOld());
			data.put("total_mileage", mileageHistoryService.countTotalMileageByUserId(userItem.getId(),type));
			data.put("total_active",  mileageHistoryService.countActiveByUserId(userItem.getId(),type));
			data.put("drive_mileage", mileageHistoryService.getBikePointByUserId(userItem.getId()));
			
			Page<MileageHistoryEntity> list = mileageHistoryService.listPagingHistory(user.getId(), type, page, 10);
			for (MileageHistoryEntity i : list.getContent()) {
				i.setJourney(null);
				i.setUser(null);
				i.setVehicleCode(null);
			}
			data.put("listHistory", list.getContent());
			data.put("totalPages", list.getTotalPages());
			data.put("currentPage", page);
			return SUCCESS(data);
			
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	}
	
	//history_bike_detail screen
	@RequestMapping( value="/bike-history-detail",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> bike_history_detail(
	HttpSession session,
	@RequestHeader(value="token",required = false) String token,
	@RequestParam(value="id",defaultValue="1") Integer id
		) {
		UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		User user = userService.findById(userItem.getId());
		try {
			MileageHistory m = mileageHistoryService.findById(id);
			if(m != null){
				if(m.getIsAdminApproval() ==null) {
					m.setIsAdminApproval(false);
				}
				return SUCCESS(m);
			}else {
				return FAIL("History is not exists");
			}
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	}
	
	//history_transfer screen
	@RequestMapping( value="/transfer-history",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> transfer_history(
	HttpSession session,
	@RequestHeader(value="token",required = false) String token,
	@RequestParam(value="page",defaultValue="1") Integer page
		) {
		UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		User user = userService.findById(userItem.getId());
		try {
			HashMap<String, Object> data = new HashMap<>();
			List<HashMap<String, Object>> listHistory = new ArrayList<>();
			HashMap<String, Object> item ;
			
			Short type[] = new Short[2];
			type[0] = ApplicationDefine.MileageHistory_Type.Bus.getCode();
			type[1] = ApplicationDefine.MileageHistory_Type.Subway.getCode();
			data.put("transfer_point", mileageHistoryService.getTranferPointByUserId(userItem.getId()));
			Page<MileageHistoryEntity> list = mileageHistoryService.listPagingHistory(user.getId(), type, page, 10);
			for (MileageHistoryEntity i : list.getContent()) {
				item = new HashMap<>();
				item.put("id", i.getId());
				item.put("createDate", i.getCreateDate());
				if(i.getVehicleCode().getTypeVehicle() == ApplicationDefine.VehicleCode_TypeVehicle.Bus.getCode()) {
					item.put("typeHistory", 1);
				}else if(i.getVehicleCode().getTypeVehicle() == ApplicationDefine.VehicleCode_TypeVehicle.Subway.getCode()) {
					if(i.getTypeCertificate() == ApplicationDefine.MileageHistory_TypeCertificate.Wifi.getCode()) {
						item.put("typeHistory", 3);
					}else {
						item.put("typeHistory", 2);
					}
				}
				item.put("subWayStation", i.getVehicleCode().getSubwayStationName());
				item.put("subWayStationStart", i.getSubwayStationStart());
				item.put("subWayStationFinish", i.getSubwayStationFinish());
				item.put("subWayTimeStart", DataUtils.parseStringFromDate(i.getStartTime(), "HH:mm"));
				item.put("stationFinish", DataUtils.parseStringFromDate(i.getEndTime(), "HH:mm"));
				item.put("time", DataUtils.parseStringFromDate(i.getStartTime(), "HH:mm"));
				item.put("point", i.getPoint());
				item.put("status", i.getStatus());
				item.put("location", i.getVehicleCode().getBusCompanyName());
				item.put("busNumber", i.getVehicleCode().getBusNo());
				listHistory.add(item);
			}
			data.put("listHistory", listHistory);
			data.put("totalPages", list.getTotalPages());
			data.put("currentPage", page);
			return SUCCESS(data);
			
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	}
	
	//history_transfer, history_bike screen
	@RequestMapping( value="/delete-history",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> delete(
	HttpSession session,
	@RequestHeader(value="token",required = false) String token,
	@RequestParam(value="id",defaultValue="1") Integer id
		) {
		//UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		//User user = userService.findById(userItem.getId());
		try {
			MileageHistory m = mileageHistoryService.findById(id);
			if(m != null){
				m.setIsDelete(true);
				mileageHistoryService.update(m);
				if(m.getMileageFavouriteId()!= null) {
					mileageFavouriteService.delete(m.getMileageFavouriteId());
				}
				return SUCCESS();
			}else {
				return FAIL("History is not exists");
			}
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	}
	
	//history_bike_detail screen
	@Transactional
	@RequestMapping( value="/favourite",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> favourite(
	HttpSession session,
	@RequestHeader(value="token",required = false) String token,
	@RequestParam(value="id",required = true) Integer id
		) {
		UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		//User user = userService.findById(userItem.getId());
		try {
			HashMap<String, Object> data=  new HashMap<>();
			MileageHistory m = mileageHistoryService.findById(id);
			if(m.getIsFavourite() == false) {
				
				Page<MileageFavouriteEntity> pageList = mileageFavouriteService.listPagingByUserId(1, 3, userItem.getId());
				if(pageList.getContent() != null && pageList.getContent().size() >=3) {
					data.put("maximumFavourite", true);
					data.put("like", false);
				}else {
					data.put("maximumFavourite", false);
					data.put("like", true);
					MileageFavourite mf = new MileageFavourite();
					mf.setLatStart(m.getLatStart());
					mf.setLongStart(m.getLongStart());
					mf.setLatEnd(m.getLatEnd());
					mf.setLongEnd(m.getLongEnd());
					mf.setUpdateDate(new Date());
					mf.setCreateDate(new Date());
					mf.setUserId(userItem.getId());
					mf =mileageFavouriteService.create(mf);
					m.setMileageFavouriteId(mf.getId());
					m.setIsFavourite(true);
					mileageHistoryService.update(m);
				}
				return SUCCESS(data);
			}else {
				mileageFavouriteService.delete(m.getMileageFavouriteId());
				m.setIsFavourite(false);
				m.setMileageFavouriteId(null);
				mileageHistoryService.update(m);
				data.put("like", false);
				return SUCCESS(data);
			}
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	}
	
	//history_bike_detail screen
	@RequestMapping( value="/receive-point",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> receivePoint(
	HttpSession session,
	@RequestHeader(value="token",required = false) String token,
	@RequestParam(value="id",required =true) Integer id
		) {
		try {
			UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
			MileageHistory m = mileageHistoryService.findById(id);
			Date now = new Date();
			HashMap<String, Object> data = new HashMap<>();
			List<SettingEntity>  listSetting = settingService.findByDate(now);
			boolean flag = false;
			if(m != null){
				if(listSetting != null && listSetting.size() > 0) {
					SettingEntity s = listSetting.get(0);
					Long maxApprovalEveryDay = mileageHistoryService.countApprovalByUserId(userItem.getId(), now);
					Long maxPointEveryMonth = mileageHistoryService.countApprovalByUserId(userItem.getId(), m.getCreateDate());
					if(maxApprovalEveryDay >= s.getApprovalDateNumber()) {
						data.put("limitRegiterMileage", true);
						flag =true;
					}else {
						data.put("limitRegiterMileage", false);
					}
					if((maxPointEveryMonth + m.getPoint()) > 5000) {
						data.put("limitMaxPoint", true);
						flag =true;
					}else {
						data.put("limitMaxPoint", false);
					}
					
				}else {
					flag =true;
					data.put("limitRegiterMileage", false);
					data.put("limitMaxPoint", false);
					data.put("limitTime", true);
				}
				if(flag) {
					return FAIL(data);
				}
				boolean fileUpload = false;
				HashMap<String, Object> ret =  new HashMap<>();
				m.setIsAdminApproval(true);
				m.setStatus(ApplicationDefine.MileageHistory_Status.SendRequestAndNotConfirmed.getCode());
				fileUpload=ServletUtils.sendTrackingFileToClientServer(userItem.getId(), m.getId(), m.getStartTime(), m.getJourney());
				ret.put("uploadFileSuccess", fileUpload);
				mileageHistoryService.update(m);
				return SUCCESS(ret);
			}else {
				return FAIL("History is not exists");
			}
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	}
	
	//history_bike_detail(button 3- slide 61) screen
	@RequestMapping( value="/register-again",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> again(
	HttpSession session,
	@RequestHeader(value="token",required = false) String token,
	@RequestParam(value="id",required =true) Integer id,
	@RequestParam(value="reason",required =true) String reason
		) {
		try {
			MileageHistory m = mileageHistoryService.findById(id);
			if(m != null){
				m.setIsAdminApproval(true);
				m.setRegisterAgainReason(reason);
				mileageHistoryService.update(m);
				return SUCCESS();
			}else {
				return FAIL("History is not exists");
			}
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	}
	
	//scan_nfc,bus_scan_qr,bus_scan_nfc,scan_qr screen
	@RequestMapping( value="/transfer-start",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> tranfer(
	HttpSession session,
	@RequestHeader(value="token",required = false) String token,
	@RequestParam (value="serialNumber",required = true) String serialNumber
		) {
		try {
//			VehicleCode v= vehicleCodeService.findBySerialNumber(serialNumber);
			VehicleCode v= vehicleCodeService.findBySerialNumberByBusAndSubway(serialNumber);
			HashMap<String, Object> data = new HashMap<>();
			if(v != null){
				data.put("vehicleCodeId", v.getId());
				data.put("typeVehicle", v.getTypeVehicle());
				return SUCCESS(data);
			}else {
				return FAIL("SerialNumber is not exists");
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	}
}



