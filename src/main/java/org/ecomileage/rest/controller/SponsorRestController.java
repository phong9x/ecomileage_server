/*
 * Created on 8 thg 12 2017 ( Time 11:44:32 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.ecomileage.rest.controller;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.json.simple.JSONObject;
import org.json.simple.parser.*;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.ecomileage.web.common.utils.EncryptionUtils;

import org.ecomileage.bean.UserItem;
import org.ecomileage.bean.MileageApply;
import org.ecomileage.bean.MileageHistory;
import org.ecomileage.bean.Payment;
import org.ecomileage.bean.Sponsor;
import org.ecomileage.bean.User;
import org.ecomileage.bean.jpa.CategoryEntity;
import org.ecomileage.bean.jpa.PaymentEntity;
import org.ecomileage.bean.jpa.SponsorEntity;
import org.ecomileage.business.service.CategoryService;
import org.ecomileage.business.service.MileageHistoryService;
import org.ecomileage.business.service.PaymentService;
import org.ecomileage.business.service.SponsorService;
import org.ecomileage.business.service.UserService;
import org.ecomileage.rest.common.AbstractRestController;
import org.ecomileage.rest.common.AuthorizationToken;
import org.ecomileage.web.common.utils.DataUtils;
import org.ecomileage.web.common.ApplicationDefine;
import org.ecomileage.web.common.Login;
/**
 * Spring MVC controller for 'Sponsor' management.
 */
@RequestMapping("/sponsor")
@Controller
public class SponsorRestController extends AbstractRestController{

	@Resource
	private SponsorService sponsorService;
	@Resource
	private PaymentService paymentService;
	@Resource
	private UserService userService;
	@Resource
	private CategoryService categoryService;
	@Resource
	private MileageHistoryService mileageHistoryService;
	
	//sponsor_list screen
	@RequestMapping( value="/list",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findAll(
	@RequestHeader(value="token",required=false) String token
	) {
		UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		try {
			HashMap<String, Object> ret = new HashMap<>();
			Calendar c  = Calendar.getInstance();
			c.set(Calendar.DATE, 1);
			ret.put("totalMoney", paymentService.getTotalSponsor(c.getTime()));
			ret.put("updateDate", DataUtils.parseStringFromDate(c.getTime(), "yyyy.MM.dd")+"기준");
			ret.put("regularSponsor", paymentService.listSponsorBy_TypeSponsorAndMonth(ApplicationDefine.Payment_TypeSponsor.Periodic.getCode() , c.getTime()));
			ret.put("temporarySponsor", paymentService.listSponsorBy_TypeSponsorAndMonth(ApplicationDefine.Payment_TypeSponsor.Temporar.getCode() , c.getTime()));
			ret.put("sponsorPoint", paymentService.listSponsorBy_TypeSponsorAndMonth(ApplicationDefine.Payment_TypeSponsor.UsePoint.getCode() , c.getTime()));
			List<PaymentEntity> list = paymentService.listPagingBy_MonthAndYear(c.getTime());
			List<HashMap<String, Object>> listResult = new ArrayList<>();
			for (PaymentEntity i : list) {
				
				String username = i.getUser().getUsername();
				String typeUser = "";
				if(username == null) {
					username = i.getUser().getFullname();
				}
				if(username.length() <= 4) {
					username = username.substring(0, username.length()-2)+"**";
				}
				if(username.length() >= 5) {
					username = username.substring(0,username.length()-3)+"***";
				}
				
				if(i.getTypeSponsor() == ApplicationDefine.Payment_TypeSponsor.Periodic.getCode()) {
					typeUser="정기후원";
				}else if(i.getTypeSponsor() == ApplicationDefine.Payment_TypeSponsor.Temporar.getCode()) {
					typeUser="일시후원";
				}else {
					typeUser="포인트후원";
				}
				
				
				if(i.getTypeMoney() == ApplicationDefine.Payment_TypeMoney.Money.getCode()) {
					HashMap<String, Object> item = new HashMap<>();
					item.put("username", username);
					item.put("money", i.getMoney());
					item.put("point", "");
					item.put("typeUser", typeUser);
					listResult.add(item);
				}else {
					if(i.getBikePoint() > 0) {
						HashMap<String, Object> item = new HashMap<>();
						item.put("username", username);
						item.put("money", "");
						item.put("point", i.getBikePoint());
						item.put("typeUser", typeUser);
						listResult.add(item);
					}
					
					if(i.getTranferPoint() > 0) {
						HashMap<String, Object> item = new HashMap<>();
						item.put("username", username);
						item.put("money", "");
						item.put("point", i.getTranferPoint());
						item.put("typeUser", typeUser);
						listResult.add(item);
					}
					
					if(i.getPreviousPoint() > 0) {
						HashMap<String, Object> item = new HashMap<>();
						item.put("username", username);
						item.put("money", "");
						item.put("point", i.getPreviousPoint());
						item.put("typeUser", typeUser);
						listResult.add(item);
					}
				}
				
				
			}
			ret.put("list", listResult);
			
			return SUCCESS(ret);
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
	} 
	//sponsor_point screen
	@RequestMapping( value="/sponsor-point",
			method = {RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> sponsor_point(
	@RequestHeader(value="token",required=false) String token,
	HttpSession session
	) throws ParseException {
		UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		HashMap<String, Object> ret =new HashMap<String, Object>();
		try {
			Long totalBikePoint = mileageHistoryService.getBikePointByUserId(userItem.getId());
			Long totalTransferPoint = mileageHistoryService.getTranferPointByUserId(userItem.getId());
			Long totalPreviousPoint = mileageHistoryService.getPreviousPoint(userItem.getId());
			ret.put("totalPoint", totalBikePoint+totalTransferPoint+totalPreviousPoint);
			ret.put("totalBikePoint", totalBikePoint);
			ret.put("totalTransferPoint", totalTransferPoint);
			ret.put("totalPreviousPoint", totalPreviousPoint);
			
			return SUCCESS(ret);
			
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	} 
	//sponsor_point screen
	@Transactional
	@RequestMapping( value="/sponsor-point",method = RequestMethod.POST,produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> transferP(
			HttpSession session,
			@RequestHeader(value="token",required=false) String token, 
			@RequestParam(defaultValue="0") Integer bikePoint, 
			@RequestParam(defaultValue="0") Integer tranferPoint, 
			@RequestParam(defaultValue="0") Integer previousPoint
			){
		UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		try {
			User user= userService.findById(userItem.getId());

			Payment p  = new Payment();
			p.setMoney(bikePoint+tranferPoint+previousPoint);
			p.setBikePoint(bikePoint);
			p.setTranferPoint(tranferPoint);
			p.setPreviousPoint(previousPoint);
			p.setTypePoint(ApplicationDefine.Payment_TypePoint.Bike.getCode());
			p.setCreateDate(new Date());
			p.setStatus(ApplicationDefine.Payment_Status.PaymentSuccess.getCode());
			p.setTypeMoney(ApplicationDefine.Payment_TypeMoney.Point.getCode());
			p.setTypeUse(ApplicationDefine.Payment_TypeUse.Donate.getCode());
			p.setUpdateDate(new Date());
			p.setUserId(userItem.getId());
			p.setTypeSponsor(ApplicationDefine.Payment_TypeSponsor.UsePoint.getCode());
			paymentService.create(p);
			
			HashMap<String, Object> ret =new HashMap<String, Object>();
			Long totalBikePoint = mileageHistoryService.getBikePointByUserId(userItem.getId());
			Long totalTransferPoint = mileageHistoryService.getTranferPointByUserId(userItem.getId());
			Integer totalPreviousPoint = user.getPreviousPoint();
			if(user.getUsername() == null) {
				ret.put("username", user.getFullname());
			}else {
				ret.put("username", user.getUsername());
			}
			
			ret.put("totalPoint", totalBikePoint+totalTransferPoint+totalPreviousPoint);
			ret.put("totalBikePoint", totalBikePoint);
			ret.put("totalTransferPoint", totalTransferPoint);
			ret.put("totalPreviousPoint", totalPreviousPoint);
			
			return SUCCESS(ret);
			
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
	
	}
	//sponsor_pay_reg_1 screen
	@RequestMapping( value="/sponsor-pay-reg-1",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findAllPaging(
	@RequestHeader(value="token",required=false) String token,
	HttpSession session
	) throws ParseException {
		UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		HashMap<String, Object> ret =new HashMap<String, Object>();
		try {
			User u = userService.findById(userItem.getId());
			ret.put("fullname", u.getFullname() );
			ret.put("phone", u.getPhone());
			ret.put("email", u.getEmail());
			ret.put("postcode", u.getPostcode());
			ret.put("address", u.getAddress());
			ret.put("addressDetail", u.getAddressDetail());
			return SUCCESS(ret);
			
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	} 
	//sponsor_pay_reg_2 screen
	@RequestMapping( value="/sponsor-pay-reg-2",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> sponsor(
	@RequestHeader(value="token",required=false) String token,
	HttpSession session
	) throws ParseException {
		HashMap<String, Object> ret =new HashMap<String, Object>();
		try {
			List<CategoryEntity> listMembershipFeeType = categoryService.findByGroupId((short)1);
			for (CategoryEntity i : listMembershipFeeType) {
				i.setName(i.getName()+i.getDecription());
			}
			List<CategoryEntity> listMembershipFee = categoryService.findByGroupId((short)2);
			List<CategoryEntity> listBank = categoryService.findByGroupId((short)3);
			ret.put("listMembershipFeeType", listMembershipFeeType );
			ret.put("listMembershipFee", listMembershipFee);
			ret.put("listBank", listBank);
			return SUCCESS(ret);
			
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	} 
	//sponsor_pay_reg_3  screen
	@RequestMapping( value="/register",
			method = {RequestMethod.POST},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findOne(
		HttpSession session,
		@RequestHeader(value="token",required=false) String token,
		@ModelAttribute Sponsor sponsor,
		@RequestParam(required = false, defaultValue="0") Integer membershipFeeOther
		) {
		UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		try {
			HashMap<String, Object> ret = new HashMap<>();
				if(sponsor.getMembershipFeeId() == 4) {
					sponsor.setMembershipFee(10000);
				}else if(sponsor.getMembershipFeeId() == 5) {
					sponsor.setMembershipFee(20000);
				}else if(sponsor.getMembershipFeeId() == 6) {
					sponsor.setMembershipFee(30000);
				}else {
					sponsor.setMembershipFee(membershipFeeOther);
				}
				sponsor.setUserId(userItem.getId());
				sponsor.setUpdateDate(new Date());
				sponsor.setCreateDate(new Date());
				sponsor.setIsDelete(false);
				sponsor.setSponsorDate(new Date());
				sponsorService.create(sponsor);
				User u = userService.findById(userItem.getId());
				if(u.getUsername() == null) {
					ret.put("username", u.getFullname());
				}else {
					ret.put("username", u.getUsername());
				}
				
				return SUCCESS(ret);

		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	}
}



