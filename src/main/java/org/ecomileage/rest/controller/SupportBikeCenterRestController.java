/*
 * Created on 20 thg 11 2017 ( Time 13:45:04 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.ecomileage.rest.controller;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;


import java.util.ArrayList;
import java.util.Date;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.json.simple.JSONObject;
import org.json.simple.parser.*;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import com.mysql.fabric.xmlrpc.base.Array;

import org.springframework.web.bind.annotation.ModelAttribute;
import org.ecomileage.web.common.utils.EncryptionUtils;

import org.ecomileage.bean.UserItem;
import org.ecomileage.bean.SupportBikeCenter;
import org.ecomileage.bean.jpa.SupportBikeCenterEntity;
import org.ecomileage.business.service.SupportBikeCenterService;
import org.ecomileage.rest.common.AbstractRestController;
import org.ecomileage.rest.common.AuthorizationToken;
import org.ecomileage.web.common.utils.DataUtils;
import org.ecomileage.web.common.ApplicationDefine;
import org.ecomileage.web.common.Login;
/**
 * Spring MVC controller for 'SupportBikeCenter' management.
 */
@RequestMapping("/supportBikeCenter")
@Controller
public class SupportBikeCenterRestController extends AbstractRestController{

	@Resource
	private SupportBikeCenterService supportBikeCenterService;
	
	//info_map screen
	@RequestMapping( value="/map",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findAllPaging(
	@RequestHeader(value="token",required=false) String token,
	@RequestParam Short type,
	HttpSession session
	) throws ParseException {
		//UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		HashMap<String, Object> ret =new HashMap<String, Object>();
		List<Map<String, Object>> list = new ArrayList<>();
		try {
			HashMap<String, Object> params = new HashMap<>();
			params.put("type", type);
			Page<SupportBikeCenterEntity> listPage = supportBikeCenterService.filterAdmin(params, 1, Integer.MAX_VALUE);
			for (SupportBikeCenterEntity i : listPage.getContent()) {
				HashMap<String , Object> item =  new HashMap<>();
				item.put("id", i.getId());
				item.put("name", i.getName());
				item.put("lat", i.getLatitude());
				item.put("lng", i.getLongitude());
				item.put("address", i.getAddress());
				list.add(item);
			}
			ret.put("list", list);
			return SUCCESS(ret);
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	} 
	//info_map_list screen
	@RequestMapping( value="/info",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> info(
	@RequestHeader(value="token",required=false) String token,
	@RequestParam Short type,
	HttpSession session
	) throws ParseException {
		//UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		HashMap<String, Object> ret =new HashMap<String, Object>();
		List<Map<String, Object>> list = new ArrayList<>();
		try {
			HashMap<String, Object> params = new HashMap<>();
			params.put("type", type);
			Page<SupportBikeCenterEntity> listPage = supportBikeCenterService.filterAdmin(params, 1, Integer.MAX_VALUE);
			for (SupportBikeCenterEntity i : listPage.getContent()) {
				HashMap<String , Object> item =  new HashMap<>();
				item.put("id", i.getId());
				item.put("name", i.getName());
				item.put("lat", i.getLatitude());
				item.put("lng", i.getLongitude());
				item.put("address", i.getAddress());
				list.add(item);
			}
			ret.put("list", list);
			return SUCCESS(ret);
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	}
	//info_map_detail  screen
	@RequestMapping( value="/info/detail",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> detail(
	@RequestHeader(value="token",required=false) String token,
	@RequestParam Integer id,
	HttpSession session
	) throws ParseException {
		//UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		HashMap<String, Object> ret =new HashMap<String, Object>();
		try {
			SupportBikeCenterEntity i = supportBikeCenterService.findOne(id);
				HashMap<String , Object> item =  new HashMap<>();
				item.put("id", i.getId());
				item.put("name", i.getName());
				item.put("lat", i.getLatitude());
				item.put("lng", i.getLongitude());
				item.put("address", i.getAddress());
				item.put("imageUrl", i.getImageUrl());
				item.put("totalBikeParking", i.getTotalBikeParking());
				item.put("totalBikeParkingFact", i.getTotalBikeParkingFact());
				item.put("totalDoor", i.getTotalDoors());
				item.put("sourceInformation", i.getSourceInformation());
				item.put("provideInformationDate", i.getCreateDate());
				item.put("feeRental", i.getFeeRental());
				item.put("homepage", i.getHomepage());
				item.put("phone", i.getPhone());
				item.put("type", i.getType());
				item.put("stationName", i.getName());
				item.put("pumpBike", i.getPumpBike());
				item.put("trademark", i.getName());
				item.put("subname", i.getName());
				item.put("operatingTime", i.getOpenTime() +"~"+ i.getCloseTime());
			return SUCCESS(item);
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	}
	
	@RequestMapping( value="/paging",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findAllPaging(
	@RequestParam(value="" , defaultValue ="1") Integer page,
	@RequestHeader(value="token",required=false) String token,
	HttpSession session
	) throws ParseException {
		//UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		HashMap<String, Object> ret =new HashMap<String, Object>();
		try {
			Page<SupportBikeCenterEntity> list = supportBikeCenterService.findAll(page);
			if(list.getContent()!=null){
				ret.put("list", list.getContent());
				ret.put("page", page);
				ret.put("totalPage", list.getTotalPages());
				return SUCCESS(ret);
			}else{
				return FAIL();
			}
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	} 


	@RequestMapping( value="/item/{id}",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findOne(
	@PathVariable("id") Integer id,
	HttpSession session,
	@RequestHeader(value="token",required=false) String token
		) {
		//UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		try {
			SupportBikeCenter item= supportBikeCenterService.findById(id);
			if(item!=null){
				return SUCCESS(item);
			}else{
				return FAIL();
			}
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	}
	
	@RequestMapping( value="/create",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> create(
	HttpSession session,
	@ModelAttribute SupportBikeCenter item
	) {
	try{
			item.setCreateDate(new Date());
			item.setUpdateDate(new Date());
			SupportBikeCenter create= supportBikeCenterService.create(item);
			return SUCCESS(create);
		}catch(Exception e){
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
	}

	@RequestMapping( value="/edit",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> edit(
	HttpSession session,
	@ModelAttribute SupportBikeCenter item
	) {
	try{
			item.setUpdateDate(new Date());
			SupportBikeCenter edit=supportBikeCenterService.update(item);
			return SUCCESS(edit);
		}catch(Exception e){
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
	}

	@RequestMapping( value="/delete/{id}",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> delete(
	@RequestHeader(value="token",required=false) String token,
	@PathVariable("id") Integer id) {
		try{
				supportBikeCenterService.delete(id);
				return SUCCESS();
		}catch(Exception e){
				e.printStackTrace();
				return ERROR("HAVE ERROR: "+e);
		}
	}
	
}



