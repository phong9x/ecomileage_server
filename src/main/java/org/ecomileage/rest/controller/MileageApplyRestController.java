/*
 * Created on 6 thg 12 2017 ( Time 13:19:16 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.ecomileage.rest.controller;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Date;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.json.simple.JSONObject;
import org.json.simple.parser.*;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.ecomileage.web.common.utils.EncryptionUtils;

import org.ecomileage.bean.UserItem;
import org.ecomileage.bean.Category;
import org.ecomileage.bean.MileageApply;
import org.ecomileage.bean.MileageBackup;
import org.ecomileage.bean.MileageHistory;
import org.ecomileage.bean.Payment;
import org.ecomileage.bean.User;
import org.ecomileage.bean.jpa.CategoryEntity;
import org.ecomileage.bean.jpa.MileageApplyEntity;
import org.ecomileage.bean.jpa.PaymentEntity;
import org.ecomileage.business.service.CategoryService;
import org.ecomileage.business.service.MileageApplyService;
import org.ecomileage.business.service.MileageHistoryService;
import org.ecomileage.business.service.PaymentService;
import org.ecomileage.business.service.UserService;
import org.ecomileage.rest.common.AbstractRestController;
import org.ecomileage.rest.common.AuthorizationToken;
import org.ecomileage.web.common.utils.ConstantCommon;
import org.ecomileage.web.common.utils.DataUtils;
import org.ecomileage.web.common.ApplicationDefine;
import org.ecomileage.web.common.Login;

/**
 * Spring MVC controller for 'MileageApply' management.
 */
@RequestMapping("/mileageApply")
@Controller
public class MileageApplyRestController extends AbstractRestController {

	@Resource
	private MileageApplyService mileageApplyService;
	@Resource
	private UserService userService;
	@Resource
	private MileageHistoryService mileageHistoryService;
	@Resource
	private CategoryService categoryService;
	@Resource
	private PaymentService paymentService;
	
	//my-mileage_1 screen
	@RequestMapping( value="/myMileage1",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> myMileage1(
			HttpSession session,
			@RequestHeader(value="token",required=false) String token){
		UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		try {
			int isOfficalMember = 0;
			HashMap<String, Object> ret = new HashMap<>();
			User user= userService.findById(userItem.getId());
			Long totalBikeMileage = mileageHistoryService.getBikePointByUserId(userItem.getId());
			Long totalTransferMileage = mileageHistoryService.getTranferPointByUserId(userItem.getId());
					
			if (user.getRoleId() == 2 || user.getRoleId() == 3) {
				isOfficalMember = 1;
			}
			ret.put("totalMileage", totalBikeMileage+totalTransferMileage+user.getPreviousPoint());
			ret.put("totalBikeMileage", totalBikeMileage);
			ret.put("totalTransferMileage", totalTransferMileage);
			ret.put("previousPoint", user.getPreviousPoint());
			ret.put("isOfficalMember", isOfficalMember);
			ret.put("snsType", user.getSnsType());
			return SUCCESS(ret);
			
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
	}
	//my-mileage_2 screen
	@RequestMapping( value="/myMileage2",method = RequestMethod.GET,produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> myMileage2(
			HttpSession session,
			@RequestHeader(value="token",required=false) String token){
		UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		try {
			
			List<HashMap<String, Object>> listResult = new ArrayList<>();
			List<PaymentEntity> list = paymentService.listPagingBy_UserIdAndTypeMoney(userItem.getId(), ApplicationDefine.Payment_TypeMoney.Point.getCode());
			for (PaymentEntity i : list) {
				HashMap<String, Object> item = new HashMap<>();
				item.put("createDate", i.getCreateDate());
				item.put("point", i.getMoney());
				if(i.getTypeUse() == ApplicationDefine.Payment_TypeUse.Donate.getCode()) {
					item.put("typeUse", "기부");
				}else {
					item.put("typeUse", "물품신청");
				}
				if(i.getTypePoint() == ApplicationDefine.Payment_TypePoint.Bike.getCode()) {
					item.put("typePoint", "주행");
				}else {
					item.put("typePoint", "환승");
				}
				listResult.add(item);
			}
			return SUCCESS(listResult);
			
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
	}
	
	//mileage-apply_bike screen
	@RequestMapping( value="/bike",method = RequestMethod.GET,produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> bike(
			HttpSession session,
			@RequestHeader(value="token",required=false) String token){
		UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		try {
			User u = userService.findById(userItem.getId());
			HashMap<String, Object> ret = new HashMap<>();
			ret.put("totalBikeMileage", mileageHistoryService.getBikePointByUserId(userItem.getId()));
			ret.put("fullname", u.getFullname() );
			ret.put("phone", u.getPhone());
			ret.put("email", u.getEmail());
			ret.put("postcode", u.getPostcode());
			ret.put("address", u.getAddress());
			ret.put("addressDetail", u.getAddressDetail());
			return SUCCESS(ret);
			
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
	}
	
	//mileage-apply_bike screen
	@Transactional
	@RequestMapping( value="/bike",method = RequestMethod.POST,produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> bikeP(
			HttpSession session,
			@RequestHeader(value="token",required=false) String token, 
			@ModelAttribute MileageApply m){
		UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		try {
			Long totalBikeMileage = mileageHistoryService.getBikePointByUserId(userItem.getId());
			if (totalBikeMileage < m.getPointUse()) {
				return FAIL("You have not enough bike point");
			}
			m.setUserId(userItem.getId());
			m.setType(ApplicationDefine.MileageApply_Type.Bike.getCode());
			m.setCreateDate(new Date());
			m.setUpdateDate(new Date());
			m = mileageApplyService.create(m);

			Payment p  = new Payment();
			p.setMoney(m.getPointUse());
			p.setCreateDate(new Date());
			p.setMoney(m.getPointUse());
			p.setStatus(ApplicationDefine.Payment_Status.PaymentSuccess.getCode());
			p.setTypeMoney(ApplicationDefine.Payment_TypeMoney.Point.getCode());
			p.setTypePoint(ApplicationDefine.Payment_TypePoint.Bike.getCode());
			p.setTypeUse(ApplicationDefine.Payment_TypeUse.Apply.getCode());
			p.setUpdateDate(new Date());
			p.setUserId(userItem.getId());
			p.setMileageApplyId(m.getId());
			paymentService.create(p);
			return SUCCESS();
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
	}

	//mileage-apply_transfer screen
	@RequestMapping( value="/transfer",method = RequestMethod.GET,produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> transfer(
			HttpSession session,
			@RequestHeader(value="token",required=false) String token){
		UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		try {
			HashMap<String, Object> ret = new HashMap<>();
			List<CategoryEntity> categories = categoryService.findByGroupId(ConstantCommon.CATEGORY_MILEAGEAPPLY_TRANSFER);
			ret.put("totalTransferMileage", mileageHistoryService.getTranferPointByUserId(userItem.getId()));
			ret.put("categories", categories);
			return SUCCESS(ret);
			
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
	}
	
	//mileage-apply_transfer screen	
	@Transactional
	@RequestMapping( value="/transfer",method = RequestMethod.POST,produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> transferP(
			HttpSession session,
			@RequestHeader(value="token",required=false) String token, @ModelAttribute MileageApply m){
		UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		try {
			Long totalTransferMileage = mileageHistoryService.getTranferPointByUserId(userItem.getId());
			if (totalTransferMileage < m.getPointUse()) {
				return FAIL("You have not enough tranfer point");
			}
			User user= userService.findById(userItem.getId());
			m.setUserId(user.getId());
			m.setType(ApplicationDefine.MileageApply_Type.Tranfer.getCode());
			m.setCreateDate(new Date());
			m.setCreateDate(new Date());
			m = mileageApplyService.create(m);
			
			Payment p  = new Payment();
			p.setMoney(m.getPointUse());
			p.setCreateDate(new Date());
			p.setMoney(m.getPointUse());
			p.setStatus(ApplicationDefine.Payment_Status.PaymentSuccess.getCode());
			p.setTypeMoney(ApplicationDefine.Payment_TypeMoney.Point.getCode());
			p.setTypePoint(ApplicationDefine.Payment_TypePoint.Tranfer.getCode());
			p.setTypeUse(ApplicationDefine.Payment_TypeUse.Apply.getCode());
			p.setUpdateDate(new Date());
			p.setUserId(userItem.getId());
			p.setMileageApplyId(m.getId());
			paymentService.create(p);
			
			return SUCCESS();
			
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
	}
	
	@RequestMapping(value = "/all", method = { RequestMethod.POST,RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findAll(@RequestHeader(value = "token", required = false) String token) {
		try {
			List<MileageApply> list = mileageApplyService.findAll();
			return SUCCESS(list);
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: " + e);
		}
	}

	@RequestMapping(value = "/paging", method = { RequestMethod.POST,RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findAllPaging(@RequestParam(value = "", defaultValue = "1") Integer page,
			@RequestHeader(value = "token", required = false) String token, HttpSession session) throws ParseException {
		HashMap<String, Object> ret = new HashMap<String, Object>();
		try {
			Page<MileageApplyEntity> list = mileageApplyService.findAll(page);
			if (list.getContent() != null) {
				ret.put("list", list.getContent());
				ret.put("page", page);
				ret.put("totalPage", list.getTotalPages());
				return SUCCESS(ret);
			} else {
				return FAIL();
			}
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: " + e);
		}

	}

	@RequestMapping(value = "/item/{id}", method = { RequestMethod.POST,RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findOne(@PathVariable("id") Integer id, HttpSession session,
			@RequestHeader(value = "token", required = false) String token) {
		try {
			MileageApply item = mileageApplyService.findById(id);
			if (item != null) {
				return SUCCESS(item);
			} else {
				return FAIL();
			}
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: " + e);
		}
	}

}
