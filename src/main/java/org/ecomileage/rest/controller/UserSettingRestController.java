/*
 * Created on 16 thg 10 2017 ( Time 11:20:38 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.ecomileage.rest.controller;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Date;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.json.simple.JSONObject;
import org.json.simple.parser.*;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.ecomileage.bean.User;
import org.ecomileage.bean.UserItem;
import org.ecomileage.bean.jpa.UserSettingEntity;
import org.ecomileage.business.service.UserService;
import org.ecomileage.rest.common.AbstractRestController;
import org.ecomileage.rest.common.AuthorizationToken;
import org.ecomileage.web.common.utils.DataUtils;
import org.ecomileage.web.common.utils.EncryptionUtils;
import org.ecomileage.web.common.Login;
/**
 * Spring MVC controller for 'UserSetting' management.
 */
@RequestMapping("/userSetting")
@Controller
public class UserSettingRestController extends AbstractRestController{

	@Resource
	private UserService userService;

	//certification screen
	@RequestMapping( value="",
			method = {RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findOne(
	HttpSession session,
	@RequestHeader(value="token",required=false) String token
		) {
		UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		try {
			User item= userService.findById(userItem.getId());
			HashMap<String, Object> ret = new HashMap<>();
			if(item!=null){
				if(item.getCertificateBikeType() == null) {
					item.setCertificateBikeType((short)0);
				}
				if(item.getCertificateTranferType() == null) {
					item.setCertificateTranferType((short)0);
				}
				if(item.getCertificateTranferWifi() == null) {
					item.setCertificateTranferWifi((short)0);
				}
				ret.put("certificateBikeType", item.getCertificateBikeType());
				ret.put("certificateTranferType", item.getCertificateTranferType());
				ret.put("certificateTranferWifi", item.getCertificateTranferWifi());
				return SUCCESS(ret);
			}else{
				return FAIL();
			}
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	}
	//certification screen
	@RequestMapping( value="",
			method = {RequestMethod.POST},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> setting(
	HttpSession session,
	@RequestHeader(value="token",required=false) String token,
	@ModelAttribute User user
		) {
		UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		try {
			User item= userService.findById(userItem.getId());
			HashMap<String, Object> ret = new HashMap<>();
			if(item!=null){
				item.setCertificateBikeType(user.getCertificateBikeType());
				item.setCertificateTranferType(user.getCertificateTranferType());
				item.setCertificateTranferWifi(user.getCertificateTranferWifi());
				User update = userService.update(item);
				ret.put("certificateBikeType", update.getCertificateBikeType());
				ret.put("certificateTranferType", update.getCertificateTranferType());
				ret.put("certificateTranferWifi", update.getCertificateTranferWifi());
				return SUCCESS(ret);
			}else{
				return FAIL();
			}
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	}
}
	



