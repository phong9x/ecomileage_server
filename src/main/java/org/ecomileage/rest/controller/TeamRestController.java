/*
 * Created on 3 thg 11 2017 ( Time 18:12:11 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.ecomileage.rest.controller;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.json.simple.JSONObject;
import org.json.simple.parser.*;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.ecomileage.web.common.utils.EncryptionUtils;
import org.ecomileage.web.common.utils.FileUtils;
import org.ecomileage.bean.UserItem;
import org.ecomileage.bean.Group;
import org.ecomileage.bean.Team;
import org.ecomileage.bean.TeamMember;
import org.ecomileage.bean.jpa.TeamEntity;
import org.ecomileage.bean.jpa.TeamMemberEntity;
import org.ecomileage.business.service.TeamMemberService;
import org.ecomileage.business.service.TeamService;
import org.ecomileage.rest.common.AbstractRestController;
import org.ecomileage.rest.common.AuthorizationToken;
import org.ecomileage.web.common.utils.DataUtils;
import org.ecomileage.web.common.ApplicationDefine;
import org.ecomileage.web.common.Login;
import org.ecomileage.web.common.PageCustom;
/**
 * Spring MVC controller for 'Team' management.
 */
@RequestMapping("/team")
@Controller
public class TeamRestController extends AbstractRestController{

	@Resource
	private TeamService teamService;
	@Resource
	private TeamMemberService teamMemberService;
	//group_search screen
	@RequestMapping( value="/list",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findAllPaging(
	@RequestParam(value="" , defaultValue ="1") Integer page,
	@RequestParam(value="key" , defaultValue ="") String key,
	@RequestHeader(value="token",required=false) String token,
	HttpSession session
	) throws ParseException {
		UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		HashMap<String, Object> ret =new HashMap<String, Object>();
		try {
			HashMap<String, Object> params = new HashMap<>();
			if(key!= null) {
				params.put("name", key);
			}
			params.put("userId", userItem.getId());
			PageCustom<Map<String,Object>> list = teamService.listPagingCustom(params, page, 10);
			if(list.getList() != null){
				ret.put("list", list.getList());
				ret.put("page", page);
				ret.put("totalPage", list.getTotalPages());
				return SUCCESS(ret);
			}else{
				return FAIL();
			}
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	} 
	//group_list  screen
	@RequestMapping( value="/my-group",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> my_group(
	@RequestHeader(value="token",required=false) String token,
	HttpSession session
	) throws ParseException {
		UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		HashMap<String, Object> ret =new HashMap<String, Object>();
		try {
			HashMap<String, Object> params = new HashMap<>();
			params.put("memberId", userItem.getId());
			params.put("userId", userItem.getId());
			List<Map<String,Object>> list = teamService.listMyGroup(params);
			ret.put("list", list);
			return SUCCESS(ret);
			
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	} 
	//group_create  screen
	@RequestMapping( value="/check-group-name",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> group_name(
	@RequestParam(value="" , defaultValue ="1") Integer page,
	@RequestParam(value="name" , defaultValue ="") String name,
	HttpSession session
	) throws ParseException {
		//UserItem userItem = Login.getMobileLogin(session);
		HashMap<String, Object> ret =new HashMap<String, Object>();
		try {
			HashMap<String, Object> params = new HashMap<>();
			if(name!= null) {
				params.put("name", name);
			}
			List<TeamEntity> list =  teamService.findByName(name);
			if(list != null && list.size() > 0){
				return FAIL();
			}else{
				return SUCCESS();
			}
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	} 
	//group_create  screen
	@RequestMapping( value="/checkFullGroup",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> checkFullGroup(
	@RequestHeader(value="token",required=false) String token,
	HttpSession session
	) throws ParseException {
		UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		HashMap<String, Object> ret =new HashMap<String, Object>();
		try {
			List<TeamMemberEntity> list =  teamMemberService.findByUserId(userItem.getId());
			if(list != null && list.size()>= 5 ) {
				ret.put("fullGroup", true);
			}else{
				ret.put("fullGroup", false);
			}
			return SUCCESS(ret);
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	} 
	//group_create  screen
	@RequestMapping( value="/checkMemberFullGroup",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> checkMemberFullGroup(
	@RequestParam Integer userId,
	HttpSession session
	) throws ParseException {
		HashMap<String, Object> ret =new HashMap<String, Object>();
		try {
			List<TeamMemberEntity> list =  teamMemberService.findByUserId(userId);
			if(list != null && list.size()>= 5 ) {
				ret.put("fullGroup", true);
			}else{
				ret.put("fullGroup", false);
			}
			return SUCCESS(ret);
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	} 
	//group_create  screen
	@Transactional
	@RequestMapping( value="/create",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> create(
	HttpSession session,
	@ModelAttribute Team item,
	@RequestParam (required = false)MultipartFile image,
	@RequestParam (value="memberIds",defaultValue="")String memberIds,
	@RequestHeader(value="token",required=false) String token
	) {
	try{
		UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
			item.setIsDelete(false);
			item.setCreateDate(new Date());
			item.setUpdateDate(new Date());
			try {
				if(image!= null && image.getSize() > 0) {
					item.setImageUrl(FileUtils.saveFile(image));
					item.setImageName(image.getName());
				}
			} catch (Exception e) {
				// TODO: handle exception
			}
			Team create= teamService.create(item);
			
			TeamMember t = new TeamMember();
			t.setIsManager(true);
			t.setCreateDate(new Date());
			t.setGroupId(create.getId());
			t.setIsDelete(false);
			t.setMemberId(userItem.getId());
			t.setUpdateDate(new Date());
			teamMemberService.create(t);
			
			if(memberIds != null) {
				String ids[] = memberIds.split(",");
				for (String string : ids) {
					Integer userId = Integer.valueOf(string);
					
					if(userId != userItem.getId()) {
						t = new TeamMember();
						t.setCreateDate(new Date());
						t.setGroupId(create.getId());
						t.setIsDelete(false);
						t.setIsManager(false);
						t.setMemberId(userId);
						t.setUpdateDate(new Date());
						teamMemberService.create(t);
					}
					
				}
			}
			
			return SUCCESS();
		}catch(Exception e){
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
	}
	//group_search   screen
	@Transactional
	@RequestMapping( value="/join-group",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> join(
	HttpSession session,
	@RequestParam (value="groupId",required=true)Integer groupId,
	@RequestHeader(value="token",required=false) String token
	) {
	try{
			HashMap<String, Object> data = new HashMap<>();
			UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
			Long totalGroup = teamMemberService.countGroupByUserId(userItem.getId());
			if(totalGroup >=5) {
				data.put("fullGroup", true);
				return SUCCESS(data);
			}else {
				TeamMemberEntity tm = teamMemberService.findByUserIdAndGroupId(userItem.getId(), groupId);
				if(tm == null) {
					TeamMember t = new TeamMember();
					t.setCreateDate(new Date());
					t.setGroupId(groupId);
					t.setIsDelete(false);
					t.setIsManager(false);
					t.setMemberId(userItem.getId());
					t.setUpdateDate(new Date());
					teamMemberService.create(t);
					data.put("fullGroup", false);
					return SUCCESS(data);
				}else {
					return FAIL("This user joined this group");
				}
			}
			
			
			
		}catch(Exception e){
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
	}
	//group_detail screen
	@RequestMapping( value="/detail",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findOne(
	@RequestParam("groupId") Integer groupId,
	HttpSession session,
	@RequestHeader(value="token",required=false) String token
		) {
		UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		try {
			Team item= teamService.findById(groupId);
			HashMap<String, Object> data = new HashMap<>();
			if(item!=null){
				
				data.put("totalMember", teamMemberService.countMemberByGroupId(item.getId()));
				data.put("name", item.getName());
				data.put("totalMileage", item.getTotalMileage());
				data.put("totalReduceCo2",item.getTotalReduceCo2() );
				data.put("totalTree",DataUtils.calculateTree(item.getTotalReduceCo2()) );
				data.put("deleteDate", item.getDeleteDate());
				
				TeamMemberEntity tm = teamMemberService.findByUserIdAndGroupId(userItem.getId(), groupId);
				boolean isManager = false;
				boolean belongToThisGroup = false;
				boolean suggestManager = false;
				if(tm != null  ) {
					if(tm.getIsManager()) {
						isManager = true;
					}
					belongToThisGroup= true;
				}
				if(tm.getStatus() == ApplicationDefine.TeamMember_Status.SuggestManager.getCode()) {
					suggestManager =true;
				}
				data.put("suggestManager", suggestManager);
				data.put("isManager", isManager);
				data.put("belongToThisGroup", belongToThisGroup);
				return SUCCESS(data);
			}else{
				return FAIL();
			}
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	}
	//group_detail screen
	@RequestMapping( value="/delete",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> delete(
	@RequestParam("groupId") Integer groupId,
	HttpSession session,
	@RequestHeader(value="token",required=false) String token
		) {
		try {
			HashMap<String, Object> data = new HashMap<>();
			Long countMember =  teamMemberService.countMemberByGroupId(groupId);
			data.put("totalMember", countMember);
			if(countMember > 1) {
				Team t = teamService.findById(groupId);
				Calendar cal = Calendar.getInstance();
				t.setUpdateDate(cal.getTime());
				cal.add(Calendar.DATE, 7);
				t.setDeleteDate(cal.getTime());
				teamService.update(t);
				data.put("deleteDate", t.getDeleteDate() );
				data.put("totalMember", countMember );
			}else {
				teamService.update_isDelete(groupId);
			}
			
			return SUCCESS(data);
			
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	}
	//group_detail screen
	@RequestMapping( value="/exitGroup",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> exitGroup(
	@RequestParam("groupId") Integer groupId,
	HttpSession session,
	@RequestHeader(value="token",required=false) String token
		) {
		try {
			
			UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
			teamMemberService.update_isDelete_byGroupIdAndUserId(groupId, userItem.getId());
			Long totalMember = teamMemberService.countMemberByGroupId(groupId);
			if(totalMember == 0) {
				Team t = teamService.findById(groupId);
				t.setIsDelete(true);
				t.setDeleteDate(new Date());
				teamService.update(t);
			}
			return SUCCESS();
			
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	}
	//group_detail_2 screen
	@RequestMapping( value="/list-member",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findAllMember(
	@RequestParam("groupId") Integer groupId,
	@RequestHeader(value="token",required=false) String token,
	HttpSession session
	) throws ParseException {
		UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		HashMap<String, Object> ret =new HashMap<String, Object>();
		try {
			
			HashMap<String, Object> params = new HashMap<>();
			params.put("orderBy", "isManager");
			params.put("groupId", groupId);
			Page<TeamMemberEntity> list = teamMemberService.filterAdmin(params, 1, Integer.MAX_VALUE);
			List<Map<String, Object>> listResult = new ArrayList<>();
			boolean suggestingManager = false;
			for (TeamMemberEntity i : list) {
				HashMap<String, Object> user = new HashMap<>();
				user.put("userId", i.getUser().getId());
				user.put("groupId", i.getTeam().getId());
				user.put("isManager", i.getIsManager());
				user.put("fullname", i.getUser().getFullname());
				user.put("totalMileage", i.getTotalMileage());
				user.put("totalReduceCO2", i.getTotalReduceCo2());
				user.put("totalTree", i.getTotalTree());
				user.put("createDate", i.getCreateDate());
				if(i.getStatus() == ApplicationDefine.TeamMember_Status.SuggestManager.getCode()) {
					suggestingManager = true;
				}
				listResult.add(user);
			}
			ret.put("listMember", listResult);
			ret.put("userId", userItem.getId());
			TeamMemberEntity tm = teamMemberService.findByUserIdAndGroupId(userItem.getId(), groupId);
			if(tm.getIsManager()) {
				ret.put("isManagerGroup", true);
			}else {
				ret.put("isManagerGroup", false);
			}
			ret.put("suggestingManager", suggestingManager);
			return SUCCESS(ret);
			
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	} 
	//group_detail screen
	@RequestMapping( value="/delete-member",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> delete_member(
	@RequestParam(value= "groupId", required = true) Integer groupId,
	@RequestParam(value= "userId", required = true) Integer userId,
	HttpSession session,
	@RequestHeader(value="token",required=false) String token
		) {
		try {
			teamMemberService.update_isDelete_byGroupIdAndUserId(groupId, userId);
			return SUCCESS();
			
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	}
	//group_detail_2  screen
	@RequestMapping( value="/tranfer-manager",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> tranfer_manager(
	@RequestParam(value= "groupId", required = true) Integer groupId,
	@RequestParam(value= "memberIds", required = true) String memberIds,
	HttpSession session,
	@RequestHeader(value="token",required=false) String token
		) {
		try {
			String split[] = memberIds.split(",");
			for (String i : split) {
				Integer userId = Integer.valueOf(i);
				TeamMemberEntity tm = teamMemberService.findByUserIdAndGroupId(userId, groupId);
				tm.setStatus(ApplicationDefine.TeamMember_Status.SuggestManager.getCode());
				teamMemberService.update(tm);
			}
			Team t = teamService.findById(groupId);
			t.setSuggestingManager(true);
			teamService.update(t);
			return SUCCESS();
			
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	}
	//group_detail_3 screen
	@RequestMapping( value="/accpet-manager",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> accpet(
	@RequestParam(value= "groupId", required = true) Integer groupId,
	@RequestParam(value= "accpetManager", required = true) boolean accpetManager,
	HttpSession session,
	@RequestHeader(value="token",required=false) String token
		) {
		try {
			UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
			TeamMemberEntity tm = teamMemberService.findByUserIdAndGroupId(userItem.getId(), groupId);
			HashMap<String, Object> ret = new HashMap<>();
			boolean isManager = false;
			Team t = teamService.findById(groupId);
			
			if(accpetManager && t.getSuggestingManager()) {
				if(tm.getStatus() == ApplicationDefine.TeamMember_Status.SuggestManager.getCode()) {
					tm.setStatus(ApplicationDefine.TeamMember_Status.Accept.getCode());
					tm.setUpdateDate(new Date());
					tm.setIsManager(true);
					teamMemberService.update(tm);
					isManager =true;
				}
				teamMemberService.update_TranformManager(groupId, userItem.getId());
				
				t.setSuggestingManager(false);
				teamService.update(t);
			}else {
				tm.setStatus(ApplicationDefine.TeamMember_Status.Normal.getCode());
				teamMemberService.update(tm);
			}
			ret.put("isManager", isManager);
			return SUCCESS(ret);
			
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	}
}



