/*
 * Created on 6 thg 12 2017 ( Time 13:19:16 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.ecomileage.rest.controller;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;
import java.util.zip.ZipInputStream;
import java.util.Date;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.json.simple.JSONObject;
import org.json.simple.parser.*;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.ecomileage.web.common.utils.EncryptionUtils;
import org.ecomileage.web.common.utils.FileUtils;
import org.ecomileage.web.common.utils.ServletUtils;
import org.ecomileage.bean.UserItem;
import org.ecomileage.bean.Category;
import org.ecomileage.bean.MileageHistory;
import org.ecomileage.bean.Report;
import org.ecomileage.bean.User;
import org.ecomileage.bean.jpa.CategoryEntity;
import org.ecomileage.bean.jpa.ReportEntity;
import org.ecomileage.business.service.CategoryService;
import org.ecomileage.business.service.ReportService;
import org.ecomileage.rest.common.AbstractRestController;
import org.ecomileage.rest.common.AuthorizationToken;
import org.ecomileage.web.common.utils.ConstantCommon;
import org.ecomileage.web.common.utils.DataUtils;
import org.ecomileage.web.common.ApplicationDefine;
import org.ecomileage.web.common.Login;
/**
 * Spring MVC controller for 'Report' management.
 */
@RequestMapping("/report")
@Controller
public class ReportRestController extends AbstractRestController{

	@Resource
	private ReportService reportService;
	@Resource
	private CategoryService categoryService;
	
	//report screen
	@RequestMapping( value="/creat",method = RequestMethod.GET,produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> getReport(
	HttpSession session,
	@RequestHeader(value="token",required = false) String token) {
		try {
			HashMap<String, Object> ret = new HashMap<>();
			UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
			if (userItem == null) {
				return FAIL();
			}
			
			List<CategoryEntity> categories = categoryService.findByGroupId(ConstantCommon.CATEGORY_REPORT);
			ret.put("categories", categories);
			return SUCCESS(ret);
			
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	}
	
	//report screen
	@RequestMapping( value="/creat",method = RequestMethod.POST,produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> report(
	HttpSession session,
	@RequestHeader(value="token",required = false) String token,
	@RequestParam (value="file",required = false) MultipartFile file,
	@RequestParam (value="latitude",required = false) Double latitude,
	@RequestParam (value="longtitude",required = false) Double longtitude,
	@RequestParam (value="title",required = false) String title,
	@RequestParam (value="categoryId",required = false) Integer categoryId,
	@RequestParam (value="content",required = false) String content) {
		try {
			UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
			if (userItem == null) {
				return FAIL();
			}
			Report report = new Report();
			report.setUserId(userItem.getId());
			report.setLatitude(latitude);
			report.setLongtitude(longtitude);
			report.setTitle(title);
			report.setContent(content);
			report.setCreateDate(new Date());
			report.setUpdateDate(new Date());
			report.setCategoryId(categoryId);
			if (file != null) {
				if(file.getSize()>0) {
					try {
						report.setProfileImage(file.getOriginalFilename());
						report.setProfileUrl(FileUtils.saveFile(file));
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			}
			
			report = reportService.create(report);
			return SUCCESS();
			
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	}
		
	@RequestMapping( value="/all",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findAll(
	@RequestHeader(value="token",required=false) String token
	) {
		//UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		try {
			List<Report> list = reportService.findAll();
			return SUCCESS(list);
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
	} 
	
	@RequestMapping( value="/paging",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findAllPaging(
	@RequestParam(value="" , defaultValue ="1") Integer page,
	@RequestHeader(value="token",required=false) String token,
	HttpSession session
	) throws ParseException {
		//UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		HashMap<String, Object> ret =new HashMap<String, Object>();
		try {
			Page<ReportEntity> list = reportService.findAll(page);
			if(list.getContent()!=null){
				ret.put("list", list.getContent());
				ret.put("page", page);
				ret.put("totalPage", list.getTotalPages());
				return SUCCESS(ret);
			}else{
				return FAIL();
			}
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	} 


	@RequestMapping( value="/item/{id}",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findOne(
	@PathVariable("id") Integer id,
	HttpSession session,
	@RequestHeader(value="token",required=false) String token
		) {
		//UserItem userItem = EncryptionUtils.jwtParse(token, UserItem.class);
		try {
			Report item= reportService.findById(id);
			if(item!=null){
				return SUCCESS(item);
			}else{
				return FAIL();
			}
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
		
	}
	
	@RequestMapping( value="/create",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> create(
	HttpSession session,
	@ModelAttribute Report item
	) {
	try{
			item.setUpdateDate(new Date());
			item.setCreateDate(new Date());
			Report create= reportService.create(item);
			return SUCCESS(create);
		}catch(Exception e){
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
	}

	@RequestMapping( value="/edit",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> edit(
	HttpSession session,
	@ModelAttribute Report item
	) {
	try{
			item.setUpdateDate(new Date());
			Report edit=reportService.update(item);
			return SUCCESS(edit);
		}catch(Exception e){
			e.printStackTrace();
			return ERROR("HAVE ERROR: "+e);
		}
	}

	@RequestMapping( value="/delete/{id}",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> delete(
	@RequestHeader(value="token",required=false) String token,
	@PathVariable("id") Integer id) {
		try{
				reportService.delete(id);
				return SUCCESS();
		}catch(Exception e){
				e.printStackTrace();
				return ERROR("HAVE ERROR: "+e);
		}
	}
	
}



