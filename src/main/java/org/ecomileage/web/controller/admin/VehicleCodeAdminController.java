/*
 * Created on 1 thg 11 2017 ( Time 16:50:30 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.ecomileage.web.controller.admin;

import java.util.List;
import java.util.ArrayList;
import java.util.Date;
import java.util.Map;
import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ModelAttribute;
//--- Common classes
import org.ecomileage.web.common.AbstractController;
import org.ecomileage.web.common.ApplicationDefine;
import org.ecomileage.web.common.Pager;
import org.ecomileage.web.common.utils.DataUtils;
import org.ecomileage.web.common.utils.ExcelUtils;
import org.ecomileage.bean.jpa.VehicleCodeEntity;
//--- Entities
import org.ecomileage.bean.VehicleCode;
//--- Services 
import org.ecomileage.business.service.VehicleCodeService;
import org.ecomileage.business.service.UserService;

/**
 * Spring MVC controller for 'VehicleCode' management.
 */
@Controller
@RequestMapping("/auth/vehicleCode")
public class VehicleCodeAdminController extends AbstractController {
	//--- Variables names ( to be used in JSP with Expression Language )
	private static final Integer PAGE_SIZE   = 10;
	private static String nav = "vehicleCode";
	private static final String JSP_LIST   = "admin/vehicleCode/list";
	//--- Main entity service
	@Resource
    private VehicleCodeService vehicleCodeService; // Injected by Spring
	//--- Other service(s)
	@Resource
    private UserService userService; // Injected by Spring

	/*
	 * Page name: bus-code_list
	 * Method   : GET
	 * Purpose  : get bus-code list
	 * */
	@RequestMapping("/bus/list")
	public String list(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam Map<String, Object> params,
			HttpSession session,
			HttpServletRequest request,
			Model model) {
		params.put("typeVehicle", ApplicationDefine.VehicleCode_TypeVehicle.Bus.getCode());
		Page<VehicleCodeEntity> listPage = vehicleCodeService.filterAdmin(params, page, PAGE_SIZE);
		model.addAttribute("activePage", nav);
		model.addAttribute("params", params);
		new Pager<VehicleCodeEntity>(listPage).setSetting(model, request);		
		return getView();
	}

	/*
	 * Page name: bus-code_list
	 * Method   : POST
	 * Function : download data by searching
	 * Purpose  : export to CSV or XLS file
	 * */
	@RequestMapping("/bus/list/download")
	public void bus_download(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam Map<String, Object> params,
			HttpSession session,
			HttpServletResponse response,
			Model model) {
		try {
			params.put("typeVehicle", ApplicationDefine.VehicleCode_TypeVehicle.Bus.getCode());
			Page<VehicleCodeEntity> listPage = vehicleCodeService.filterAdmin(params, page, PAGE_SIZE);
			List<Object> header = new ArrayList<>();
			header.add("번호");
			header.add("고유번호");
			header.add("위치");
			header.add("부여날짜");
			header.add("사용여부");
			header.add("등록일");
			List<List<Object>> listData = null;
			if (listPage.getContent() != null) {
				listData = new ArrayList<>();
				int index =0;
				for (VehicleCodeEntity i : listPage.getContent()) {
					List<Object> listCell = new ArrayList<Object>();
					listCell.add(listPage.getTotalElements() - index);
					listCell.add(i.getSerialNumber());
					listCell.add(i.getLocation());
					listCell.add(DataUtils.parseStringFromDate(i.getRegisterDate(), "yyyy.MM.dd"));
					if(i.getStatus() == ApplicationDefine.VehicleCode_PublicTransportStatus.NotUse.getCode()) {
						listCell.add("미사용");
					}else if(i.getStatus() == ApplicationDefine.VehicleCode_PublicTransportStatus.Use.getCode()) {
						listCell.add("사용");
					}else {
						listCell.add("폐기 ");
					}
					listCell.add(DataUtils.parseStringFromDate(i.getCreateDate(), "yyyy.MM.dd"));
					listData.add(listCell);
					index+=1;
				}
			}
			
			ExcelUtils.exportDocumentFile(response, String.valueOf(params.get("typeExcel")), header, listData);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/*
	 * Page name: bus-code_write
	 * Method   : GET
	 * Purpose  : only get page
	 * */
	@RequestMapping(value = "/bus/create", method = RequestMethod.GET ) 
	public String create(
			HttpSession session,
			Model model) {
		model.addAttribute("activePage", nav);
		model.addAttribute("id", vehicleCodeService.countByTypeVehicle(ApplicationDefine.VehicleCode_TypeVehicle.Bus.getCode()));
		model.addAttribute("now", new Date());
		return getView();
	}

	/*
	 * Page name: bus-code_write
	 * Method   : POST
	 * Purpose  : save information to database that user enter 
	 * */
	@RequestMapping(value = "/bus/create", method = RequestMethod.POST ) 
	public String create(
			HttpSession session,
			@ModelAttribute VehicleCode vehicleCode,
			@RequestParam String registerDate,
			Model model) {
		try {
			vehicleCode.setRegisterDate(DataUtils.parseDate(registerDate, "yyyy/MM/dd"));
			vehicleCode.setTypeVehicle(ApplicationDefine.VehicleCode_TypeVehicle.Bus.getCode());
			vehicleCode.setCreateDate( new Date() );
			vehicleCode.setUpdateDate( new Date() );
			vehicleCodeService.create(vehicleCode);
			return redirectList();
		} catch(Exception e) {
			e.printStackTrace();
			return getView();
		}
	}
	
	/*
	 * Page name: bus-code_detail
	 * Method   : GET
	 * Purpose  : only get page with param is "id" field from jsp page
	 * */
	@RequestMapping(value = "/bus/edit", method = RequestMethod.GET)
	public String update(
	HttpSession session,
	@RequestParam Integer id,
	Model model  ) {
		VehicleCode vehicleCode = vehicleCodeService.findById(id);
		try {
			model.addAttribute("item", vehicleCode);
			model.addAttribute("activePage", nav);
			return getView();
		} catch(Exception e) {
			return JSP_LIST;
		}
	}
	
	/*
	 * Page name: bus-code_detail
	 * Method   : POST
	 * Purpose  : save information to database that user enter and want to change
	 * */
	@RequestMapping(value = "/bus/edit", method = RequestMethod.POST)
	public String update(
	@ModelAttribute VehicleCode item,
	@RequestParam Integer id,
	@RequestParam String registerDate,
	Model model  ) {
		VehicleCode vehicleCode = vehicleCodeService.findById(id);
		try {
			vehicleCode.setSerialNumber( item.getSerialNumber() );
			vehicleCode.setBusCompanyName( item.getBusCompanyName() );
			vehicleCode.setBusNo( item.getBusNo() );
			vehicleCode.setBusNumber( item.getBusNumber() );
			vehicleCode.setLocation( item.getLocation() );
			vehicleCode.setStatus(item.getStatus());
			vehicleCode.setUpdateDate( new Date() );
			vehicleCode.setRegisterDate(DataUtils.parseDate(registerDate, "yyyy/MM/dd"));
			vehicleCode = vehicleCodeService.update(vehicleCode);
			model.addAttribute("item", vehicleCode);
		} catch(Exception e) {
			e.printStackTrace();
		}
		return redirectList();
	}
	
	/*
	 * Page name: subway-code_list
	 * Method   : GET
	 * Purpose  : get subway-code list
	 * */
	@RequestMapping("/subway/list")
	public String subway(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam Map<String, Object> params,
			HttpSession session,
			HttpServletRequest request,
			Model model) {
		params.put("typeVehicle", ApplicationDefine.VehicleCode_TypeVehicle.Subway.getCode());
		Page<VehicleCodeEntity> listPage = vehicleCodeService.filterAdmin(params, page, PAGE_SIZE);
		model.addAttribute("activePage", nav);
		model.addAttribute("params", params);
		new Pager<VehicleCodeEntity>(listPage).setSetting(model, request);		
		return getView();
	}
	
	/*
	 * Page name: subway-code_list
	 * Method   : POST
	 * Function : download data by searching
	 * Purpose  : export to CSV or XLS file
	 * */
	@RequestMapping("/subway/list/download")
	public void subway(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam Map<String, Object> params,
			HttpSession session,
			HttpServletResponse response,
			Model model) {
		try {
			params.put("typeVehicle", ApplicationDefine.VehicleCode_TypeVehicle.Subway.getCode());
			Page<VehicleCodeEntity> listPage = vehicleCodeService.filterAdmin(params, page, Integer.MAX_VALUE);
			List<Object> header = new ArrayList<>();
			header.add("번호");
			header.add("고유번호");
			header.add("위치");
			header.add("부여날짜");
			header.add("사용여부");
			header.add("등록일");
			List<List<Object>> listData = null;
			if (listPage.getContent() != null) {
				listData = new ArrayList<>();
				int index =0;
				for (VehicleCodeEntity i : listPage.getContent()) {
					List<Object> listCell = new ArrayList<Object>();
					listCell.add(listPage.getTotalElements() - index);
					listCell.add(i.getSerialNumber());
					listCell.add(i.getSubwayLineNo()+" "+i.getSubwayStationName()+" "+i.getSubwayDirection()+" "+i.getSubwayDoorNo());
					listCell.add(DataUtils.parseStringFromDate(i.getRegisterDate(), "yyyy.MM.dd"));
					if(i.getStatus() == ApplicationDefine.VehicleCode_PublicTransportStatus.NotUse.getCode()) {
						listCell.add("미사용");
					}else if(i.getStatus() == ApplicationDefine.VehicleCode_PublicTransportStatus.Use.getCode()) {
						listCell.add("사용");
					}else {
						listCell.add("폐기 ");
					}
					listCell.add(DataUtils.parseStringFromDate(i.getCreateDate(), "yyyy.MM.dd"));
					listData.add(listCell);
					index+=1;
				}
			}
			
			ExcelUtils.exportDocumentFile(response, String.valueOf(params.get("typeExcel")), header, listData);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/*
	 * Page name: subway-code_write
	 * Method   : GET
	 * Purpose  : only get page
	 * */
	@RequestMapping(value = "/subway/create", method = RequestMethod.GET ) 
	public String subwaycreate(
			HttpSession session,
			Model model) {
		model.addAttribute("activePage", nav);
		model.addAttribute("id", vehicleCodeService.countByTypeVehicle(ApplicationDefine.VehicleCode_TypeVehicle.Subway.getCode()));
		model.addAttribute("now", new Date());
		return getView();
	}

	/*
	 * Page name: subway-code_write
	 * Method   : POST
	 * Purpose  : save information to database that user enter 
	 * */
	@RequestMapping(value = "/subway/create", method = RequestMethod.POST ) 
	public String subway_create(
			HttpSession session,
			@ModelAttribute VehicleCode vehicleCode,
			@RequestParam String registerDate,
			Model model) {
		try {
			vehicleCode.setRegisterDate(DataUtils.parseDate(registerDate, "yyyy/MM/dd"));
			vehicleCode.setTypeVehicle(ApplicationDefine.VehicleCode_TypeVehicle.Subway.getCode());
			vehicleCode.setCreateDate( new Date() );
			vehicleCode.setUpdateDate( new Date() );
			vehicleCodeService.create(vehicleCode);
			return redirectList();
		} catch(Exception e) {
			e.printStackTrace();
			return getView();
		}
	}
	
	/*
	 * Page name: subway-code_detail
	 * Method   : GET
	 * Purpose  : only get page with param is "id" field from jsp page
	 * */
	@RequestMapping(value = "/subway/edit", method = RequestMethod.GET)
	public String subway(
	HttpSession session,
	@RequestParam Integer id,
	Model model  ) {
		VehicleCode vehicleCode = vehicleCodeService.findById(id);
		try {
			model.addAttribute("item", vehicleCode);
			model.addAttribute("activePage", nav);
			return getView();
		} catch(Exception e) {
			return JSP_LIST;
		}
	}
	
	/*
	 * Page name: subway-code_detail
	 * Method   : POST
	 * Purpose  : save information to database that user enter and want to change
	 * */
	@RequestMapping(value = "/subway/edit", method = RequestMethod.POST)
	public String subway_post(
	@ModelAttribute VehicleCode item,
	@RequestParam Integer id,
	@RequestParam String registerDate,
	Model model  ) {
		VehicleCode vehicleCode = vehicleCodeService.findById(id);
		try {
			vehicleCode.setSerialNumber( item.getSerialNumber() );
			vehicleCode.setSubwayDirection( item.getSubwayDirection() );
			vehicleCode.setSubwayDoorNo(item.getSubwayDoorNo());
			vehicleCode.setSubwayLineNo(item.getSubwayLineNo());
			vehicleCode.setSubwayStationName(item.getSubwayStationName());
			vehicleCode.setLocation( item.getLocation() );
			vehicleCode.setStatus(item.getStatus());
			vehicleCode.setUpdateDate( new Date() );
			vehicleCode.setRegisterDate(DataUtils.parseDate(registerDate, "yyyy/MM/dd"));
			vehicleCode = vehicleCodeService.update(vehicleCode);
			model.addAttribute("item", vehicleCode);
		} catch(Exception e) {
			e.printStackTrace();
		}
		return redirectList();
	}
	
	/*
	 * Page name: bike-code_list
	 * Method   : GET
	 * Purpose  : get bike-code list
	 * */
	@RequestMapping("/bike/list")
	public String bike(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam Map<String, Object> params,
			HttpSession session,
			HttpServletRequest request,
			Model model) {
//		if (params.get("status") == null || params.get("status") == "") {
//			Integer[] statuss = new Integer[2];
//			statuss[0] = (int) ApplicationDefine.VehicleCode_BikeStatus.Watting.getCode();
//			statuss[1] = (int) ApplicationDefine.VehicleCode_BikeStatus.Approval.getCode();
//			params.put("statuss", statuss);
//		}
		params.put("typeVehicle", ApplicationDefine.VehicleCode_TypeVehicle.Bike.getCode());
		Page<VehicleCodeEntity> listPage = vehicleCodeService.filterAdmin(params, page, PAGE_SIZE);
		model.addAttribute("activePage", nav);
		model.addAttribute("params", params);
		new Pager<VehicleCodeEntity>(listPage).setSetting(model, request);		
		return getView();
	}
	
	/*
	 * Page name: bike-code_list
	 * Method   : POST
	 * Function : download data by searching
	 * Purpose  : export to CSV or XLS file
	 * */
	@RequestMapping("/bike/list/download")
	public void bike_download(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam Map<String, Object> params,
			HttpSession session,
			HttpServletResponse response,
			Model model) {
		try {
			params.put("typeVehicle", ApplicationDefine.VehicleCode_TypeVehicle.Bike.getCode());
			Page<VehicleCodeEntity> listPage = vehicleCodeService.filterAdmin(params, 1, Integer.MAX_VALUE);
			List<Object> header = new ArrayList<>();
			header.add("번호");
			header.add("고유번호");
			header.add("아이디");
			header.add("이름");
			header.add("휴대폰번호");
			header.add("우편번호");
			header.add("주소");
			header.add("신청날짜");
			header.add("발송상태");
			header.add("승인상태");
			List<List<Object>> listData = null;
			if (listPage.getContent() != null) {
				listData = new ArrayList<>();
				int index =0;
				for (VehicleCodeEntity i : listPage.getContent()) {
					List<Object> listCell = new ArrayList<Object>();
					listCell.add(listPage.getTotalElements()-index);
					listCell.add(i.getSerialNumber());
					listCell.add(i.getUser().getUsername());

					listCell.add(i.getUser().getFullname());
					listCell.add(i.getPhone());
					listCell.add(i.getPostCode());
					listCell.add(i.getLocation());
					listCell.add(DataUtils.parseStringFromDate(i.getRegisterDate(), "yyyy.MM.dd"));
					if(i.getTypeSend() == ApplicationDefine.VehicleCode_BikeTyeSend.Watting.getCode()) {
						listCell.add("발송전");
					}else {
						listCell.add("발송완료");
					}
					if(i.getStatus() == ApplicationDefine.VehicleCode_BikeStatus.Watting.getCode()) {
						listCell.add("미승인");
					}else if(i.getStatus() == ApplicationDefine.VehicleCode_BikeStatus.Approval.getCode()) {
						listCell.add("승인");
					}else {
						listCell.add("승인취소 ");
					}
					listData.add(listCell);
					index++;
				}
			}
			
			ExcelUtils.exportDocumentFile(response, String.valueOf(params.get("typeExcel")), header, listData);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/*
	 * Page name: bike-code_write
	 * Method   : GET
	 * Purpose  : only get page
	 * */
	@RequestMapping(value = "/bike/create", method = RequestMethod.GET ) 
	public String bike(
			HttpSession session,
			Model model) {
		model.addAttribute("activePage", nav);
		model.addAttribute("id", vehicleCodeService.countByTypeVehicle(ApplicationDefine.VehicleCode_TypeVehicle.Bike.getCode()));
		model.addAttribute("now", new Date());
		return getView();
	}

	/*
	 * Page name: bike-code_write
	 * Method   : POST
	 * Purpose  : save information to database that user enter 
	 * */
	@RequestMapping(value = "/bike/create", method = RequestMethod.POST ) 
	public String bike_create(
			HttpSession session,
			@ModelAttribute VehicleCode vehicleCode,
			@RequestParam Integer userId,
			Model model) {
		try {
			vehicleCode.setTypeVehicle(ApplicationDefine.VehicleCode_TypeVehicle.Bike.getCode());
			vehicleCode.setCreateDate( new Date() );
			vehicleCode.setUpdateDate( new Date() );
			vehicleCode.setUserId(userId);
			vehicleCode.setRegisterDate(new Date());
			vehicleCodeService.create(vehicleCode);
			return redirectList();
		} catch(Exception e) {
			e.printStackTrace();
			return getView();
		}
	}
	
	/*
	 * Page name: bike-code_detail
	 * Method   : GET
	 * Purpose  : only get page with param is "id" field from jsp page
	 * */
	@RequestMapping(value = "/bike/edit", method = RequestMethod.GET)
	public String bike(
	HttpSession session,
	@RequestParam Integer id,
	Model model  ) {
		VehicleCodeEntity vehicleCode = vehicleCodeService.findOne(id);
		try {
			model.addAttribute("item", vehicleCode);
			model.addAttribute("activePage", nav);
			return getView();
		} catch(Exception e) {
			return JSP_LIST;
		}
	}
	
	/*
	 * Page name: bike-code_detail
	 * Method   : POST
	 * Purpose  : save information to database that user enter and want to change
	 * */
	@RequestMapping(value = "/bike/edit", method = RequestMethod.POST)
	public String bike_post(
	@ModelAttribute VehicleCode item,
	@RequestParam Integer id,
	Model model  ) {
		VehicleCode vehicleCode = vehicleCodeService.findById(id);
		try {
			vehicleCode.setSerialNumber(item.getSerialNumber());
			vehicleCode.setPhone(item.getPhone());
			vehicleCode.setPostCode(item.getPostCode());
			vehicleCode.setLocation( item.getLocation() );
			vehicleCode.setTypeSend(item.getTypeSend());
			vehicleCode.setStatus(item.getStatus());
			vehicleCode.setReason(item.getReason());
			vehicleCode.setUpdateDate( new Date() );
			vehicleCode = vehicleCodeService.update(vehicleCode);
			model.addAttribute("item", vehicleCode);
		} catch(Exception e) {
			e.printStackTrace();
		}
		return redirectList();
	}
}
