/*
 * Created on 13 thg 11 2017 ( Time 15:27:08 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.ecomileage.web.controller.admin;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import org.ecomileage.bean.MileageHistory;
//--- Entities
import org.ecomileage.bean.Setting;
import org.ecomileage.bean.jpa.AddressEntity;
import org.ecomileage.bean.jpa.MileageHistoryEntity;
import org.ecomileage.bean.jpa.SettingEntity;
import org.ecomileage.business.service.AddressService;
import org.ecomileage.business.service.MileageHistoryService;
//--- Services 
import org.ecomileage.business.service.SettingService;
//--- Common classes
import org.ecomileage.web.common.AbstractController;
import org.ecomileage.web.common.Pager;
import org.ecomileage.web.common.utils.ConstantCommon;
import org.ecomileage.web.common.utils.DataUtils;
import org.ecomileage.web.model.ApprovalForm;
import org.ecomileage.web.model.MileageHistoryJourney;
import org.ecomileage.web.model.TransferForm;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.google.gson.Gson;


/**
 * Spring MVC controller for 'Setting' management.
 */
@Controller
@RequestMapping("/auth/mileage")
public class MileageAdminController extends AbstractController {
	private static final Integer PAGE_SIZE   = 10;
	private static String nav = "setting";
	private static final String JSP_LIST   = "admin/setting/list";
	private static final String JSP_LIST_ERROR   = "auth/mileage/error/list";
	private static final String JSP_LIST_BIKE   = "auth/mileage/bike/list";

	@Resource
    private SettingService settingService;
	@Resource
	private MileageHistoryService mileageHistoryService;
	@Resource
	private AddressService addressService;

	/*
	 * Page name: transfer_data_list
	 * Method   : GET
	 * Purpose  : get transfer list
	 * */
	@RequestMapping("/transfer/list")
	public String transfers(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam Map<String, Object> params,
			HttpSession session,
			HttpServletRequest request,
			Model model) {
		params.put("type_m", ConstantCommon.FLAG_MILEAGEHISTORY_TYPE_BUS_AND_SUBWAY);
		String startTime = null;
		String endTime = null;
		if(params.get("registerTimeStart") != null && params.get("registerTimeEnd") != null) {
			startTime = String.valueOf(params.get("registerTimeStart").toString());
			endTime = String.valueOf(params.get("registerTimeEnd").toString());
		}
		Page<MileageHistoryEntity> listPage = mileageHistoryService.filterAdmin(params, page, PAGE_SIZE);
		
		model.addAttribute("activePage", nav);;
		model.addAttribute("title", params.get("title"));
		model.addAttribute("list", listPage.getContent());
		model.addAttribute("param", params);
		model.addAttribute("registerTimeStart", startTime);
		model.addAttribute("registerTimeEnd", endTime);
		
		new Pager<MileageHistoryEntity>(listPage).setSetting(model, request);		
		return getView();
	}
	
	/*
	 * Page name: approval_list
	 * Method   : GET
	 * Purpose  : get approval list
	 * */
	@RequestMapping("/approval/list")
	public String list(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam Map<String, Object> params,
			HttpSession session,
			HttpServletRequest request,
			Model model) {
		Page<SettingEntity> listPage = settingService.filterAdmin(params, page, PAGE_SIZE);
		model.addAttribute("activePage", nav);
		model.addAttribute("title", params.get("title"));
		model.addAttribute("approval", listPage.getContent());
		new Pager<SettingEntity>(listPage).setSetting(model, request);		
		return getView();
	}
	
	/*
	 * Page name: approval_write
	 * Method   : GET
	 * Purpose  : only get page
	 * */
	@RequestMapping(value = "/approval/create", method = RequestMethod.GET ) 
	public String create(
			HttpSession session,
			Model model) {
		model.addAttribute("activePage", nav);
		return getView();
	}

	/*
	 * Page name: approval_write
	 * Method   : POST
	 * Purpose  : save information to database that user enter 
	 * */
	@RequestMapping(value = "/approval/create", method = RequestMethod.POST ) 
	@ResponseBody
	public Object create(
			HttpSession session,
			@ModelAttribute ApprovalForm param,
			Model model) {
		try {
			if(param.getStartTime() == null || param.getEndTime() == null) {
				return FAIL_(ConstantCommon.RESPONSE_STATUS_NULL);
			} else {
				Date startDate =  DataUtils.parseDate(param.getStartTime().replace("/", "-"), "yyyy-MM-dd");
				Date endDate = DataUtils.parseDate(param.getEndTime().replace("/", "-"), "yyyy-MM-dd");
				Boolean checkDate = settingService.checkDuplicateStartDateAndEndDate(startDate, endDate);
				if (checkDate) {
					return FAIL_(ConstantCommon.RESPONSE_STATUS_DUPLICATE_DATE);
				} else {
					Setting setting = new Setting();
					try {
						setting.setTitle( param.getTitle() );
						setting.setStartTime( startDate );
						setting.setEndTime( endDate );
						setting.setBikePointPerKm( param.getBikePointPerKm() );
						setting.setMaxMileagePerDay( param.getMaxMileagePerDay() );
						setting.setMaxMileagePerOnce( param.getMaxMileagePerOnce() );
						setting.setApprovalDateNumber( param.getApprovalDateNumber() );
						setting.setMinAverageSpeed( param.getMinAverageSpeed() );
						setting.setMaxAverageSpeed( param.getMaxAverageSpeed() );
						setting.setProblemPoint( param.getProblemPoint() );
						setting.setMaxAcceleration( param.getMaxAcceleration() );
						setting.setTranferPointPerKm( param.getTranferPointPerKm() );
						setting.setMaxApprovalTranferPerDay( param.getMaxApprovalTranferPerDay() );
						setting.setFavoritePointPerKm( param.getFavoritePointPerKm() );
						setting.setMaxApprovalPerDay(param.getMaxApprovalPerDay());
						setting.setMaxSpeed(param.getMaxSpeed());
						setting.setUpdateDate( new Date() );
						setting = settingService.create(setting);
						return SUCCESS_(ConstantCommon.RESPONSE_STATUS_SUCCESS);
					} catch(Exception e) {
						e.printStackTrace();
						return FAIL_(ConstantCommon.RESPONSE_STATUS_FAIL);
					}
					
				}
			}
			
		} catch(Exception e) {
			e.printStackTrace();
			return getView();
		}
	}
	
	/*
	 * Page name: approval_detail
	 * Method   : GET
	 * Purpose  : only get page with param is "id" field from jsp page
	 * */
	@RequestMapping(value = "/approval/edit", method = RequestMethod.GET ) 
	public String edit(
			HttpSession session,
			@RequestParam Map<String, Object> params,
			Model model) {
		Integer    id = Integer.valueOf(params.get("id").toString());
		Setting s = settingService.findById(id);
		model.addAttribute("approval", s);
		return getView();
	}
	
	/*
	 * Page name: approval_detail
	 * Method   : POST
	 * Purpose  : save information to database that user enter and want to change
	 * */
	@RequestMapping(value = "/approval/edit", method = RequestMethod.POST)
	@ResponseBody
	public Object editPost(@ModelAttribute ApprovalForm param) {
		try {
			if(param.getStartTime() == null || param.getEndTime() == null) {
				return FAIL_(ConstantCommon.RESPONSE_STATUS_NULL);
			} else {
				Date startDate =  DataUtils.parseDate(param.getStartTime().replace("/", "-"), "yyyy-MM-dd");
				Date endDate = DataUtils.parseDate(param.getEndTime().replace("/", "-"), "yyyy-MM-dd");
				Boolean checkDate = settingService.checkDuplicateStartDateAndEndDate(startDate, endDate, param.getId());
				if (checkDate) {
					return FAIL_(ConstantCommon.RESPONSE_STATUS_DUPLICATE_DATE);
				} else {
					Setting setting = settingService.findById(param.getId());
					try {
						setting.setTitle( param.getTitle() );
						setting.setStartTime( startDate );
						setting.setEndTime( endDate );
						setting.setBikePointPerKm( param.getBikePointPerKm() );
						setting.setMaxMileagePerDay( param.getMaxMileagePerDay() );
						setting.setMaxMileagePerOnce( param.getMaxMileagePerOnce() );
						setting.setApprovalDateNumber( param.getApprovalDateNumber() );
						setting.setMinAverageSpeed( param.getMinAverageSpeed() );
						setting.setMaxAverageSpeed( param.getMaxAverageSpeed() );
						setting.setProblemPoint( param.getProblemPoint() );
						setting.setMaxAcceleration( param.getMaxAcceleration() );
						setting.setTranferPointPerKm( param.getTranferPointPerKm() );
						setting.setMaxApprovalTranferPerDay( param.getMaxApprovalTranferPerDay() );
						setting.setFavoritePointPerKm( param.getFavoritePointPerKm() );
						setting.setMaxApprovalPerDay(param.getMaxApprovalPerDay());
						setting.setMaxSpeed(param.getMaxSpeed());
						setting.setUpdateDate( new Date() );
						setting = settingService.update(setting);
						return SUCCESS_(ConstantCommon.RESPONSE_STATUS_SUCCESS);
					} catch(Exception e) {
						e.printStackTrace();
						return FAIL_(ConstantCommon.RESPONSE_STATUS_FAIL);
					}
					
				}
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR();
		}
	}

	/*
	 * Page name: transfer_data_detail
	 * Method   : GET
	 * Purpose  : only get page with param is "id" field from jsp page
	 * */
	@RequestMapping(value = "/transfer/edit", method = RequestMethod.GET)
	public String update(
	HttpSession session,
	@RequestParam Map<String, Object> params,
	Model model  ) {
		Integer    id = Integer.valueOf(params.get("id").toString());
		MileageHistoryEntity mileageHistory = mileageHistoryService.findOne(id);
		try {
			model.addAttribute("item", mileageHistory);
			model.addAttribute("activePage", nav);
			return getView();
		} catch(Exception e) {
			return JSP_LIST;
		}
	}
	
	/*
	 * Page name: transfer_data_detail
	 * Method   : POST
	 * Purpose  : save information to database that user enter and want to change
	 * */
	@RequestMapping(value = "/transfer/edit", method = RequestMethod.POST)
	@ResponseBody
	public Object transferEditPost(@ModelAttribute TransferForm param) {
		try {
			MileageHistory mileageHistory = mileageHistoryService.findById(param.getId());
			mileageHistory.setStatus( param.getStatus() );
			mileageHistory.setMemo(param.getMemo());
			mileageHistory.setUpdateDate( new Date() );
			mileageHistory = mileageHistoryService.update(mileageHistory);
			return SUCCESS_(ConstantCommon.RESPONSE_STATUS_SUCCESS);
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL_(ConstantCommon.RESPONSE_STATUS_FAIL);
		}
	}
	
	/*
	 * Page name: transfer_data_detail
	 * Method   : POST
	 * Function : change the approval status
	 * Purpose  : save status that user enter and want to change
	 * */
	@RequestMapping(value = "/transfer/change_status",method = RequestMethod.POST)
	@ResponseBody
	public Object change_status(
			@RequestParam(value = "id", defaultValue = "") Integer id,
			@RequestParam(value = "status", defaultValue = "") Short status,
			HttpSession session,
			ModelMap map) {
    		try {
    			MileageHistory mileageHistory = mileageHistoryService.findById(id);
    			mileageHistory.setStatus(status);
    			mileageHistory.setUpdateDate( new Date() );
    			mileageHistory = mileageHistoryService.update(mileageHistory);
    			return SUCCESS_(ConstantCommon.RESPONSE_STATUS_SUCCESS);
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL_(ConstantCommon.RESPONSE_STATUS_FAIL);
		}
	}


	/*
	 * Page name: bike_data_list
	 * Method   : GET
	 * Purpose  : get tracking data list
	 * */
	@RequestMapping("/bike/list")
	public String bikes(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam Map<String, Object> params,
			HttpSession session,
			HttpServletRequest request,
			Model model) {
		params.put("type_m", ConstantCommon.FLAG_MILEAGEHISTORY_TYPE_BIKE);
		String startTime = null;
		String endTime = null;
		if(params.get("registerTimeStart") != null && params.get("registerTimeEnd") != null) {
			startTime = String.valueOf(params.get("registerTimeStart").toString());
			endTime = String.valueOf(params.get("registerTimeEnd").toString());
		}
		Page<MileageHistoryEntity> listPage = mileageHistoryService.filterAdmin(params, page, Integer.MAX_VALUE);
		for (MileageHistoryEntity m : listPage.getContent()) {
			if(m.getFileName() == null) {
				String fileName = DataUtils.parseStringFromDate(m.getStartTime(), "yyyyMMddHHmmss")+"_"+m.getUser().getId()+"_"+m.getId()+"_txt.zip";
				m.setFileName(fileName);
				mileageHistoryService.update(m);
			}
		}
		
		List<AddressEntity> citys = addressService.findByParentId(ConstantCommon.ADDRESS_PARENT_CITY);
		if (params.get("city-m") != null && params.get("city-m") != "") {
			AddressEntity city = addressService.findOneByParentName(String.valueOf(params.get("city-m")));
			List<AddressEntity> districts = addressService.findByParentId(city.getId());
			model.addAttribute("districts", districts);
		}
		
		model.addAttribute("activePage", nav);;
		model.addAttribute("title", params.get("title"));
		model.addAttribute("list", listPage.getContent());
		model.addAttribute("param", params);
		model.addAttribute("citys", citys);
		model.addAttribute("cityM", params.get("city-m"));
		model.addAttribute("districtM", params.get("district-m"));
		model.addAttribute("registerTimeStart", startTime);
		model.addAttribute("registerTimeEnd", endTime);
		
		new Pager<MileageHistoryEntity>(listPage).setSetting(model, request);		
		return getView();
	}
	
	/*
	 * Page name: error_data_list
	 * Method   : GET
	 * Purpose  : get tracking error list
	 * */
	@RequestMapping("/error/list")
	public String errors(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam Map<String, Object> params,
			HttpSession session,
			HttpServletRequest request,
			Model model) {
		try {
			String startTime = null;
			String endTime = null;
			params.put("type_m", ConstantCommon.FLAG_MILEAGEHISTORY_TYPE_BIKE);
			if (params.get("status") == null || params.get("status") == "") {
				params.put("status-m", ConstantCommon.FLAG_MILEAGEHISTORY_TYPE_BIKE_ERROR);
			}
			
			Page<MileageHistoryEntity> listPage = mileageHistoryService.filterAdmin(params, page, Integer.MAX_VALUE);
			
			if(params.get("registerTimeStart") != null && params.get("registerTimeEnd") != null) {
				startTime = String.valueOf(params.get("registerTimeStart").toString());
				endTime = String.valueOf(params.get("registerTimeEnd").toString());
			}
			
			List<AddressEntity> citys = addressService.findByParentId(ConstantCommon.ADDRESS_PARENT_CITY);
			if (params.get("city-m") != null && params.get("city-m") != "") {
				AddressEntity city = addressService.findOneByParentName(String.valueOf(params.get("city-m")));
				List<AddressEntity> districts = addressService.findByParentId(city.getId());
				model.addAttribute("districts", districts);
			}
			model.addAttribute("activePage", nav);;
			model.addAttribute("title", params.get("title"));
			model.addAttribute("list", listPage.getContent());
			model.addAttribute("param", params);
			model.addAttribute("citys", citys);
			model.addAttribute("cityM", params.get("city-m"));
			model.addAttribute("districtM", params.get("district-m"));
			model.addAttribute("registerTimeStart", startTime);
			model.addAttribute("registerTimeEnd", endTime);
			
			new Pager<MileageHistoryEntity>(listPage).setSetting(model, request);		
		} catch (Exception e) {
			e.printStackTrace();
		}
		return getView();
		
	}
	
	/*
	 * Page name: bike_data_list
	 * Method   : POST
	 * Function : process approval
	 * Purpose  : save processing approval that user enter and want to change
	 * */
	@RequestMapping(value = "/bike/process_approval",method = RequestMethod.POST)
	@ResponseBody
	public Object process_approval(
			@RequestParam(value = "id", defaultValue = "") Integer id,
			HttpSession session,
			ModelMap map) {
    		try {
    			MileageHistory mileageHistory = mileageHistoryService.findById(id);
    			mileageHistory.setIsAdminApproval(false);
    			mileageHistory.setUpdateDate( new Date() );
    			mileageHistory = mileageHistoryService.update(mileageHistory);
    			return SUCCESS_(ConstantCommon.RESPONSE_STATUS_SUCCESS);
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL_(ConstantCommon.RESPONSE_STATUS_FAIL);
		}
	}
	
	/*
	 * Page name: error_data_detail
	 * Method   : GET
	 * Purpose  : only get page with param is "id" field from jsp page
	 * */
	@RequestMapping(value = "/error/edit", method = RequestMethod.GET)
	public String editError(HttpSession session, @RequestParam Map<String, Object> params, Model model  ) {
		Integer    id = Integer.valueOf(params.get("id").toString());
		MileageHistoryEntity mileageHistory = mileageHistoryService.findOne(id);
		try {
			model.addAttribute("item", mileageHistory);
			model.addAttribute("activePage", nav);
			String json = "";
			Double jsonLat1 = 37.5652894;
			Double jsonLong1 = 126.8494632;
			Double jsonLat2 = 37.5652894;
			Double jsonLong2 = 126.8494632;
			
			List<MileageHistoryJourney> listJourney = new ArrayList<>();
			if (mileageHistory.getJourney().length() > 0) {
				for (String str : mileageHistory.getJourney().split("\n")) {
					MileageHistoryJourney m = new MileageHistoryJourney();
					m.setLat(Double.valueOf(str.split(",")[1]));
					m.setLng(Double.valueOf(str.split(",")[2]));
					listJourney.add(m);
				}
				json = new Gson().toJson(listJourney);
				jsonLat1 = listJourney.get(0).getLat();
				jsonLong1 = listJourney.get(0).getLng();
				jsonLat2 = listJourney.get(listJourney.size()-1).getLat();
				jsonLong2 = listJourney.get(listJourney.size()-1).getLng();
			}
			
			model.addAttribute("data" , json);
			model.addAttribute("jsonLat1" , jsonLat1);
			model.addAttribute("jsonLong1" , jsonLong1);
			model.addAttribute("jsonLat2" , jsonLat2);
			model.addAttribute("jsonLong2" , jsonLong2);
			
			return getView();
		} catch(Exception e) {
			return JSP_LIST;
		}
	}
	
	/*
	 * Page name: error_data_detail
	 * Method   : POST
	 * Purpose  : save information to database that user enter and want to change
	 * */
	@RequestMapping(value = "/error/edit", method = RequestMethod.POST ) 
	public String errorEditPost(
			HttpSession session,
			@ModelAttribute MileageHistory param,
			Model model) {
		try {
			MileageHistory mileageHistory = mileageHistoryService.findById(param.getId());
			mileageHistory.setMemo(param.getMemo());
			mileageHistory.setUpdateDate(new Date());
			mileageHistory = mileageHistoryService.update(mileageHistory);
			return "redirect:/" +JSP_LIST_ERROR;
		} catch (Exception e) {
			e.printStackTrace();
			return getView();
		}
	}
	
	/*
	 * Page name: bike_data_detail
	 * Method   : GET
	 * Purpose  : only get page with param is "id" field from jsp page
	 * */
	@RequestMapping(value = "/bike/edit", method = RequestMethod.GET)
	public String editBike(HttpSession session, @RequestParam Map<String, Object> params, Model model  ) {
		Integer    id = Integer.valueOf(params.get("id").toString());
		MileageHistoryEntity mileageHistory = mileageHistoryService.findOne(id);
		try {
			model.addAttribute("item", mileageHistory);
			model.addAttribute("activePage", nav);
			String json = "";
			Double jsonLat1 = 37.5652894;
			Double jsonLong1 = 126.8494632;
			Double jsonLat2 = 37.5652894;
			Double jsonLong2 = 126.8494632;
			
			List<MileageHistoryJourney> listJourney = new ArrayList<>();
			if (mileageHistory.getJourney().length() > 0) {
				for (String str : mileageHistory.getJourney().split("\n")) {
					MileageHistoryJourney m = new MileageHistoryJourney();
					m.setLat(Double.valueOf(str.split(",")[1]));
					m.setLng(Double.valueOf(str.split(",")[2]));
					listJourney.add(m);
				}
				json = new Gson().toJson(listJourney);
				jsonLat1 = listJourney.get(0).getLat();
				jsonLong1 = listJourney.get(0).getLng();
				jsonLat2 = listJourney.get(listJourney.size()-1).getLat();
				jsonLong2 = listJourney.get(listJourney.size()-1).getLng();
			}
			
			model.addAttribute("data" , json);
			model.addAttribute("jsonLat1" , jsonLat1);
			model.addAttribute("jsonLong1" , jsonLong1);
			model.addAttribute("jsonLat2" , jsonLat2);
			model.addAttribute("jsonLong2" , jsonLong2);
			
			return getView();
		} catch(Exception e) {
			return JSP_LIST;
		}
	}
	
	/*
	 * Page name: bike_data_detail
	 * Method   : POST
	 * Purpose  : save information to database that user enter and want to change
	 * */
	@RequestMapping(value = "/bike/edit", method = RequestMethod.POST ) 
	@ResponseBody
	public String bikeEditPost(
			HttpSession session,
			@ModelAttribute MileageHistory param,
			Model model) {
		try {
			MileageHistory mileageHistory = mileageHistoryService.findById(param.getId());
			mileageHistory.setMemo(param.getMemo());
			mileageHistory.setUpdateDate(new Date());
			mileageHistory = mileageHistoryService.update(mileageHistory);
			return "redirect:/" +JSP_LIST_BIKE;
		} catch (Exception e) {
			e.printStackTrace();
			return getView();
		}
	}
}
