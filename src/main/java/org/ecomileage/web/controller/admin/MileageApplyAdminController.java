/*
 * Created on 13 thg 12 2017 ( Time 16:48:14 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.ecomileage.web.controller.admin;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.ecomileage.web.common.AbstractController;
import org.ecomileage.web.common.ApplicationDefine;
import org.ecomileage.web.common.Pager;
import org.ecomileage.web.common.utils.DataUtils;
import org.ecomileage.web.common.utils.ExcelUtils;
import org.ecomileage.bean.jpa.CategoryEntity;
import org.ecomileage.bean.jpa.MileageApplyEntity;
import org.ecomileage.business.service.MileageApplyService;
import org.ecomileage.business.service.UserService;
import org.ecomileage.business.service.CategoryService;

/**
 * Spring MVC controller for 'MileageApply' management.
 */
@Controller
@RequestMapping("/auth/mileageApply")
public class MileageApplyAdminController extends AbstractController {
	private static final Integer PAGE_SIZE   = 10;
	private static String nav = "mileageApply";
	private static final String JSP_LIST_BIKE   = "/auth/mileageApply/bike/list";
	
	@Resource
    private MileageApplyService mileageApplyService;
	@Resource
    private UserService userService;
	@Resource
    private CategoryService categoryService;

	/*
	 * Page name: bike_mileage_list
	 * Method   : GET
	 * Purpose  : get bike mileage list
	 * */
	@RequestMapping("/bike/list")
	public String bikeList(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam Map<String, Object> params,
			HttpSession session,
			HttpServletRequest request,
			Model model) {
		params.put("type", ApplicationDefine.MileageApply_Type.Bike.getCode());
		Page<MileageApplyEntity> listPage = mileageApplyService.filterAdmin(params, page, PAGE_SIZE);
		model.addAttribute("activePage", nav);
		new Pager<MileageApplyEntity>(listPage).setSetting(model, request);		
		return getView();
	}
	
	/*
	 * Page name: transfer_mileage_list
	 * Method   : GET
	 * Purpose  : get transfer mileage list
	 * */
	@RequestMapping("/transfer/list")
	public String transferList(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam Map<String, Object> params,
			HttpSession session,
			HttpServletRequest request,
			Model model) {
		params.put("type", ApplicationDefine.MileageApply_Type.Tranfer.getCode());
		Page<MileageApplyEntity> listPage = mileageApplyService.filterAdmin(params, page, PAGE_SIZE);
		List<CategoryEntity> giftCategories = categoryService.findByGroupId((short)ApplicationDefine.Category_Type.MileageApply_GiftCertificate.getCode());
		
		new Pager<MileageApplyEntity>(listPage).setSetting(model, request);		
		model.addAttribute("activePage", nav);
		model.addAttribute("giftCategories", giftCategories);
		return getView();
	}

	/*
	 * Page name: bike_mileage_list
	 * Method   : POST
	 * Function : download data by searching
	 * Purpose  : export to CSV or XLS file
	 * */
	@RequestMapping("/bike/list/download")
	public void bike_download(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam Map<String, Object> params,
			HttpSession session,
			HttpServletResponse response,
			Model model) {
		try {
			params.put("type", ApplicationDefine.MileageApply_Type.Bike.getCode());
			Page<MileageApplyEntity> listPage = mileageApplyService.filterAdmin(params, page, Integer.MAX_VALUE);
			
			List<Object> header = new ArrayList<>();
			header.add("번호");
			header.add("아이디");
			header.add("이름");
			header.add("우편번호");
			header.add("주소");
			header.add("신청 물품/개수");
			header.add("사용 마일리지");
			header.add("신청 날짜");
			header.add("상태");
			List<List<Object>> listData = null;
			if (listPage.getContent() != null) {
				listData = new ArrayList<>();
				int index =0;
				
				for (MileageApplyEntity i : listPage.getContent()) {
					List<Object> listCell = new ArrayList<Object>();
					listCell.add(listPage.getTotalElements() - index);
					listCell.add(i.getUser().getUsername());
					listCell.add(i.getUser().getFullname());
					if (i.getPostCode() == null) {
						listCell.add("");
					} else {
						listCell.add(i.getPostCode());
					}
					String address = "";
					String addressDetail = "";
					
					if (i.getAddress() != null) {
						address = i.getAddress();
					}
					
					if (i.getAddressDetail() != null) {
						addressDetail = i.getAddressDetail();
					}
					
					listCell.add(address + " " + addressDetail);
					if (i.getRegisterItem() == null) {
						listCell.add("");
					} else {
						listCell.add(i.getRegisterItem());
					}
					
					listCell.add(i.getPointUse());
					listCell.add(DataUtils.parseStringFromDate(i.getCreateDate(), "yyyy-MM-dd"));
					if(i.getStatus() == ApplicationDefine.MileageApply_Status.Waitting.getCode()) {
						listCell.add("검토중");
					}else if(i.getStatus() == ApplicationDefine.MileageApply_Status.Accpet.getCode()) {
						listCell.add("승인");
					}else {
						listCell.add("불인 ");
					}
					listData.add(listCell);
					index+=1;
				}
			}
			
			ExcelUtils.exportDocumentFile(response, String.valueOf(params.get("typeExcel")), header, listData);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/*
	 * Page name: transfer_mileage_list
	 * Method   : POST
	 * Function : download data by searching
	 * Purpose  : export to CSV or XLS file
	 * */
	@RequestMapping("/transfer/list/download")
	public void tranfer_download(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam Map<String, Object> params,
			HttpSession session,
			HttpServletResponse response,
			Model model) {
		try {
			params.put("type", ApplicationDefine.MileageApply_Type.Tranfer.getCode());
			Page<MileageApplyEntity> listPage = mileageApplyService.filterAdmin(params, page, Integer.MAX_VALUE);
			
			List<Object> header = new ArrayList<>();
			header.add("번호");
			header.add("아이디");
			header.add("이름");
			header.add("우편번호");
			header.add("주소");
			header.add("신청 상품권");
			header.add("사용 마일리지");
			header.add("신청 날짜");
			header.add("상태");
			List<List<Object>> listData = null;
			if (listPage.getContent() != null) {
				listData = new ArrayList<>();
				int index =0;
				
				for (MileageApplyEntity i : listPage.getContent()) {
					List<Object> listCell = new ArrayList<Object>();
					listCell.add(listPage.getTotalElements() - index);
					listCell.add(i.getUser().getUsername());
					listCell.add(i.getUser().getFullname());
					if (i.getPostCode() == null) {
						listCell.add("");
					} else {
						listCell.add(i.getPostCode());
					}
					String address = "";
					String addressDetail = "";
					
					if (i.getAddress() != null) {
						address = i.getAddress();
					}
					
					if (i.getAddressDetail() != null) {
						addressDetail = i.getAddressDetail();
					}
					
					listCell.add(address + " " + addressDetail);
					listCell.add(i.getCategory().getName());
					listCell.add(i.getPointUse());
					listCell.add(DataUtils.parseStringFromDate(i.getCreateDate(), "yyyy-MM-dd"));
					if(i.getStatus() == ApplicationDefine.MileageApply_Status.Waitting.getCode()) {
						listCell.add("검토중");
					}else if(i.getStatus() == ApplicationDefine.MileageApply_Status.Accpet.getCode()) {
						listCell.add("승인");
					}else {
						listCell.add("불인 ");
					}
					listData.add(listCell);
					index+=1;
				}
			}
			
			ExcelUtils.exportDocumentFile(response, String.valueOf(params.get("typeExcel")), header, listData);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/*
	 * Page name: bike_mileage_detail
	 * Method   : GET
	 * Purpose  : only get page with param is "id" field from jsp page
	 * */
	@RequestMapping(value = "/bike/edit", method = RequestMethod.GET)
	public String updateSponsorRegDetail1(HttpSession session, @RequestParam("id") Integer id,Model model) {
		try {
			MileageApplyEntity mEntity = mileageApplyService.findOne(id);
			
			model.addAttribute("item", mEntity);
			return getView();
		} catch(Exception e) {
			return JSP_LIST_BIKE;
		}
	}
	
	/*
	 * Page name: transfer_mileage_detail_1
	 * Method   : GET
	 * Purpose  : only get page with param is "id" field from jsp page
	 * */
	@RequestMapping(value = "/transfer/edit1", method = RequestMethod.GET)
	public String transferEdit1(HttpSession session, @RequestParam("id") Integer id,Model model) {
		try {
			MileageApplyEntity mEntity = mileageApplyService.findOne(id);
			
			model.addAttribute("item", mEntity);
			return getView();
		} catch(Exception e) {
			return JSP_LIST_BIKE;
		}
	}
	
	/*
	 * Page name: transfer_mileage_detail_2
	 * Method   : GET
	 * Purpose  : only get page with param is "id" field from jsp page
	 * */
	@RequestMapping(value = "/transfer/edit2", method = RequestMethod.GET)
	public String transferEdit2(HttpSession session, @RequestParam("id") Integer id,Model model) {
		try {
			MileageApplyEntity mEntity = mileageApplyService.findOne(id);
			
			model.addAttribute("item", mEntity);
			return getView();
		} catch(Exception e) {
			return JSP_LIST_BIKE;
		}
	}
}
