/*
 * Created on 13 thg 11 2017 ( Time 14:04:53 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.ecomileage.web.controller.admin;

import java.util.List;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
//--- Common classes
import org.ecomileage.web.common.AbstractController;
import org.ecomileage.web.common.ApplicationDefine;
import org.ecomileage.web.common.Pager;
import org.ecomileage.web.common.utils.ConstantCommon;
import org.ecomileage.web.common.utils.DataUtils;
import org.ecomileage.web.common.utils.EncryptionUtils;
import org.ecomileage.web.common.utils.ExcelUtils;
import org.ecomileage.web.common.utils.FileUtils;
import org.ecomileage.bean.jpa.AddressEntity;
import org.ecomileage.bean.jpa.MileageBackupEntity;
import org.ecomileage.bean.jpa.UserEntity;
import org.ecomileage.bean.jpa.VehicleCodeEntity;
import org.ecomileage.bean.MileageBackup;
//--- Entities
import org.ecomileage.bean.User;
//--- Services 
import org.ecomileage.business.service.UserService;
import org.ecomileage.business.service.VehicleCodeService;
import org.ecomileage.business.service.AddressService;
import org.ecomileage.business.service.MileageBackupService;
import org.ecomileage.business.service.MileageHistoryService;
import org.ecomileage.business.service.UserRoleService;

/**
 * Spring MVC controller for 'User' management.
 */
@Controller
@RequestMapping("/auth/user")
public class UserAdminController extends AbstractController {
	//--- Variables names ( to be used in JSP with Expression Language )
	private static final Integer PAGE_SIZE   = 10;
	private static String nav = "user";
	private static final String JSP_LIST   = "admin/user/list";
	//--- Main entity service
	@Resource
    private UserService userService; // Injected by Spring
	//--- Other service(s)
	@Resource
    private UserRoleService userRoleService; // Injected by Spring
	@Resource
    private MileageBackupService  mileageBackupService;
	@Resource
    private MileageHistoryService mileageHistoryService;
	@Resource
    private AddressService addressService;
	@Resource
    private VehicleCodeService vehicleCodeService;

	/*
	 * Page name: member_list
	 * Method   : GET
	 * Purpose  : get member list
	 * */
	@RequestMapping("/member/list")
	public String list(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam Map<String, Object> params,
			HttpSession session,
			HttpServletRequest request,
			Model model) {
		Page<UserEntity> listPage = userService.filterAdmin(params, page, PAGE_SIZE);
		List<AddressEntity> citys = addressService.findByParentId(ConstantCommon.ADDRESS_PARENT_CITY);
		
		if (params.get("city") != null && params.get("city") != "") {
			AddressEntity city = addressService.findOneByParentName(String.valueOf(params.get("city")));
			List<AddressEntity> districts = addressService.findByParentId(city.getId());
			model.addAttribute("districts", districts);
		}
		model.addAttribute("activePage", nav);
		model.addAttribute("title", params.get("title"));
		model.addAttribute("list", listPage.getContent());
		model.addAttribute("param", params);
		model.addAttribute("citys", citys);
		model.addAttribute("cityM", params.get("city"));
		model.addAttribute("districtM", params.get("district"));
		new Pager<UserEntity>(listPage).setSetting(model, request);		
		return getView();
	}
	
	/*
	 * Page name: member_list
	 * Method   : GET
	 * Function : getMinStartTime
	 * Purpose  : get min start time from database
	 * */
	@RequestMapping(value = "/member/getMinStartTime",method = RequestMethod.GET)
	@ResponseBody
	public Object process_approval(
			HttpSession session,
			ModelMap map) {
    		try {
    			HashMap<String, Object> ret = new HashMap<>();
    			Date minStartTimeDate = userService.getMinStartTime();
    			String currentDate = DataUtils.parseStringFromDate(new Date(), "yyyy/MM/dd");
    			String minStartTime = null;
    			if (minStartTimeDate == null) {
    				minStartTime = DataUtils.parseStringFromDate(new Date(), "yyyy/MM/dd");
				} else {
					minStartTime = DataUtils.parseStringFromDate(minStartTimeDate, "yyyy/MM/dd");
				}
    			
    			ret.put("currentDate", currentDate);
    			ret.put("minStartTime", minStartTime);
    			return SUCCESS_DATA(ConstantCommon.RESPONSE_STATUS_SUCCESS, ret );
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL_(ConstantCommon.RESPONSE_STATUS_FAIL);
		}
	}
	
	/*
	 * Page name: member_list
	 * Method   : POST
	 * Function : download data by searching
	 * Purpose  : export to CSV or XLS file
	 * */
	@RequestMapping("/member/list/download")
	public void bus_download(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam Map<String, Object> params,
			HttpSession session,
			HttpServletResponse response,
			Model model) {
		try {
			List<Map<String,Object>> list = userService.listExportExcel(params);
			List<Object> header = new ArrayList<>();;
			header.add("번호");
			header.add("아이디");
			header.add("총 이동거리 (km)");
			header.add("자전거 활동수");
			header.add("대중교통 활동수");
			header.add("총 CO2 감축량(kg)");
			header.add("지역");
			header.add("가입일");
			header.add("이메일");
			header.add("연락처");
			List<List<Object>> listData = null;
			if (list != null && list.size() > 0) {
				listData = new ArrayList<>();
				int index =0;
				for (Map<String,Object> map : list) {
					List<Object> listCell = new ArrayList<Object>();
					listCell.add(list.size()-index);
					if(map.get("username") != null) {
						listCell.add(map.get("username"));
					}else {
						listCell.add("");
					}
					listCell.add(map.get("totalMileage"));
					listCell.add(map.get("totalRide"));
					listCell.add(map.get("totalTranfer"));
					listCell.add(map.get("totalReduceCo2"));
					if(map.get("address") != null) {
						listCell.add(map.get("address"));
					}else {
						listCell.add("");
					}
					listCell.add(DataUtils.parseStringFromDate((Date)map.get("createDate"), "yyy-MM-dd"));
					if(map.get("email") != null) {
						listCell.add(map.get("email"));
					}else {
						listCell.add("");
					}
					if(map.get("phone") != null) {
						listCell.add(map.get("phone"));
					}else {
						listCell.add("");
					}
					listData.add(listCell);
					index++ ;
				}
			}
			
			ExcelUtils.exportDocumentFile(response, String.valueOf(params.get("typeExcel")), header, listData);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/*
	 * Page name: member_register
	 * Method   : GET
	 * Purpose  : only get page
	 * */
	@RequestMapping(value = "/member/create", method = RequestMethod.GET ) 
	public String create(
			HttpSession session,
			Model model) {
		model.addAttribute("activePage", nav);
		model.addAttribute("now", new Date());
		return getView();
	}

	/*
	 * Page name: member_register
	 * Method   : POST
	 * Purpose  : save information to database that user enter 
	 * */
	@RequestMapping(value = "/member/create", method = RequestMethod.POST ) 
	public String create(
			HttpSession session,
			@RequestParam(required = false) MultipartFile avatar,
			@RequestParam(required = false) String username,
			@RequestParam(required = false) String password,
			@RequestParam(required = false) String fullname,
			@RequestParam(required = false) Integer roleId,
			@RequestParam(required = false) String phone,
			@RequestParam(required = false) String email,
			@RequestParam(required = false) String postcode,
			@RequestParam(required = false) String address,
			@RequestParam(required = false) String addressDetail,
			@RequestParam(required = false) String memo,
			Model model) {
		try {
			
			User user = new User();
			user.setUsername(username);
			user.setPassword(EncryptionUtils.jwtBuild(password));
			user.setFullname(fullname);
			user.setRoleId(roleId);
			user.setPhone(phone);
			user.setEmail(email);
			user.setPostcode(postcode);
			user.setAddress(address);
			user.setSnsType("normal");
			user.setAddressDetail(addressDetail);
			user.setCreateDate(new Date());
			user.setUpdateDate(new Date());
			user.setMemo(memo);
			if(avatar.getSize()>0) {
				try {
					user.setAvatarName( avatar.getOriginalFilename() );
					user.setAvatarUrl( FileUtils.saveFile(avatar) );
				} catch (Exception e) {
				}
			}
			user = userService.create(user);
			
			return redirectList();
		} catch(Exception e) {
			e.printStackTrace();
			return getView();
		}
	}

	/*
	 * Page name: member_detail_1, member_detail_2
	 * Method   : GET
	 * Purpose  : only get page with param is "id" field from jsp page
	 * */
	@RequestMapping(value = "/member/edit", method = RequestMethod.GET)
	public String update(
	HttpSession session,
	@RequestParam(value="id") Integer id,
	Model model  ) {
		User user = userService.findById(id);
		try {
			
			Short[] typeBike = new Short[1];
			typeBike[0] = ApplicationDefine.MileageHistory_Type.Bike.getCode();
			Long totalBikePoint = mileageHistoryService.getBikePointByUserId(id);
			Long totalFavouritePoint = mileageHistoryService.countFavouritePointByUserId(id);
			Long totalTranferPoint = mileageHistoryService.getTranferPointByUserId(id);
			
			VehicleCodeEntity v = vehicleCodeService.findByUserId(id);
			
			Short[] typeAll = new Short[3];
			typeAll[0] = ApplicationDefine.MileageHistory_Type.Bus.getCode();
			typeAll[1] = ApplicationDefine.MileageHistory_Type.Bike.getCode();
			typeAll[2] = ApplicationDefine.MileageHistory_Type.Subway.getCode();
			
			Float totalMileage = mileageHistoryService.countTotalMileageByUserId(id,typeAll);
			Long totalActive = mileageHistoryService.countActiveByUserId(id, typeBike);
			
			Short[] status = new Short[4];
			status[0] = ApplicationDefine.MileageHistory_Status.NotSendRequest.getCode();
			status[1] = ApplicationDefine.MileageHistory_Status.RecivePoint.getCode();
			status[2] = ApplicationDefine.MileageHistory_Status.RegisterAgain.getCode();
			status[3] = ApplicationDefine.MileageHistory_Status.SendRequestAndNotConfirmed.getCode();
			Float totalReduceCO2 = mileageHistoryService.countReduceCo2_ByUserId(status, id);
			
			model.addAttribute("totalBikePoint", totalBikePoint);
			model.addAttribute("totalFavouritePoint", totalFavouritePoint);
			model.addAttribute("totalTranferPoint", totalTranferPoint);
			model.addAttribute("totalMileage", totalMileage);
			model.addAttribute("totalActive", totalActive);
			model.addAttribute("v", v);
			model.addAttribute("totalReduceCO2", totalReduceCO2);
			model.addAttribute("item", user);
			model.addAttribute("activePage", nav);
			return getView();
		} catch(Exception e) {
			return JSP_LIST;
		}
	}
	
	/*
	 * Page name: member_detail_1, member_detail_2
	 * Method   : POST
	 * Purpose  : save information to database that user enter and want to change
	 * */
	@RequestMapping(value = "/member/edit", method = RequestMethod.POST)
	public String update(
	@RequestParam Integer id,
	@RequestParam(defaultValue="false") Boolean delete,
	@RequestParam(required = false) String reason,
	
	@RequestParam(required = false) MultipartFile avatar,
	@RequestParam(required = false) String fullname,
	@RequestParam(required = false) String phone,
	@RequestParam(required = false) String email,
	@RequestParam(required = false) String postcode,
	@RequestParam(required = false) String address,
	@RequestParam(required = false) String addressDetail,
	@RequestParam(required = false) String city,
	@RequestParam(required = false) String district,
	@RequestParam(required = false) String memo,
	@RequestParam(required = false) Integer roleId,
	Model model  ) {
		User user = userService.findById(id);
		if(delete) {
			user.setLeavingDate(new Date());
			user.setIsDelete(true);
			user.setLeavingReason(reason);
		}else {
			
			try {
				//user.setUsername( item.getUsername() );
				user.setFullname( fullname );
				user.setPhone( phone );
				user.setEmail( email);
				user.setPostcode(postcode);
				user.setAddress( address );
				user.setCity( city );
				user.setDistrict( district);
				user.setAddressDetail(addressDetail );
				user.setRoleId(roleId);
				if(avatar.getSize()>0) {
					try {
						user.setAvatarName( avatar.getOriginalFilename() );
						user.setAvatarUrl( FileUtils.saveFile(avatar) );
					} catch (Exception e) {
						// TODO: handle exception
					}
				} else {
					user.setAvatarName("");
					user.setAvatarUrl("");
				}
				
				user.setMemo( memo );
				
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		user = userService.update(user);
		return redirectList();
	}
	
	/*
	 * Page name: NFC-QR_list
	 * Method   : GET
	 * Purpose  : get NFC-QR list
	 * */
	@RequestMapping(value= "/code/list")
	public String code_list(
			@RequestParam Map<String, Object> params,
			HttpSession session,
			HttpServletRequest request,
			Model model) {
		try {
			Page<MileageBackupEntity> listPage = mileageBackupService.filterAdmin(params, 1, Integer.MAX_VALUE);
			new Pager<MileageBackupEntity>(listPage).setSetting(model, request);
			model.addAttribute("list", listPage.getContent());
		} catch (Exception e) {
			e.printStackTrace();
		}
		return getView();
	}
	
	/*
	 * Page name: NFC-QR_list
	 * Method   : POST
	 * Function : change the approval status
	 * Purpose  : save status that user enter and want to change
	 * */
	@RequestMapping(value = "/code/change_status",method = RequestMethod.POST)
	@ResponseBody
	public Object change_status(
			@RequestParam(value = "id", defaultValue = "") Integer id,
			@RequestParam(value = "status", defaultValue = "") Integer status,
			HttpSession session,
			ModelMap map) {
    		try {
    			MileageBackup mileageBackup = mileageBackupService.findById(id);
    			mileageBackup.setStatus(status);
    			mileageBackup.setUpdateDate( new Date() );
    			mileageBackup = mileageBackupService.update(mileageBackup);
    			return SUCCESS_(ConstantCommon.RESPONSE_STATUS_SUCCESS);
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL_(ConstantCommon.RESPONSE_STATUS_FAIL);
		}
	}

}
