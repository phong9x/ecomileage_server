/*
 * Created on 7 thg 11 2017 ( Time 17:47:55 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.ecomileage.web.controller.admin;

import java.util.List;

import java.util.Date;
import java.util.Map;
import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ModelAttribute;
//--- Common classes
import org.ecomileage.web.common.AbstractController;
import org.ecomileage.web.common.ApplicationDefine;
import org.ecomileage.web.common.Pager;
import org.ecomileage.web.common.utils.DataUtils;
import org.ecomileage.web.model.SponsorForm;
import org.ecomileage.bean.jpa.CategoryEntity;
import org.ecomileage.bean.jpa.PaymentEntity;
import org.ecomileage.bean.jpa.SponsorEntity;
import org.ecomileage.bean.Payment;
//--- Entities
import org.ecomileage.bean.Sponsor;
import org.ecomileage.business.service.CategoryService;
import org.ecomileage.business.service.PaymentService;
//--- Services 
import org.ecomileage.business.service.SponsorService;
import org.ecomileage.business.service.UserService;

/**
 * Spring MVC controller for 'Sponsor' management.
 */
@Controller
@RequestMapping("/auth/sponsor")
public class SponsorAdminController extends AbstractController {
	//--- Variables names ( to be used in JSP with Expression Language )
	private static final Integer PAGE_SIZE   = 10;
	private static String nav = "sponsor";
	private static final String JSP_LIST   = "admin/sponsor/list";
	private static final String JSP_LIST_REGISTER   = "auth/sponsor/register/list";
	//--- Main entity service
	@Resource
    private SponsorService sponsorService; // Injected by Spring
	//--- Other service(s)
	@Resource
    private UserService userService; // Injected by Spring
	@Resource
    private CategoryService categoryService; // Injected by Spring
	@Resource
    private PaymentService paymentService; // Injected by Spring

	/*
	 * Page name: sponsor_reg_list
	 * Method   : GET
	 * Purpose  : get sponsor reg list
	 * */
	@RequestMapping("/register/list")
	public String list(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam Map<String, Object> params,
			HttpSession session,
			HttpServletRequest request,
			Model model) {
		Page<SponsorEntity> listPage = sponsorService.filterAdmin(params, page, PAGE_SIZE);
		List<CategoryEntity> listMembershipFeeType = categoryService.findByGroupId((short)1);
		model.addAttribute("listMembershipFeeType", listMembershipFeeType);
		model.addAttribute("totalMoneySponsor", paymentService.getTotalSponsorBy_TypeSponsor(ApplicationDefine.Payment_TypeSponsor.Periodic.getCode()));
		new Pager<SponsorEntity>(listPage).setSetting(model, request);		
		return getView();
	}

	/*
	 * Page name: sponsor_reg_write
	 * Method   : GET
	 * Purpose  : only get page
	 * */
	@RequestMapping(value = "/register/create", method = RequestMethod.GET)
	public String create(HttpSession session, Model model) {
		try {
			List<CategoryEntity> listMembershipFeeType = categoryService.findByGroupId((short)ApplicationDefine.Category_Type.Sponsor_Membership_Fee_Type.getCode());
			List<CategoryEntity> listMembershipFee = categoryService.findByGroupId((short)(short)ApplicationDefine.Category_Type.Sponsor_Membership_Fee.getCode());
			List<CategoryEntity> listBank = categoryService.findByGroupId((short)(short)ApplicationDefine.Category_Type.Sponsor_Bank.getCode());
			model.addAttribute("listMembershipFeeType", listMembershipFeeType);
			model.addAttribute("listMembershipFee", listMembershipFee);
			model.addAttribute("listBank", listBank);
			return getView();
		} catch(Exception e) {
			return JSP_LIST;
		}
	}
	
	/*
	 * Page name: sponsor_reg_detail_1
	 * Method   : GET
	 * Purpose  : only get page with param is "id" field from jsp page
	 * */
	@RequestMapping(value = "/register/edit1", method = RequestMethod.GET)
	public String updateSponsorRegDetail1(HttpSession session, @RequestParam("id") Integer id,Model model) {
		try {
			SponsorEntity sponsor = sponsorService.findOne(id);
			List<CategoryEntity> listMembershipFeeType = categoryService.findByGroupId((short)ApplicationDefine.Category_Type.Sponsor_Membership_Fee_Type.getCode());
			List<CategoryEntity> listMembershipFee = categoryService.findByGroupId((short)(short)ApplicationDefine.Category_Type.Sponsor_Membership_Fee.getCode());
			List<CategoryEntity> listBank = categoryService.findByGroupId((short)(short)ApplicationDefine.Category_Type.Sponsor_Bank.getCode());
			model.addAttribute("item", sponsor);
			model.addAttribute("listMembershipFeeType", listMembershipFeeType);
			model.addAttribute("listMembershipFee", listMembershipFee);
			model.addAttribute("listBank", listBank);
			return getView();
		} catch(Exception e) {
			return JSP_LIST;
		}
	}
	
	/*
	 * Page name: sponsor_reg_detail_1
	 * Method   : POST
	 * Purpose  : save information to database that user enter and want to change
	 * */
	@RequestMapping(value = "/register/edit1", method = RequestMethod.POST ) 
	public String updateSponsorRegDetail1Post(
			HttpSession session, @ModelAttribute SponsorForm param,
			Model model) {
		try {
			Sponsor sponsor = sponsorService.findById(param.getId());
			sponsor.setMembershipFeeId(param.getMembershipFeeId());
			sponsor.setMembershipFeeTypeId(param.getMembershipFeeTypeId());
			if (param.getMembershipFeeId() == 7) {
				sponsor.setMembershipFee(param.getMembershipFee());
			} else {
				sponsor.setMembershipFee(Integer.valueOf(categoryService.findOne(param.getMembershipFeeId()).getDecription()));
			}
			
			sponsor.setBankId(param.getBankId());
			sponsor.setAccountNumber(param.getAccountNumber());
			sponsor.setAccountName(param.getAccountName());
			sponsor.setIsReviceReceipt(param.getIsReviceReceipt());
			sponsor.setSponsorDate(DataUtils.parseDate(param.getSponsorDate(), "yyyy-MM-dd"));
			sponsor.setUpdateDate(new Date());
			sponsor = sponsorService.update(sponsor);
			
			return "redirect:/" +JSP_LIST_REGISTER;
		} catch (Exception e) {
			e.printStackTrace();
			return getView();
		}
	}
	
	/*
	 * Page name: sponsor_reg_detail_2
	 * Method   : GET
	 * Purpose  : only get page with param is "id" field from jsp page
	 * */
	@RequestMapping(value = "/register/edit2", method = RequestMethod.GET)
	public String updateSponsorRegDetail2(HttpSession session, @RequestParam("id") Integer id,Model model) {
		try {
			SponsorEntity sponsor = sponsorService.findOne(id);
			List<CategoryEntity> listMembershipFeeType = categoryService.findByGroupId((short)ApplicationDefine.Category_Type.Sponsor_Membership_Fee_Type.getCode());
			List<CategoryEntity> listMembershipFee = categoryService.findByGroupId((short)(short)ApplicationDefine.Category_Type.Sponsor_Membership_Fee.getCode());
			List<CategoryEntity> listBank = categoryService.findByGroupId((short)(short)ApplicationDefine.Category_Type.Sponsor_Bank.getCode());
			model.addAttribute("item", sponsor);
			model.addAttribute("listMembershipFeeType", listMembershipFeeType);
			model.addAttribute("listMembershipFee", listMembershipFee);
			model.addAttribute("listBank", listBank);
			return getView();
		} catch(Exception e) {
			return JSP_LIST;
		}
	}
	
	/*
	 * Page name: sponsor_point_list
	 * Method   : GET
	 * Purpose  : get sponsor point list
	 * */
	@RequestMapping("/point/list")
	public String point(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam Map<String, Object> params,
			HttpSession session,
			HttpServletRequest request,
			Model model) {
		params.put("typeMoney", ApplicationDefine.Payment_TypeMoney.Point.getCode());
		model.addAttribute("totalMoney", paymentService.getTotalMoney(params));
		Page<PaymentEntity> listPage = paymentService.filterAdmin(params, page, PAGE_SIZE);
		new Pager<PaymentEntity>(listPage).setSetting(model, request);		
		return getView();
	}
	
	/*
	 * Page name: sponsor_point_detail
	 * Method   : GET
	 * Purpose  : only get page with param is "id" field from jsp page
	 * */
	@RequestMapping(value = "/point/edit", method = RequestMethod.GET)
	public String update(
	HttpSession session,
	@RequestParam Integer id,
	Model model  ) {
		PaymentEntity payment = paymentService.findOne(id);
		try {
			model.addAttribute("item", payment);
			model.addAttribute("activePage", nav);
			return getView();
		} catch(Exception e) {
			return JSP_LIST;
		}
	}
	
	/*
	 * Page name: sponsor_point_detail
	 * Method   : POST
	 * Purpose  : save information to database that user enter and want to change
	 * */
	@RequestMapping(value = "/point/edit", method = RequestMethod.POST)
	public String update(
	@ModelAttribute Payment item,
	HttpSession session,
	@RequestParam Integer id,
	Model model  ) {
		Payment payment = paymentService.findById(id);
		try {
			payment.setMoney( item.getMoney() );
			payment.setTypeMoney( item.getTypeMoney() );
			payment.setTypeUse( item.getTypeUse() );
			payment.setTypePoint( item.getTypePoint() );
			payment.setStatus( item.getStatus() );
			payment.setTypeSponsor( item.getTypeSponsor() );
			payment.setPaymentMethod( item.getPaymentMethod() );
			payment.setTid( item.getTid() );
			payment.setReason( item.getReason() );
			payment.setAccountInfo( item.getAccountInfo() );
			payment.setUpdateDate( new Date() );
			payment = paymentService.update(payment);
			model.addAttribute("item", payment);
		} catch(Exception e) {
			e.printStackTrace();
		}
		return redirectView();
	}
	
	/*
	 * Page name: sponsor_tem_list
	 * Method   : GET
	 * Purpose  : get sponsor tem list
	 * */
	@RequestMapping("/tem/list")
	public String tem(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam Map<String, Object> params,
			HttpSession session,
			HttpServletRequest request,
			Model model) {
		params.put("typeMoney", ApplicationDefine.Payment_TypeMoney.Money.getCode());
		params.put("typeUse", ApplicationDefine.Payment_TypeUse.Donate.getCode());
		params.put("typeSponsor", ApplicationDefine.Payment_TypeSponsor.Temporar.getCode());
		params.put("status", ApplicationDefine.Payment_Status.Watting.getCode());
		model.addAttribute("totalMoney", paymentService.getTotalMoneyTem(params));
		Page<PaymentEntity> listPage = paymentService.filterAdmin(params, page, PAGE_SIZE);
		paymentService.filterAdmin(params, page, PAGE_SIZE);
		
		new Pager<PaymentEntity>(listPage).setSetting(model, request);		
		return getView();
	}
	
	/*
	 * Page name: sponsor_tem_detail
	 * Method   : GET
	 * Purpose  : only get page with param is "id" field from jsp page
	 * */
	@RequestMapping(value = "/tem/edit", method = RequestMethod.GET)
	public String sponsorTemDetail(
	HttpSession session,
	@RequestParam Integer id,
	Model model  ) {
		PaymentEntity payment = paymentService.findOne(id);
		try {
			model.addAttribute("item", payment);
			model.addAttribute("activePage", nav);
			return getView();
		} catch(Exception e) {
			return JSP_LIST;
		}
	}
	
	
	/*
	 * Page name: sponsor_tem_write
	 * Method   : GET
	 * Purpose  : only get page
	 * */
	@RequestMapping(value = "/tem/create", method = RequestMethod.GET)
	public String sponsorTemWrite(HttpSession session, Model model) {
		try {
			return getView();
		} catch(Exception e) {
			return JSP_LIST;
		}
	}
}
