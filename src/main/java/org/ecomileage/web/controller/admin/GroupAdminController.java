/*
 * Created on 7 thg 12 2017 ( Time 10:06:05 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.ecomileage.web.controller.admin;

import java.util.List;
import java.util.Date;
import java.util.Map;
import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
//--- Common classes
import org.ecomileage.web.common.AbstractController;
import org.ecomileage.web.common.PageCustom;
import org.ecomileage.web.common.Pager;
import org.ecomileage.bean.jpa.TeamMemberEntity;
//--- Entities
import org.ecomileage.bean.Team;
import org.ecomileage.bean.TeamMember;
import org.ecomileage.business.service.TeamMemberService;
//--- Services 
import org.ecomileage.business.service.TeamService;

/**
 * Spring MVC controller for 'Team' management.
 */
@Controller
@RequestMapping("/auth/group")
public class GroupAdminController extends AbstractController {
	//--- Variables names ( to be used in JSP with Expression Language )
	private static final Integer PAGE_SIZE   = 10;
	private static String nav = "team";
	//--- Main entity service
	@Resource
    private TeamService teamService; // Injected by Spring
	@Resource
    private TeamMemberService teamMemberService; // Injected by Spring
	//--- Other service(s)

	/*
	 * Page name: group_list
	 * Method   : GET
	 * Purpose  : get group list
	 * */
	@RequestMapping("/list")
	public String list(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam Map<String, Object> params,
			HttpSession session,
			HttpServletRequest request,
			Model model) {;
		PageCustom<Map<String,Object>> listPage = teamService.listPagingAdminCustom(params, page, PAGE_SIZE);
		model.addAttribute("activePage", nav);
		new Pager<Map<String,Object>>(listPage).setManualSetting(model, request);		
		return getView();
	}
	
	/*
	 * Page name: group_detail_1, group_detail_2
	 * Method   : GET
	 * Purpose  : only get page with param is "id" field from jsp page
	 * */
	@RequestMapping(value = "/edit", method = RequestMethod.GET)
	public String update(
	HttpSession session,
	@RequestParam Integer id,
	@RequestParam(defaultValue="false") Boolean deleteGroup,
	Model model  ) {
		try {
			
			Team team = teamService.findById(id);
			List<Map<String, Object>> list = teamMemberService.findByGroupId(id);
			String groupManagerName = "";
			String groupManagerId = "";
			Float totalMileage = 0f;
			Float totalReduceCO2 = 0f;
			Float totalTree = 0f;
			for (Map<String, Object> i : list) {
				if(Boolean.parseBoolean(String.valueOf(i.get("isManager")))) {
					if(i.get("username") != null) {
						groupManagerId = String.valueOf(i.get("username"));
					}else {
						groupManagerId = String.valueOf(i.get("fullname"));
					}
					groupManagerName = String.valueOf(i.get("fullname"));
				}
				totalMileage += Float.valueOf(String.valueOf(i.get("totalMileage")));
				totalReduceCO2 += Float.valueOf(String.valueOf(i.get("totalReduceCo2")));
				totalTree += Float.valueOf(String.valueOf(i.get("totalTree")));
			}
			model.addAttribute("totalMileage", totalMileage);
			model.addAttribute("totalReduceCO2", totalReduceCO2);
			model.addAttribute("totalTree", totalTree);
			model.addAttribute("totalMember", list.size());
			model.addAttribute("list", list);
			model.addAttribute("groupManagerName", groupManagerName);
			model.addAttribute("groupManagerId", groupManagerId);
			model.addAttribute("item", team);
			model.addAttribute("activePage", nav);
			return getView();
		} catch(Exception e) {
			e.printStackTrace();
			return redirectList();
		}
	}
	
	/*
	 * Page name: group_detail_1, group_detail_2
	 * Method   : POST
	 * Purpose  : save information to database that user enter and want to change
	 * */
	@RequestMapping(value = "/edit", method = RequestMethod.POST)
	public String update_post(
	HttpSession session,
	@RequestParam Integer id,
	@RequestParam(defaultValue="false") Boolean deleteGroup,
	@RequestParam(defaultValue="0") Integer addMemberId,
	@RequestParam(defaultValue="0") Integer deleteMemberId,
	Model model  ) {
		try {
			Team team = teamService.findById(id);
			
			if(deleteGroup) {
				team.setIsDelete(true);
				team.setDeleteDate(new Date());
				team.setUpdateDate(new Date());
				teamService.update(team);
				return redirectList();
			}
			if(addMemberId > 0) {
				TeamMemberEntity tm = teamMemberService.findByUserIdAndGroupId(addMemberId, id);
				if(tm == null) {
					TeamMember t = new TeamMember();
					t.setCreateDate(new Date());
					t.setGroupId(id);
					t.setIsDelete(false);
					t.setIsManager(false);
					t.setMemberId(addMemberId);
					t.setUpdateDate(new Date());
					teamMemberService.create(t);
				}
				
			}
			if(deleteMemberId > 0) {
				TeamMember t = teamMemberService.findById(deleteMemberId);
				t.setIsDelete(true);
				teamMemberService.update(t);
			}
			model.addAttribute("item", team);
		} catch(Exception e) {
			e.printStackTrace();
		}
		return redirectView()+"?id="+id;
	}
	
}
