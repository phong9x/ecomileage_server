/*
 * Created on 22 thg 8 2016 ( Time 15:01:35 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.ecomileage.web.controller.mobile;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.httpclient.DefaultHttpMethodRetryHandler;
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpException;
import org.apache.commons.httpclient.HttpStatus;
import org.apache.commons.httpclient.methods.GetMethod;
import org.apache.commons.httpclient.params.HttpMethodParams;
import org.ecomileage.bean.Payment;
import org.ecomileage.bean.User;
import org.ecomileage.bean.UserItem;
import org.ecomileage.business.service.PaymentService;
import org.ecomileage.business.service.UserService;
import org.ecomileage.rest.common.AuthorizationToken;
import org.ecomileage.web.common.AbstractController;
import org.ecomileage.web.common.ApplicationDefine;
import org.ecomileage.web.common.utils.ConstantUtils;
import org.ecomileage.web.common.utils.KakaoPay;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import kr.co.lgcns.module.lite.CnsPayWebConnector4NS;


@Controller
@RequestMapping("/payment")
public class PaymentController extends AbstractController {
	
	private static final String JSP_RESULT = "/payment/result";
	private static final String JSP_NOTI = "payment/noti";
	private static final String JSP_NEXT = "payment/next";

	private static final String MID = "INIpayTest"; 
	//private static final String MID = "INIpayTest"; // test MID
	
	private static final short PAYMENT_SUCCESS = 1;
	private static final short PAYMENT_IN_PROGRESS = 0;
	private static final short PAYMENT_NEED_MONEY_TRANSFER = 2;

	private static final String TOKEN_TEST = "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ7XCJpZFwiOjM3MixcImZ1bGxuYW1lXCI6bnVsbCxcImVtYWlsXCI6bnVsbCxcInJvbGVcIjpcIjFcIixcImF2YXRhclwiOm51bGwsXCJjYXRlZ29yeVwiOm51bGwsXCJsYXN0TG9naW5cIjpudWxsLFwiZXhwaXJhdGlvblwiOjE0OTQ0ODQyNTE2MjJ9In0.QUVwrVO84GWsBdLX4e05SNUL8lalCZVICllEFVJPg7s";
	
	// Resource
	@Resource
	private PaymentService paymentService;

	@Resource
	private UserService userService;


	@RequestMapping(value = "", method = RequestMethod.GET)
	public String charge(
			@RequestParam(value = "token",defaultValue = TOKEN_TEST) String token,
			@RequestParam(required=true) String paymentMethod,
			@RequestParam(required=true) Integer money,
			HttpSession session,
			Model model) throws Exception {
		try {
			// 인증
			UserItem u = AuthorizationToken.convertToObject(token);
			User user = userService.findById(u.getId());
			Calendar cal = Calendar.getInstance();
			
			if(paymentMethod.equals("bank")) {
				Payment payment = new Payment();
				payment.setUserId(user.getId());
				payment.setMoney(money);
				payment.setTypeMoney(ApplicationDefine.Payment_TypeMoney.Money.getCode());
				payment.setTypeUse(ApplicationDefine.Payment_TypeUse.Donate.getCode());
				payment.setTypeSponsor(ApplicationDefine.Payment_TypeSponsor.Temporar.getCode());
				payment.setStatus(ApplicationDefine.Payment_Status.Watting.getCode());
				payment.setPaymentMethod(paymentMethod);
				payment.setFullname(user.getFullname());
				payment.setPhone(user.getPhone());
				payment.setEmail(user.getEmail());
				payment.setPostcode(user.getPostcode());
				payment.setAddress(user.getAddress());
				payment.setAddressDetail(user.getAddressDetail());
				payment.setCreateDate(new Date());
				payment.setUpdateDate(new Date());
				payment = paymentService.create(payment);
				model.addAttribute("P_OID", payment.getId());
			}else {
				model.addAttribute("P_OID", u.getId());
			}
			
			model.addAttribute("paymethod", paymentMethod);
			model.addAttribute("P_AMT", money);
			model.addAttribute("P_UNAME", user.getFullname());
			model.addAttribute("P_MOBILE", user.getPhone());
			model.addAttribute("P_EMAIL", user.getEmail());
			model.addAttribute("P_MID", MID);
			model.addAttribute("P_NOTI", user.getId()+"-"+money+"-"+paymentMethod);
			
			model.addAttribute("userId", u.getId());
			model.addAttribute("fullname", user.getFullname());
			
			if(ConstantUtils.getConfig("domain").equals("not found")) {
				model.addAttribute("siteDomain", "localhost:8080");
			}else {
				model.addAttribute("siteDomain", ConstantUtils.getConfig("domain"));
			}
			
			String EdiDate = KakaoPay.getyyyyMMddHHmmss(); 
			//결제요청용 키값
			String md_src = EdiDate + KakaoPay.MID + money;
			String hash_String  = KakaoPay.SHA256Salt(md_src, KakaoPay.encodeKey);
			
			HashMap<String, Object> kakaoPay = new HashMap<String, Object>();
			kakaoPay.put("Amt", money);
			kakaoPay.put("EdiDate", EdiDate);
			kakaoPay.put("EncryptData", hash_String);
			kakaoPay.put("msgName", KakaoPay.msgName);
			kakaoPay.put("webPath", KakaoPay.webPath);
			kakaoPay.put("MID", KakaoPay.MID);
			kakaoPay.put("BuyerEmail", user.getUsername());
			kakaoPay.put("BuyerName", user.getFullname());
			kakaoPay.put("merchantEncKey", KakaoPay.merchantEncKey);
			kakaoPay.put("merchantHashKey", KakaoPay.merchantHashKey);
			kakaoPay.put("requestDealApproveUrl", KakaoPay.webPath + KakaoPay.msgName);
			kakaoPay.put("merchantHashKey", KakaoPay.merchantHashKey);
			kakaoPay.put("prType", KakaoPay.TYPE_MOBILE);
			kakaoPay.put("channelType", KakaoPay.CHANEL_MOBILE);
			kakaoPay.put("merchantTxnNum", user.getId());
			SimpleDateFormat format = new SimpleDateFormat("yyyyMMdd");
			kakaoPay.put("OrderBirthDay", format.format(user.getDayOfBirth()));
			model.addAttribute("kakaoPay", kakaoPay);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return getView();
	}

	@RequestMapping(value = "/next_card")
	public String paymentNextCard(HttpSession session, HttpServletRequest request, Model model) throws Exception {

		boolean success = false;
		int state = PAYMENT_IN_PROGRESS;

		request.setCharacterEncoding("euc-kr");
		Enumeration<String> paramNames = request.getParameterNames();

		if (paramNames != null) {
			while (paramNames.hasMoreElements()) {
				String paramName = paramNames.nextElement();
				String value = request.getParameter(paramName);
			}
		}

		String P_STATUS = request.getParameter("P_STATUS");
		String P_RMESG1 = request.getParameter("P_RMESG1");
		String P_TID = request.getParameter("P_TID");
		String P_REQ_URL = request.getParameter("P_REQ_URL");
		String P_NOTI = request.getParameter("P_NOTI");
		String[] P_NOTI_S = P_NOTI.split("-");
		int userId = Integer.parseInt(P_NOTI_S[0]);
		int money = Integer.parseInt(P_NOTI_S[1]);
		String paymethod = String.valueOf(P_NOTI_S[2]);
		String message = P_RMESG1;
		int P_OID ;
		try {
			if (P_STATUS.equals("00")) // success
			{
				P_REQ_URL = P_REQ_URL + "?P_TID=" + P_TID + "&P_MID=" + MID;
				HashMap<String, String> map = requestApproval(P_REQ_URL);
				if (map != null && map.size() > 0) {
					P_STATUS = map.get("P_STATUS");
					if (P_STATUS.equals("00")) {
						P_OID = Integer.parseInt(map.get("P_OID"));
						P_TID = map.get("P_TID");
						success = paymentSuccessProcess(userId, money, PAYMENT_SUCCESS, paymethod, P_TID);
						if (!success) {
							System.out.println("need cancel payment, tid: " + P_TID);
						} else {
							state = PAYMENT_SUCCESS;
						}
					} else {
						message = map.get("P_RMESG1");
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	
		model.addAttribute("P_STATUS", P_STATUS);
		model.addAttribute("success", success);
		model.addAttribute("state", state);
		model.addAttribute("message", message);

		return JSP_RESULT;
	}

	private HashMap<String, String> requestApproval(String reqUrl) {
		HttpClient client = new HttpClient();
		GetMethod method = new GetMethod(reqUrl);
		method.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, new DefaultHttpMethodRetryHandler(3, false));
		HashMap<String, String> map = new HashMap<String, String>();

		try {
			int statusCode = client.executeMethod(method);

			if (statusCode != HttpStatus.SC_OK) {
			} else {
				// Read the response body.
				byte[] responseBody = method.getResponseBody(); // 승인결과 파싱
				String[] values = new String(responseBody, "EUC-KR").split("&");

				for (int x = 0; x < values.length; x++) {

					// 승인결과를 파싱값 잘라 hashmap에 저장
					int i = values[x].indexOf("=");
					String key1 = values[x].substring(0, i).trim();
					String value1 = values[x].substring(i + 1).trim();

					map.put(key1, value1);
				}
			}
		} catch (HttpException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			// Release the connection.
			method.releaseConnection();
		}
		return map;
	}

	private boolean paymentSuccessProcess(Integer userId, Integer money, Short status, String paymentMethod, String tid) {
		boolean success = false;

		try {
			User user =userService.findById(userId);
			Payment payment = new Payment();
			payment.setUserId(userId);
			payment.setMoney(money);
			payment.setTypeMoney(ApplicationDefine.Payment_TypeMoney.Money.getCode());
			payment.setTypeUse(ApplicationDefine.Payment_TypeUse.Donate.getCode());
			payment.setTypeSponsor(ApplicationDefine.Payment_TypeSponsor.Temporar.getCode());
			payment.setStatus(status);
			payment.setPaymentMethod(paymentMethod);
			payment.setTid(tid);
			payment.setFullname(user.getFullname());
			payment.setPhone(user.getPhone());
			payment.setEmail(user.getEmail());
			payment.setPostcode(user.getPostcode());
			payment.setAddress(user.getAddress());
			payment.setAddressDetail(user.getAddressDetail());
			payment.setCreateDate(new Date());
			payment.setUpdateDate(new Date());
			paymentService.create(payment);
			success = true;

		} catch (Exception e) {
			e.printStackTrace();
			return success;
		}
		return success;
	}
	
	private boolean updatePaymentSuccess(Integer P_OID, String tid) {
		boolean success = false;

		try {
			Payment payment = paymentService.findById(P_OID);
			payment.setTid(tid);
			payment.setUpdateDate(new Date());
			paymentService.update(payment);
			success = true;

		} catch (Exception e) {
			e.printStackTrace();
			return success;
		}
		return success;
	}

	@RequestMapping(value = "/return_bank")
	public String paymentReturnBank(
			@RequestParam(value = "P_OID", defaultValue = "") Integer P_OID,
			HttpSession session, HttpServletRequest request, Model model)  {
		try {
			Payment payment = paymentService.findById(P_OID);
			boolean success = false;
			int state = PAYMENT_IN_PROGRESS;
			if (payment != null) {
				state = payment.getStatus();
				if (state == PAYMENT_SUCCESS) {
					success = true;
				} else {
					paymentService.delete(P_OID);
				}
			}
			System.out.println("success:" + success);
			System.out.println("state:" + state);
			model.addAttribute("success", success);
			model.addAttribute("state", state);
		} catch (Exception e) {
			e.printStackTrace();
		}
		

		return JSP_RESULT;
	
	}

	@RequestMapping(value = "/noti_bank")
	public String paymentNotiBank(HttpSession session, HttpServletRequest request, Model model) throws Exception {
		request.setCharacterEncoding("euc-kr");

		String P_STATUS = request.getParameter("P_STATUS");
		String P_TID = request.getParameter("P_TID");
		String P_TYPE = request.getParameter("P_TYPE");
		String state = P_TID;
		boolean success = false;
		String result = "OK";
		if ((P_TYPE.equals("BANK") && P_STATUS.equals("00")) || (P_TYPE.equals("VBANK") && P_STATUS.equals("02"))) {
			Integer P_OID = Integer.parseInt(request.getParameter("P_OID"));
		     success = updatePaymentSuccess(P_OID, P_TID);
			if (!success) {
				result = "FAIL";
				System.out.println("need cancel payment, tid: " + P_TID);
			}
		} else if (P_TYPE.equals("VBANK") && !P_STATUS.equals("02")) {
			System.out.println("ignore account info noti, tid: " + P_TID);
		} 
		model.addAttribute("result", result);
		System.out.println("success:" + success);
		System.out.println("state:" + state);
		model.addAttribute("success", success);
		model.addAttribute("state", state);
		return JSP_RESULT;
	}

	
	@RequestMapping(value = "/kakaopay/result")
	public String kakaoPayResult(HttpSession session, HttpServletRequest request, Model model) throws Exception {
		//request.setCharacterEncoding("euc-kr");
		// 모듈이 설치되어 있는 경로 설정
	    CnsPayWebConnector4NS connector = new CnsPayWebConnector4NS();

	    // 환경설정 및 로그 디렉토리 생성(incKakaopayCommon.jsp에서 설정한 값 사용)
	    connector.setLogHome(KakaoPay.logHome);
	    connector.setCnsPayHome(KakaoPay.cnsPayHome);

	    // 요청 페이지 파라메터 셋팅
	    connector.setRequestData(request);

	    // 추가 파라메터 셋팅
	    connector.addRequestData("actionType", "PY0");              // actionType : CL0 취소, PY0 승인
	    connector.addRequestData("MallIP", request.getRemoteAddr());// 가맹점 고유 ip

	    //가맹점키 셋팅 (MID 별로 틀림)

	    connector.addRequestData("EncodeKey", KakaoPay.encodeKey);

	    // CNSPAY Lite 서버 접속하여 처리
	    connector.requestAction();
	    
	    // 결과 처리
	    String resultCode = connector.getResultData("ResultCode");      // 결과코드 (정상 :3001 , 그 외 에러)
	    String resultMsg = connector.getResultData("ResultMsg");        // 결과메시지
	    String tid = connector.getResultData("TID");                    // 거래ID
	    String moid = connector.getResultData("Moid");                  // 주문번호
	    String payMethod = connector.getResultData("PayMethod");        // 결제수단
	    
//	    String authDate = connector.getResultData("AuthDate");          // 승인일시 YYMMDDHH24mmss
//	    String authCode = connector.getResultData("AuthCode");          // 승인번호
//	    String buyerName = connector.getResultData("BuyerName");        // 구매자명
//	    String goodsName = connector.getResultData("GoodsName");        // 상품명
//	    String mid = connector.getResultData("MID");                    // 가맹점ID
	    String amt = connector.getResultData("Amt");                    // 금액
//	    String cardCode = connector.getResultData("CardCode");          // 카드사 코드
//	    String cardName = connector.getResultData("CardName");          // 결제카드사명
//	    String cardQuota = connector.getResultData("CardQuota");        // 할부개월수 ex) 00:일시불,02:2개월
//	    String cardInterest = connector.getResultData("CardInterest");  // 무이자 여부 (0:일반, 1:무이자)
//	    String cardCl = connector.getResultData("CardCl");              // 체크카드여부 (0:일반, 1:체크카드)
//	    String cardBin = connector.getResultData("CardBin");            // 카드BIN번호
//	    String cardPoint = connector.getResultData("CardPoint");        // 카드사포인트사용여부 (0:미사용, 1:포인트사용, 2:세이브포인트사용)
//	    
//	    //부인방지토큰값
//	    String nonRepToken = request.getParameter("NON_REP_TOKEN");
	    
	    boolean success = false;
		int state = PAYMENT_IN_PROGRESS;
	    String message = resultMsg;
	    int userId = Integer.parseInt(moid);
	    int money = Integer.valueOf(amt);
	    /** 위의 응답 데이터 외에도 전문 Header와 개별부 데이터 Get 가능 */
	    if(payMethod.equals("CARD")){                                   //신용카드
	        if(resultCode.equals("3001")){ // 결과코드 (정상 :3001 , 그 외 에러)
	        	success = paymentSuccessProcess(userId, money, ApplicationDefine.Payment_Status.PaymentSuccess.getCode(), payMethod, tid);
				if (!success) {
					System.out.println("need cancel payment, tid: " + tid);
				} else {
					state = PAYMENT_SUCCESS;
				}
	        }
	    }

		model.addAttribute("P_STATUS", resultCode);
		model.addAttribute("success", success);
		model.addAttribute("state", state);
		model.addAttribute("message", message);

		return JSP_RESULT;
	}

}
